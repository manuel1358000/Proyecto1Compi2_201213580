package Analizadores.GramaticaFS;
import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.lang.*;
import javax.swing.JOptionPane;
import java.io.*;
import java.util.LinkedList;
import java.awt.Color;
import ArbolAST.AST;
import ArbolAST.NodoAST;
import ArbolAST.Entorno.Type;

import ArbolAST.Expresiones.Expresion;
import ArbolAST.Expresiones.operacion.Logica;
import ArbolAST.Expresiones.operacion.Aritmetica;
import ArbolAST.Expresiones.operacion.Relacional;
import ArbolAST.Expresiones.operacion.Operacion.Operador;
import ArbolAST.Expresiones.operacion.Ternario;
import ArbolAST.Expresiones.operacion.Retornar;
import ArbolAST.Expresiones.Llamada_Funcion;
import ArbolAST.Instrucciones.Imprimir;
import ArbolAST.Instrucciones.Detener;
import ArbolAST.Instrucciones.Seleccion.If;
import ArbolAST.Instrucciones.Seleccion.SubIf;
import ArbolAST.Instrucciones.Seleccion.Caso;
import ArbolAST.Instrucciones.Seleccion.Switch;
import ArbolAST.Instrucciones.Asignacion;
import ArbolAST.Instrucciones.Funcion;
import ArbolAST.Instrucciones.Declaracion;
import ArbolAST.Instrucciones.AsignacionArreglo;
import ArbolAST.Instrucciones.Declaracion_Arreglo;
import ArbolAST.Expresiones.AccesoArreglo;
import ArbolAST.Instrucciones.Componente_Funcion_Arreglo;
import ArbolAST.Instrucciones.Funciones_Arreglos;
parser code
{:
    public AST root;
    public static int index=0;
    public void syntax_error(Symbol s){
        System.out.println("Error sintactico en la linea "+(s.left+1)+" Columna "+s.right+". Identificador "+s.value+" no reconocido"); 
    }
    /**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        javax.swing.JOptionPane.showMessageDialog(null,"Error Sintactico en la linea "+(s.right+1)+"Columna "+s.left+". Identificador"+s.value+" no reconocido.");
    }
:}
action code
{:  
:}

//DEFINICION DE SIMBOLOS DEL LENGUAJE FS
terminal String parena,parenc,llavea,llavec,igual,mas,menos,por,div,pot,mayorq,menorq,mayorigualq,menorigualq,igualigual,diferente,and,or,not;
terminal String coma,pyc,corchea,corchec,pto,dospuntos,signoi,incremental,decremental;
//DEFINICION DE PALABRAS RESERVADAS
terminal String var,descendente,ascendente,invertir,maximo,minimo,filtrar;
terminal String buscar,map,reduce,todos,alguno,imprimir,importar,si,sino,caso,detener,retornar,selecciona,funcion;
terminal String defecto;

//DEFINICION VALORES IMPLICITOS LENGUAJE FS
terminal String valor_id,valor_numero_completo,valor_path,valor_path2,valor_cadena,valor_verdadero,valor_falso,valor_simbolo;
terminal String valor_numero_decimal,valor_nulo;

//definicion de no terminales
non terminal AST INICIAL;
non terminal LinkedList<NodoAST> SENTENCIAS_GLOBALES;
non terminal LinkedList<NodoAST> SENTENCIA_GLOBAL;
non terminal LinkedList<NodoAST> DECLARACION_VARIABLES;
non terminal LinkedList<NodoAST> LISTA_ID;
non terminal Expresion EXPRESION;
non terminal LinkedList<NodoAST> LISTA_PARAMETROS;
non terminal Expresion LLAMADA_FUNCION;
non terminal LinkedList<NodoAST> SENTENCIAS_GENERALES;
non terminal LinkedList<NodoAST> SENTENCIA_IMPRIMIR;
non terminal LinkedList<NodoAST> SENTENCIAS_SELECCION;
non terminal Expresion TERNARIO;
non terminal NodoAST SENTENCIA_SI;
non terminal LinkedList<SubIf> SENTENCIA_SINOSI;
non terminal SubIf SENTENCIA_SINO;
non terminal NodoAST SENTENCIA_SELECCIONA;
non terminal LinkedList<Caso> LISTAS_CASOS;
non terminal Caso LISTA_CASO;
non terminal Caso CASO_DEFECTO;
non terminal LinkedList<NodoAST> SENTENCIA_INTERNA;
non terminal LinkedList<NodoAST> SENTENCIA_RETORNAR;
non terminal LinkedList<NodoAST> SENTENCIA_DETENER;
non terminal LinkedList<NodoAST> SENTENCIAS_INTERNAS;
non terminal LinkedList<NodoAST> SENTENCIA_ASIGNACION;
non terminal LinkedList<NodoAST> DEFINICIONES_PARAMETROS;
non terminal LinkedList<NodoAST> DECLARAR_FUNCIONES;
non terminal LinkedList<NodoAST> LISTA_PARAMETRO;
non terminal LinkedList<Expresion> LISTA_ARRAY;
non terminal LinkedList<Expresion> ELEMENTOS_ARRAY;
non terminal Componente_Funcion_Arreglo FUNCIONES_LENGUAJE;
non terminal String ELEMENTOS_OBJETO,ELEMENTO_PATH;
non terminal Expresion LLAMADA_ARREGLO;

non terminal Funciones_Arreglos SENTENCIAS_ARREGLOS;
non terminal LinkedList<Componente_Funcion_Arreglo> FUNCIONES_LENGUAJES;

//DEFINICION DE LA PRECEDENCIA DE LOS OPERADORES
precedence left signoi;
precedence left or;
precedence left and;
precedence right not;
precedence left mayorq,menorq,mayorigualq, menorigualq,igualigual,diferente;

precedence left mas,menos;
precedence left div, por;
precedence left pot;
precedence left parena, parenc;
precedence left decremental,incremental;

start with INICIAL;
INICIAL::= SENTENCIAS_GLOBALES:a{:
                                this.parser.root=new AST(a);
                               :};
SENTENCIAS_GLOBALES::= SENTENCIAS_GLOBALES:a SENTENCIA_GLOBAL:b{:
                                                                RESULT=a;
                                                                RESULT.addAll(b);
                                                               :}
                     | SENTENCIA_GLOBAL:a{:
                                            RESULT=a;
                                         :};

//DECLARACION DE VARIABLES,FUNCIONES, METODOS,OBJETOS,ARREGLOS

SENTENCIA_GLOBAL::= SENTENCIAS_GENERALES:a{:RESULT=a;:}
                  | importar parena ELEMENTO_PATH parenc pyc
                  | DECLARAR_FUNCIONES:a{:RESULT=a;:};

DECLARAR_FUNCIONES::= funcion valor_id:a parena parenc llavea SENTENCIAS_INTERNAS:b llavec{:
                                                                                            RESULT=new LinkedList<>();
                                                                                            RESULT.add(new Funcion(a.toString().toLowerCase(),b));
                                                                                          :}
                    | funcion valor_id:a parena DEFINICIONES_PARAMETROS:b parenc llavea SENTENCIAS_INTERNAS:c llavec{:
                                                                                                                        RESULT=new LinkedList<>();
                                                                                                                        RESULT.add(new Funcion(a.toString().toLowerCase(),b,c));
                                                                                                                    :};

DEFINICIONES_PARAMETROS::= DEFINICIONES_PARAMETROS:a coma valor_id:b{:
                                                                        RESULT=a;
                                                                        RESULT.add(new Declaracion(Type.PrimitiveType.ID,b.toString().toLowerCase(),null,false,bright));
                                                                        :}
                         | DEFINICIONES_PARAMETROS:a coma var valor_id:b{:
                                                                        RESULT=a;
                                                                        RESULT.add(new Declaracion(Type.PrimitiveType.ID,b.toString().toLowerCase(),null,false,bright));
                                                                        :}
                         | valor_id:a{:
                                            RESULT=new LinkedList<>();
                                            RESULT.add(new Declaracion(Type.PrimitiveType.ID,a.toString().toLowerCase(),null,false,aright));
                                         :}
                         | var valor_id:a{:
                                            RESULT=new LinkedList<>();
                                            RESULT.add(new Declaracion(Type.PrimitiveType.ID,a.toString().toLowerCase(),null,false,aright));
                                         :};


SENTENCIAS_INTERNAS::= SENTENCIAS_INTERNAS:a SENTENCIAS_GENERALES:b{:
                                                                    RESULT=a;
                                                                    RESULT.addAll(b);
                                                                   :}
                     | SENTENCIAS_GENERALES:a{:
                                                RESULT=a;
                                             :};

SENTENCIAS_GENERALES::= SENTENCIA_IMPRIMIR:a{:
                                            RESULT=a;
                                            :}
                      | DECLARACION_VARIABLES:a{:
                                                RESULT=a;
                                               :}
                      | SENTENCIAS_SELECCION:a{:RESULT=a;:}
                      | SENTENCIA_RETORNAR:a{:RESULT=a;:}
                      | SENTENCIA_DETENER:a{:RESULT=a;:}
                      | SENTENCIA_ASIGNACION:a{:RESULT=a;:}
                      | LLAMADA_FUNCION:a pyc{:
                                                RESULT=new LinkedList<>();
                                                RESULT.add(a);
                                             :}
                      | SENTENCIAS_ARREGLOS:a pyc{:
                                                RESULT=new LinkedList<>();
                                                RESULT.add(a);
                                             :};


SENTENCIAS_ARREGLOS::= valor_id:a pto FUNCIONES_LENGUAJES:b {:
                                                                RESULT=new Funciones_Arreglos(a,b);
                                                            :};

FUNCIONES_LENGUAJES::= FUNCIONES_LENGUAJES:a pto FUNCIONES_LENGUAJE:b{:
                                                                        RESULT=a;
                                                                        RESULT.add(b);
                                                                     :}
                     | FUNCIONES_LENGUAJE:a{:
                                            RESULT=new LinkedList<>();
                                            RESULT.add(a);
                                           :};
FUNCIONES_LENGUAJE::= descendente parena parenc{:
                                                RESULT=new Componente_Funcion_Arreglo("descendente");
                                               :}
                    | ascendente parena parenc{:
                                                RESULT=new Componente_Funcion_Arreglo("ascendente");
                                              :}
                    | invertir parena parenc{:
                                              RESULT=new Componente_Funcion_Arreglo("invertir");
                                            :}
                    | maximo parena parenc{:
                                            RESULT=new Componente_Funcion_Arreglo("maximo");
                                          :}
                    | minimo parena parenc{:
                                            RESULT=new Componente_Funcion_Arreglo("minimo");
                                          :}
                    | filtrar parena valor_id:a parenc{:
                                                        RESULT=new Componente_Funcion_Arreglo("filtrar",a.toString().toLowerCase());
                                                       :}
                    | buscar parena valor_id:a parenc{:
                                                        RESULT=new Componente_Funcion_Arreglo("buscar",a.toString().toLowerCase());
                                                      :}
                    | map parena valor_id:a parenc{:
                                                    RESULT=new Componente_Funcion_Arreglo("map",a.toString().toLowerCase());
                                                   :}
                    | reduce parena valor_id:a parenc{:
                                                        RESULT=new Componente_Funcion_Arreglo("reduce",a.toString().toLowerCase());
                                                      :}
                    | todos parena valor_id:a parenc{:
                                                        RESULT=new Componente_Funcion_Arreglo("todos",a.toString().toLowerCase());
                                                     :}
                    | alguno parena valor_id:a parenc{:
                                                        RESULT=new Componente_Funcion_Arreglo("alguno",a.toString().toLowerCase());
                                                      :};

SENTENCIA_ASIGNACION::= valor_id:a igual EXPRESION:b pyc{:
                                                            RESULT=new LinkedList<>();
                                                            RESULT.add(new Asignacion(a.toString().toLowerCase(),b,Operador.IGUAL,aright,aleft));
                                                        :}
                      | valor_id:a mas igual EXPRESION:b pyc{:
                                                                RESULT=new LinkedList<>();
                                                                RESULT.add(new Asignacion(a.toString().toLowerCase(),b,Operador.A_SUMA,aright,aleft));
                                                            :}
                      | valor_id:a menos igual EXPRESION:b pyc{:
                                                                RESULT=new LinkedList<>();
                                                                RESULT.add(new Asignacion(a.toString().toLowerCase(),b,Operador.A_RESTA,aright,aleft));
                                                              :}
                      | valor_id:a por igual EXPRESION:b pyc{:
                                                                RESULT=new LinkedList<>();
                                                                RESULT.add(new Asignacion(a.toString().toLowerCase(),b,Operador.A_MULT,aright,aleft));
                                                            :}
                      | valor_id:a div igual EXPRESION:b pyc{:
                                                                RESULT=new LinkedList<>();
                                                                RESULT.add(new Asignacion(a.toString().toLowerCase(),b,Operador.A_DIV,aright,aleft));
                                                            :}
                      | valor_id:a corchea EXPRESION:b corchec igual EXPRESION:c pyc{:
                                                                                        RESULT=new LinkedList<>();
                                                                                        RESULT.add(new AsignacionArreglo(a.toString().toLowerCase(),c,b,Operador.IGUAL));
                                                                                    :}
                      | valor_id:a corchea EXPRESION:b corchec mas igual EXPRESION:c pyc{:
                                                                                            RESULT=new LinkedList<>();
                                                                                            RESULT.add(new AsignacionArreglo(a.toString().toLowerCase(),c,b,Operador.A_SUMA));
                                                                                        :}
                      | valor_id:a corchea EXPRESION:b corchec menos igual EXPRESION:c pyc{:
                                                                                            RESULT=new LinkedList<>();
                                                                                            RESULT.add(new AsignacionArreglo(a.toString().toLowerCase(),c,b,Operador.A_RESTA));
                                                                                          :}
                      | valor_id:a corchea EXPRESION:b corchec por igual EXPRESION:c pyc{:
                                                                                            RESULT=new LinkedList<>();
                                                                                            RESULT.add(new AsignacionArreglo(a.toString().toLowerCase(),c,b,Operador.A_MULT));
                                                                                        :}
                      | valor_id:a corchea EXPRESION:b corchec div igual EXPRESION:c pyc{:
                                                                                            RESULT=new LinkedList<>();
                                                                                            RESULT.add(new AsignacionArreglo(a.toString().toLowerCase(),c,b,Operador.A_DIV));
                                                                                        :}
                      | valor_id:a decremental pyc{:
                                                        RESULT=new LinkedList<>();
                                                        Aritmetica aritmetica =new Aritmetica(a.toString().toLowerCase(),Type.PrimitiveType.ID);
                                                        RESULT.add(new Asignacion(a.toString().toLowerCase(),aritmetica,Operador.DECREMENTO,aleft,aright));
                                                   :}
                      | valor_id:a incremental pyc{:
                                                    RESULT=new LinkedList<>();
                                                    Aritmetica aritmetica=new Aritmetica(a.toString().toLowerCase(),Type.PrimitiveType.ID);
                                                    RESULT.add(new Asignacion(a.toString().toLowerCase(),aritmetica,Operador.AUMENTO,aleft,aright));
                                                   :};

SENTENCIA_RETORNAR::= retornar EXPRESION:a pyc{:
                                                RESULT=new LinkedList<>();
                                                RESULT.add(new Retornar(a));
                                              :}
                    | retornar pyc{:
                                    RESULT=new LinkedList<>();
                                    RESULT.add(new Retornar());
                                   :};
SENTENCIA_DETENER::= detener pyc{:
                                    RESULT=new LinkedList<>();
                                    RESULT.add(new Detener());
                                :};

SENTENCIA_IMPRIMIR::=imprimir:a parena EXPRESION:b parenc pyc{:
                                                                RESULT=new LinkedList<NodoAST>();
                                                                RESULT.add(new Imprimir(b));
                                                             :};
SENTENCIAS_SELECCION::= SENTENCIA_SI:a{:
                                        RESULT=new LinkedList<NodoAST>();
                                        RESULT.add(a);
                                      :}
                      | SENTENCIA_SELECCIONA:a{:
                                                RESULT=new LinkedList<NodoAST>();
                                                RESULT.add(a);
                                              :};


SENTENCIA_SELECCIONA::= selecciona parena EXPRESION:a parenc llavea LISTAS_CASOS:b CASO_DEFECTO:c llavec{:
                                                                                                        RESULT=new Switch(a,b,c);
                                                                                                        :}
                      | selecciona parena EXPRESION:a parenc llavea LISTAS_CASOS:b llavec{:
                                                                                            RESULT=new Switch(a,b,null);
                                                                                         :};

LISTAS_CASOS::= LISTAS_CASOS:a LISTA_CASO:b{:
                                            RESULT=a;
                                            RESULT.add(b);
                                           :}
              | LISTA_CASO:a{:
                                RESULT=new LinkedList<>();
                                RESULT.add(a);
                            :};

LISTA_CASO::= caso EXPRESION:a dospuntos llavea SENTENCIAS_INTERNAS:b llavec{:
                                                                             RESULT=new Caso(a,b);
                                                                            :};

CASO_DEFECTO::= defecto dospuntos llavea SENTENCIAS_INTERNAS:a llavec{:
                                                                    RESULT=new Caso(a);
                                                                   :};



SENTENCIA_SI::= si parena EXPRESION:a parenc llavea SENTENCIAS_INTERNAS:b llavec SENTENCIA_SINOSI:c SENTENCIA_SINO:d{:
                                                                                                                        RESULT=new If(a,b,c,d);
                                                                                                                    :}
              | si parena EXPRESION:a parenc llavea SENTENCIAS_INTERNAS:b llavec SENTENCIA_SINOSI:c{:
                                                                                                    RESULT=new If(a,b,c,new SubIf());
                                                                                                   :}
              | si parena EXPRESION:a parenc llavea SENTENCIAS_INTERNAS:b llavec SENTENCIA_SINO:c{:
                                                                                                    RESULT=new If(a,b,new LinkedList<>(),c);
                                                                                                 :}
              | si parena EXPRESION:a parenc llavea SENTENCIAS_INTERNAS:b llavec{:
                                                                                 RESULT=new If(a,b,new LinkedList<>(),new SubIf());
                                                                                :};



SENTENCIA_SINO::= sino llavea SENTENCIAS_INTERNAS:a llavec{:
                                                            RESULT=new SubIf(null,a,true);
                                                          :};

SENTENCIA_SINOSI::= SENTENCIA_SINOSI:a sino si parena EXPRESION:b parenc llavea SENTENCIAS_INTERNAS:c llavec{:
                                                                                                                RESULT=a;
                                                                                                                RESULT.add(new SubIf(b,c,false));
                                                                                                            :}
                  | sino si parena EXPRESION:a parenc llavea SENTENCIAS_INTERNAS:b llavec{:
                                                                                            RESULT=new LinkedList<SubIf>();
                                                                                            RESULT.add(new SubIf(a,b,false));
                                                                                         :};


DECLARACION_VARIABLES::= var LISTA_ID:a pyc{:
                                            RESULT=a;
                                           :}
                       | var LISTA_ID:a igual EXPRESION:b pyc{:
                                                                int indice=a.size()-1;
                                                                Declaracion ultima=(Declaracion)a.get(indice);
                                                                a.remove(indice);
                                                                ultima.setIntValue(b);
                                                                ultima.setInicializado(true);
                                                                a.add(ultima);
                                                                RESULT=a;
                                                             :}
                       | var LISTA_ID:a igual corchea ELEMENTOS_ARRAY:b corchec pyc{:
                                                                                int indice=a.size()-1;
                                                                                Declaracion ultima=(Declaracion)a.get(indice);
                                                                                a.remove(indice);
                                                                                Declaracion_Arreglo declaracion_arreglo=new Declaracion_Arreglo(Type.PrimitiveType.NULL,ultima.getId(),null,true,ultima.getLine(),b);
                                                                                a.add(declaracion_arreglo);
                                                                                RESULT=a;
                                                                               :}
                       | var LISTA_ID igual llavea ELEMENTOS_OBJETO llavec pyc;


ELEMENTO_PATH::= valor_path
                | valor_path2;

ELEMENTOS_OBJETO::= ELEMENTOS_OBJETO coma valor_id dospuntos EXPRESION
                  | valor_id dospuntos EXPRESION;

ELEMENTOS_ARRAY::={:RESULT=new LinkedList<>();:}
                 | LISTA_ARRAY:a{:RESULT=a;:};
LISTA_ARRAY::= LISTA_ARRAY:a coma EXPRESION:b{:
                                                RESULT=a;
                                                RESULT.add(b);
                                             :}
             | EXPRESION:a{:
                            RESULT=new LinkedList<>();
                            RESULT.add(a);
                          :};
LISTA_ID::= LISTA_ID:a coma valor_id:b{:
                                       RESULT=a;
                                       Declaracion declaracion=new Declaracion(Type.PrimitiveType.NULL,b.toString().toLowerCase(),null,false,bleft);
                                       RESULT.add(declaracion);
                                      :}
          | valor_id:a{:
                        RESULT=new LinkedList<NodoAST>();
                        Declaracion declaracion=new Declaracion(Type.PrimitiveType.NULL,a.toString().toLowerCase(),null,false,aleft);
                        RESULT.add(declaracion);
                      :};


EXPRESION::= menos EXPRESION:a{:
                                            RESULT=new Aritmetica(a,true,Operador.UNARIO);
                                       :}
           | EXPRESION:a mas EXPRESION:b{:
                                            RESULT=new Aritmetica(a,b,Operador.SUMA);
                                       :}
           | EXPRESION:a menos EXPRESION:b{:
                                            RESULT=new Aritmetica(a,b,Operador.RESTA);
                                       :}
           | EXPRESION:a por EXPRESION:b{:
                                            RESULT=new Aritmetica(a,b,Operador.MULTIPLICACION);
                                       :}
           | EXPRESION:a div EXPRESION:b{:
                                            RESULT=new Aritmetica(a,b,Operador.DIVISION);
                                       :}
           | EXPRESION:a pot EXPRESION:b{:
                                            RESULT=new Aritmetica(a,b,Operador.POTENCIA);
                                       :}
           | EXPRESION:a mayorq EXPRESION:b{:
                                            RESULT=new Relacional(a,b,Operador.MAYORQ);
                                       :}
           | EXPRESION:a menorq EXPRESION:b{:
                                            RESULT=new Relacional(a,b,Operador.MENORQ);
                                       :}
           | EXPRESION:a mayorigualq EXPRESION:b{:
                                            RESULT=new Relacional(a,b,Operador.MAYORIGUALQ);
                                       :}
           | EXPRESION:a menorigualq EXPRESION:b{:
                                            RESULT=new Relacional(a,b,Operador.MENORIGUALQ);
                                       :}
           | EXPRESION:a igualigual EXPRESION:b{:
                                            RESULT=new Relacional(a,b,Operador.IGUALIGUAL);
                                       :}
           | EXPRESION:a diferente EXPRESION:b{:
                                            RESULT=new Relacional(a,b,Operador.DIFERENTE);
                                       :}
           | EXPRESION:a and EXPRESION:b{:
                                            RESULT=new Logica(a,b,Operador.AND);
                                       :}
           | EXPRESION:a or EXPRESION:b{:
                                            RESULT=new Logica(a,b,Operador.OR);
                                       :}
           | not EXPRESION:a{:
                                RESULT=new Logica(a,true,Operador.NOT);
                            :}
           | parena EXPRESION:a parenc{:
                                        RESULT=a;
                                      :}
           | valor_id:a{:
                        RESULT=new Aritmetica(a.toString().toLowerCase(),Type.PrimitiveType.ID);
                       :}
           | valor_numero_completo:a{:
                                        RESULT=new Aritmetica(a.toString().toLowerCase(),Type.PrimitiveType.INTEGER);
                                    :}
           | valor_numero_decimal:a{:
                                    RESULT=new Aritmetica(a.toString().toLowerCase(),Type.PrimitiveType.DOUBLE);
                                   :}
           | valor_cadena:a{:
                            RESULT=new Aritmetica(a.toString().toLowerCase(),Type.PrimitiveType.STRING);
                           :}
           | valor_verdadero:a{:
                                RESULT=new Aritmetica("true",Type.PrimitiveType.BOOLEAN);
                              :}
           | valor_falso:a{:
                            RESULT=new Aritmetica("false",Type.PrimitiveType.BOOLEAN);
                          :}
           | SENTENCIAS_ARREGLOS:a{:RESULT=a;:}
           //| valor_id corchea EXPRESION corchec
           | LLAMADA_FUNCION:a{:RESULT=a;:}
           | TERNARIO:a{:RESULT=a;:}
           | valor_nulo:a{:
                            RESULT=new Aritmetica(a.toString().toLowerCase(),Type.PrimitiveType.NULL);
                         :}
           | LLAMADA_ARREGLO:a{:RESULT=a;:}
           | EXPRESION:a decremental{:
                                        RESULT=new Aritmetica(a,true,Operador.AUMENTO);
                                    :}
           | EXPRESION:a incremental{:
                                        RESULT=new Aritmetica(a,true,Operador.AUMENTO);
                                    :};

LLAMADA_ARREGLO::= valor_id:a corchea EXPRESION:b corchec{:
                                                        RESULT=new AccesoArreglo(a.toString().toLowerCase(),b);
                                                     :};

TERNARIO::=EXPRESION:a signoi EXPRESION:b dospuntos EXPRESION:c{:RESULT=new Ternario(a,b,c);:};

LLAMADA_FUNCION::= valor_id:a parena LISTA_PARAMETROS:b parenc{:
                                                                RESULT=new Llamada_Funcion(Type.PrimitiveType.FUNCION,a.toString().toLowerCase(),b);
                                                              :};

LISTA_PARAMETROS::={:
                        RESULT=new LinkedList<>();
                   :}
                  | LISTA_PARAMETRO:a{:
                                        RESULT=a;
                                     :};
LISTA_PARAMETRO::= LISTA_PARAMETRO:a coma EXPRESION:b{:
                                                        RESULT=a;
                                                        RESULT.add(b);
                                                     :}
                  | EXPRESION:a{:
                                RESULT=new LinkedList<>();
                                RESULT.add(a);
                               :};



