
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 08 12:17:07 CST 2019
//----------------------------------------------------

package Analizadores.GramaticaFS;

import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.lang.*;
import javax.swing.JOptionPane;
import java.io.*;
import java.util.LinkedList;
import java.awt.Color;
import ArbolAST.AST;
import ArbolAST.NodoAST;
import ArbolAST.Entorno.Type;
import ArbolAST.Expresiones.Expresion;
import ArbolAST.Expresiones.operacion.Logica;
import ArbolAST.Expresiones.operacion.Aritmetica;
import ArbolAST.Expresiones.operacion.Relacional;
import ArbolAST.Expresiones.operacion.Operacion.Operador;
import ArbolAST.Expresiones.operacion.Ternario;
import ArbolAST.Expresiones.operacion.Retornar;
import ArbolAST.Expresiones.Llamada_Funcion;
import ArbolAST.Instrucciones.Imprimir;
import ArbolAST.Instrucciones.Detener;
import ArbolAST.Instrucciones.Seleccion.If;
import ArbolAST.Instrucciones.Seleccion.SubIf;
import ArbolAST.Instrucciones.Seleccion.Caso;
import ArbolAST.Instrucciones.Seleccion.Switch;
import ArbolAST.Instrucciones.Asignacion;
import ArbolAST.Instrucciones.Funcion;
import ArbolAST.Instrucciones.Declaracion;
import ArbolAST.Instrucciones.AsignacionArreglo;
import ArbolAST.Instrucciones.Declaracion_Arreglo;
import ArbolAST.Expresiones.AccesoArreglo;
import ArbolAST.Instrucciones.Componente_Funcion_Arreglo;
import ArbolAST.Instrucciones.Funciones_Arreglos;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 08 12:17:07 CST 2019
  */
public class sintacticoFS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintacticoFS() {super();}

  /** Constructor which sets the default scanner. */
  public sintacticoFS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintacticoFS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\007" +
    "\000\002\004\003\000\002\033\011\000\002\033\012\000" +
    "\002\032\005\000\002\032\006\000\002\032\003\000\002" +
    "\032\004\000\002\030\004\000\002\030\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\004\000" +
    "\002\012\004\000\002\043\005\000\002\044\005\000\002" +
    "\044\003\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\037\006" +
    "\000\002\037\006\000\002\037\006\000\002\037\006\000" +
    "\002\037\006\000\002\037\006\000\002\031\006\000\002" +
    "\031\007\000\002\031\007\000\002\031\007\000\002\031" +
    "\007\000\002\031\011\000\002\031\012\000\002\031\012" +
    "\000\002\031\012\000\002\031\012\000\002\031\005\000" +
    "\002\031\005\000\002\026\005\000\002\026\004\000\002" +
    "\027\004\000\002\013\007\000\002\014\003\000\002\014" +
    "\003\000\002\021\012\000\002\021\011\000\002\022\004" +
    "\000\002\022\003\000\002\023\010\000\002\024\007\000" +
    "\002\016\013\000\002\016\012\000\002\016\012\000\002" +
    "\016\011\000\002\020\006\000\002\017\013\000\002\017" +
    "\012\000\002\005\005\000\002\005\007\000\002\005\011" +
    "\000\002\005\011\000\002\041\003\000\002\041\003\000" +
    "\002\040\007\000\002\040\005\000\002\036\002\000\002" +
    "\036\003\000\002\035\005\000\002\035\003\000\002\006" +
    "\005\000\002\006\003\000\002\007\004\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\004" +
    "\000\002\007\005\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\004" +
    "\000\002\007\004\000\002\042\006\000\002\015\007\000" +
    "\002\011\006\000\002\010\002\000\002\010\003\000\002" +
    "\034\005\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0120\000\024\040\027\054\013\055\030\056\031\061" +
    "\024\062\017\063\006\064\032\066\016\001\002\000\026" +
    "\002\000\040\027\054\013\055\030\056\031\061\024\062" +
    "\017\063\006\064\032\066\016\001\002\000\030\002\uffee" +
    "\007\uffee\040\uffee\054\uffee\055\uffee\056\uffee\061\uffee\062" +
    "\uffee\063\uffee\064\uffee\066\uffee\001\002\000\004\004\u010d" +
    "\001\002\000\030\002\uffed\007\uffed\040\uffed\054\uffed\055" +
    "\uffed\056\uffed\061\uffed\062\uffed\063\uffed\064\uffed\066\uffed" +
    "\001\002\000\030\002\ufff1\007\ufff1\040\ufff1\054\ufff1\055" +
    "\ufff1\056\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\066\ufff1" +
    "\001\002\000\026\002\ufffe\040\ufffe\054\ufffe\055\ufffe\056" +
    "\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\066\ufffe\001\002" +
    "\000\004\030\u010c\001\002\000\004\004\u0108\001\002\000" +
    "\030\002\ufff2\007\ufff2\040\ufff2\054\ufff2\055\ufff2\056\ufff2" +
    "\061\ufff2\062\ufff2\063\ufff2\064\ufff2\066\ufff2\001\002\000" +
    "\004\030\u0107\001\002\000\026\004\100\010\341\011\340" +
    "\012\335\013\337\014\332\031\334\033\101\036\336\037" +
    "\333\001\002\000\030\004\070\012\065\026\062\030\330" +
    "\066\077\067\064\072\074\073\067\074\061\076\076\077" +
    "\063\001\002\000\004\002\326\001\002\000\030\002\uffef" +
    "\007\uffef\040\uffef\054\uffef\055\uffef\056\uffef\061\uffef\062" +
    "\uffef\063\uffef\064\uffef\066\uffef\001\002\000\026\002\ufffd" +
    "\040\ufffd\054\ufffd\055\ufffd\056\ufffd\061\ufffd\062\ufffd\063" +
    "\ufffd\064\ufffd\066\ufffd\001\002\000\030\002\uffcc\007\uffcc" +
    "\040\uffcc\054\uffcc\055\uffcc\056\uffcc\061\uffcc\062\uffcc\063" +
    "\uffcc\064\uffcc\066\uffcc\001\002\000\004\030\325\001\002" +
    "\000\030\002\uffcb\007\uffcb\040\uffcb\054\uffcb\055\uffcb\056" +
    "\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\066\uffcb\001\002" +
    "\000\026\002\ufffb\040\ufffb\054\ufffb\055\ufffb\056\ufffb\061" +
    "\ufffb\062\ufffb\063\ufffb\064\ufffb\066\ufffb\001\002\000\004" +
    "\066\272\001\002\000\004\004\264\001\002\000\004\004" +
    "\060\001\002\000\004\066\034\001\002\000\030\002\ufff0" +
    "\007\ufff0\040\ufff0\054\ufff0\055\ufff0\056\ufff0\061\ufff0\062" +
    "\ufff0\063\ufff0\064\ufff0\066\ufff0\001\002\000\004\004\035" +
    "\001\002\000\010\005\036\040\041\066\037\001\002\000" +
    "\004\006\055\001\002\000\006\005\ufff6\027\ufff6\001\002" +
    "\000\006\005\043\027\044\001\002\000\004\066\042\001" +
    "\002\000\006\005\ufff5\027\ufff5\001\002\000\004\006\050" +
    "\001\002\000\006\040\046\066\045\001\002\000\006\005" +
    "\ufff8\027\ufff8\001\002\000\004\066\047\001\002\000\006" +
    "\005\ufff7\027\ufff7\001\002\000\020\040\027\054\013\056" +
    "\031\061\024\062\017\063\006\066\016\001\002\000\022" +
    "\007\054\040\027\054\013\056\031\061\024\062\017\063" +
    "\006\066\016\001\002\000\022\007\ufff3\040\ufff3\054\ufff3" +
    "\056\ufff3\061\ufff3\062\ufff3\063\ufff3\066\ufff3\001\002\000" +
    "\022\007\ufff4\040\ufff4\054\ufff4\056\ufff4\061\ufff4\062\ufff4" +
    "\063\ufff4\066\ufff4\001\002\000\026\002\ufff9\040\ufff9\054" +
    "\ufff9\055\ufff9\056\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9" +
    "\066\ufff9\001\002\000\020\040\027\054\013\056\031\061" +
    "\024\062\017\063\006\066\016\001\002\000\022\007\057" +
    "\040\027\054\013\056\031\061\024\062\017\063\006\066" +
    "\016\001\002\000\026\002\ufffa\040\ufffa\054\ufffa\055\ufffa" +
    "\056\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\066\ufffa\001" +
    "\002\000\026\004\070\012\065\026\062\066\077\067\064" +
    "\072\074\073\067\074\061\076\076\077\063\001\002\000" +
    "\056\005\uff9a\007\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a" +
    "\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023" +
    "\uff9a\024\uff9a\025\uff9a\027\uff9a\030\uff9a\032\uff9a\034\uff9a" +
    "\035\uff9a\036\uff9a\037\uff9a\001\002\000\026\004\070\012" +
    "\065\026\062\066\077\067\064\072\074\073\067\074\061" +
    "\076\076\077\063\001\002\000\056\005\uff96\007\uff96\011" +
    "\uff96\012\uff96\013\uff96\014\uff96\015\uff96\016\uff96\017\uff96" +
    "\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96\025\uff96\027" +
    "\uff96\030\uff96\032\uff96\034\uff96\035\uff96\036\uff96\037\uff96" +
    "\001\002\000\056\005\uff9e\007\uff9e\011\uff9e\012\uff9e\013" +
    "\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e" +
    "\022\uff9e\023\uff9e\024\uff9e\025\uff9e\027\uff9e\030\uff9e\032" +
    "\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\001\002\000\026" +
    "\004\070\012\065\026\062\066\077\067\064\072\074\073" +
    "\067\074\061\076\076\077\063\001\002\000\056\005\uff95" +
    "\007\uff95\011\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016" +
    "\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023\uff95\024\uff95" +
    "\025\uff95\027\uff95\030\uff95\032\uff95\034\uff95\035\uff95\036" +
    "\uff95\037\uff95\001\002\000\056\005\uff9b\007\uff9b\011\uff9b" +
    "\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020" +
    "\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\027\uff9b" +
    "\030\uff9b\032\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\001" +
    "\002\000\026\004\070\012\065\026\062\066\077\067\064" +
    "\072\074\073\067\074\061\076\076\077\063\001\002\000" +
    "\056\005\uff97\007\uff97\011\uff97\012\uff97\013\uff97\014\uff97" +
    "\015\uff97\016\uff97\017\uff97\020\uff97\021\uff97\022\uff97\023" +
    "\uff97\024\uff97\025\uff97\027\uff97\030\uff97\032\uff97\034\uff97" +
    "\035\uff97\036\uff97\037\uff97\001\002\000\056\005\uff99\007" +
    "\uff99\011\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99" +
    "\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025" +
    "\uff99\027\uff99\030\uff99\032\uff99\034\uff99\035\uff99\036\uff99" +
    "\037\uff99\001\002\000\056\005\uff98\007\uff98\011\uff98\012" +
    "\uff98\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98" +
    "\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98\027\uff98\030" +
    "\uff98\032\uff98\034\uff98\035\uff98\036\uff98\037\uff98\001\002" +
    "\000\056\005\uff9c\007\uff9c\011\uff9c\012\uff9c\013\uff9c\014" +
    "\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c" +
    "\023\uff9c\024\uff9c\025\uff9c\027\uff9c\030\uff9c\032\uff9c\034" +
    "\uff9c\035\uff9c\036\uff9c\037\uff9c\001\002\000\044\005\226" +
    "\011\122\012\110\013\120\014\104\015\116\016\124\017" +
    "\112\020\121\021\117\022\113\023\115\024\111\025\107" +
    "\035\123\036\114\037\105\001\002\000\056\005\uff9d\007" +
    "\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d" +
    "\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025" +
    "\uff9d\027\uff9d\030\uff9d\032\uff9d\034\uff9d\035\uff9d\036\uff9d" +
    "\037\uff9d\001\002\000\064\004\100\005\uff9f\007\uff9f\011" +
    "\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f" +
    "\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\027" +
    "\uff9f\030\uff9f\031\102\032\uff9f\033\101\034\uff9f\035\uff9f" +
    "\036\uff9f\037\uff9f\001\002\000\030\004\070\005\uff8f\012" +
    "\065\026\062\066\077\067\064\072\074\073\067\074\061" +
    "\076\076\077\063\001\002\000\030\041\157\042\151\043" +
    "\147\044\156\045\154\046\161\047\155\050\146\051\153" +
    "\052\145\053\160\001\002\000\026\004\070\012\065\026" +
    "\062\066\077\067\064\072\074\073\067\074\061\076\076" +
    "\077\063\001\002\000\044\011\122\012\110\013\120\014" +
    "\104\015\116\016\124\017\112\020\121\021\117\022\113" +
    "\023\115\024\111\025\107\032\106\035\123\036\114\037" +
    "\105\001\002\000\026\004\070\012\065\026\062\066\077" +
    "\067\064\072\074\073\067\074\061\076\076\077\063\001" +
    "\002\000\056\005\uff94\007\uff94\011\uff94\012\uff94\013\uff94" +
    "\014\uff94\015\uff94\016\uff94\017\uff94\020\uff94\021\uff94\022" +
    "\uff94\023\uff94\024\uff94\025\uff94\027\uff94\030\uff94\032\uff94" +
    "\034\uff94\035\uff94\036\uff94\037\uff94\001\002\000\056\005" +
    "\uff92\007\uff92\011\uff92\012\uff92\013\uff92\014\uff92\015\uff92" +
    "\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92\023\uff92\024" +
    "\uff92\025\uff92\027\uff92\030\uff92\032\uff92\034\uff92\035\uff92" +
    "\036\uff92\037\uff92\001\002\000\026\004\070\012\065\026" +
    "\062\066\077\067\064\072\074\073\067\074\061\076\076" +
    "\077\063\001\002\000\026\004\070\012\065\026\062\066" +
    "\077\067\064\072\074\073\067\074\061\076\076\077\063" +
    "\001\002\000\026\004\070\012\065\026\062\066\077\067" +
    "\064\072\074\073\067\074\061\076\076\077\063\001\002" +
    "\000\026\004\070\012\065\026\062\066\077\067\064\072" +
    "\074\073\067\074\061\076\076\077\063\001\002\000\026" +
    "\004\070\012\065\026\062\066\077\067\064\072\074\073" +
    "\067\074\061\076\076\077\063\001\002\000\056\005\uff93" +
    "\007\uff93\011\uff93\012\uff93\013\uff93\014\uff93\015\uff93\016" +
    "\uff93\017\uff93\020\uff93\021\uff93\022\uff93\023\uff93\024\uff93" +
    "\025\uff93\027\uff93\030\uff93\032\uff93\034\uff93\035\uff93\036" +
    "\uff93\037\uff93\001\002\000\026\004\070\012\065\026\062" +
    "\066\077\067\064\072\074\073\067\074\061\076\076\077" +
    "\063\001\002\000\026\004\070\012\065\026\062\066\077" +
    "\067\064\072\074\073\067\074\061\076\076\077\063\001" +
    "\002\000\026\004\070\012\065\026\062\066\077\067\064" +
    "\072\074\073\067\074\061\076\076\077\063\001\002\000" +
    "\026\004\070\012\065\026\062\066\077\067\064\072\074" +
    "\073\067\074\061\076\076\077\063\001\002\000\026\004" +
    "\070\012\065\026\062\066\077\067\064\072\074\073\067" +
    "\074\061\076\076\077\063\001\002\000\026\004\070\012" +
    "\065\026\062\066\077\067\064\072\074\073\067\074\061" +
    "\076\076\077\063\001\002\000\026\004\070\012\065\026" +
    "\062\066\077\067\064\072\074\073\067\074\061\076\076" +
    "\077\063\001\002\000\026\004\070\012\065\026\062\066" +
    "\077\067\064\072\074\073\067\074\061\076\076\077\063" +
    "\001\002\000\056\005\uffa9\007\uffa9\011\122\012\110\013" +
    "\120\014\104\015\116\016\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\022\uffa9\023\uffa9\024\uffa9\025\uffa9\027\uffa9\030\uffa9\032" +
    "\uffa9\034\uffa9\035\uffa9\036\114\037\105\001\002\000\044" +
    "\011\122\012\110\013\120\014\104\015\116\016\124\017" +
    "\112\020\121\021\117\022\113\023\115\024\111\025\107" +
    "\034\127\035\123\036\114\037\105\001\002\000\026\004" +
    "\070\012\065\026\062\066\077\067\064\072\074\073\067" +
    "\074\061\076\076\077\063\001\002\000\056\005\uff91\007" +
    "\uff91\011\122\012\110\013\120\014\104\015\116\016\124" +
    "\017\112\020\121\021\117\022\113\023\115\024\111\025" +
    "\107\027\uff91\030\uff91\032\uff91\034\uff91\035\123\036\114" +
    "\037\105\001\002\000\056\005\uffae\007\uffae\011\uffae\012" +
    "\uffae\013\120\014\104\015\116\016\uffae\017\uffae\020\uffae" +
    "\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\027\uffae\030" +
    "\uffae\032\uffae\034\uffae\035\uffae\036\114\037\105\001\002" +
    "\000\056\005\uffa7\007\uffa7\011\122\012\110\013\120\014" +
    "\104\015\116\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7" +
    "\023\uffa7\024\uffa7\025\uffa7\027\uffa7\030\uffa7\032\uffa7\034" +
    "\uffa7\035\uffa7\036\114\037\105\001\002\000\056\005\uffac" +
    "\007\uffac\011\uffac\012\uffac\013\uffac\014\uffac\015\116\016" +
    "\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac" +
    "\025\uffac\027\uffac\030\uffac\032\uffac\034\uffac\035\uffac\036" +
    "\114\037\105\001\002\000\056\005\uffa6\007\uffa6\011\122" +
    "\012\110\013\120\014\104\015\116\016\uffa6\017\uffa6\020" +
    "\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\027\uffa6" +
    "\030\uffa6\032\uffa6\034\uffa6\035\uffa6\036\114\037\105\001" +
    "\002\000\056\005\uffaa\007\uffaa\011\uffaa\012\uffaa\013\uffaa" +
    "\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022" +
    "\uffaa\023\uffaa\024\uffaa\025\uffaa\027\uffaa\030\uffaa\032\uffaa" +
    "\034\uffaa\035\uffaa\036\114\037\105\001\002\000\056\005" +
    "\uffa4\007\uffa4\011\122\012\110\013\120\014\104\015\116" +
    "\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024" +
    "\uffa4\025\uffa4\027\uffa4\030\uffa4\032\uffa4\034\uffa4\035\uffa4" +
    "\036\114\037\105\001\002\000\056\005\uffa5\007\uffa5\011" +
    "\122\012\110\013\120\014\104\015\116\016\uffa5\017\uffa5" +
    "\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\027" +
    "\uffa5\030\uffa5\032\uffa5\034\uffa5\035\uffa5\036\114\037\105" +
    "\001\002\000\056\005\uffa8\007\uffa8\011\122\012\110\013" +
    "\120\014\104\015\116\016\uffa8\017\uffa8\020\uffa8\021\uffa8" +
    "\022\uffa8\023\uffa8\024\uffa8\025\uffa8\027\uffa8\030\uffa8\032" +
    "\uffa8\034\uffa8\035\uffa8\036\114\037\105\001\002\000\056" +
    "\005\uffa3\007\uffa3\011\122\012\110\013\120\014\104\015" +
    "\116\016\124\017\112\020\121\021\117\022\113\023\115" +
    "\024\uffa3\025\uffa3\027\uffa3\030\uffa3\032\uffa3\034\uffa3\035" +
    "\uffa3\036\114\037\105\001\002\000\056\005\uffad\007\uffad" +
    "\011\uffad\012\uffad\013\120\014\104\015\116\016\uffad\017" +
    "\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad" +
    "\027\uffad\030\uffad\032\uffad\034\uffad\035\uffad\036\114\037" +
    "\105\001\002\000\056\005\uffa2\007\uffa2\011\122\012\110" +
    "\013\120\014\104\015\116\016\124\017\112\020\121\021" +
    "\117\022\113\023\115\024\111\025\uffa2\027\uffa2\030\uffa2" +
    "\032\uffa2\034\uffa2\035\uffa2\036\114\037\105\001\002\000" +
    "\056\005\uffab\007\uffab\011\uffab\012\uffab\013\uffab\014\uffab" +
    "\015\116\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023" +
    "\uffab\024\uffab\025\uffab\027\uffab\030\uffab\032\uffab\034\uffab" +
    "\035\uffab\036\114\037\105\001\002\000\004\004\215\001" +
    "\002\000\004\004\212\001\002\000\004\004\210\001\002" +
    "\000\060\005\uffea\007\uffea\011\uffea\012\uffea\013\uffea\014" +
    "\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea" +
    "\023\uffea\024\uffea\025\uffea\027\uffea\030\uffea\032\uffea\033" +
    "\206\034\uffea\035\uffea\036\uffea\037\uffea\001\002\000\004" +
    "\004\204\001\002\000\060\005\uffe8\007\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\027\uffe8\030" +
    "\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8" +
    "\001\002\000\004\004\201\001\002\000\004\004\177\001" +
    "\002\000\004\004\174\001\002\000\004\004\172\001\002" +
    "\000\004\004\170\001\002\000\004\004\165\001\002\000" +
    "\004\004\162\001\002\000\004\066\163\001\002\000\004" +
    "\005\164\001\002\000\060\005\uffe2\007\uffe2\011\uffe2\012" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\027\uffe2\030" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2" +
    "\001\002\000\004\066\166\001\002\000\004\005\167\001" +
    "\002\000\060\005\uffdd\007\uffdd\011\uffdd\012\uffdd\013\uffdd" +
    "\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022" +
    "\uffdd\023\uffdd\024\uffdd\025\uffdd\027\uffdd\030\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\001\002\000" +
    "\004\005\171\001\002\000\060\005\uffe7\007\uffe7\011\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\027\uffe7" +
    "\030\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037" +
    "\uffe7\001\002\000\004\005\173\001\002\000\060\005\uffe4" +
    "\007\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016" +
    "\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4" +
    "\025\uffe4\027\uffe4\030\uffe4\032\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\036\uffe4\037\uffe4\001\002\000\004\066\175\001\002" +
    "\000\004\005\176\001\002\000\060\005\uffe1\007\uffe1\011" +
    "\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\027" +
    "\uffe1\030\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1" +
    "\037\uffe1\001\002\000\004\005\200\001\002\000\060\005" +
    "\uffe3\007\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3" +
    "\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\027\uffe3\030\uffe3\032\uffe3\033\uffe3\034\uffe3" +
    "\035\uffe3\036\uffe3\037\uffe3\001\002\000\004\066\202\001" +
    "\002\000\004\005\203\001\002\000\060\005\uffdf\007\uffdf" +
    "\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\027\uffdf\030\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\037\uffdf\001\002\000\004\005\205\001\002\000\060" +
    "\005\uffe6\007\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\027\uffe6\030\uffe6\032\uffe6\033\uffe6\034" +
    "\uffe6\035\uffe6\036\uffe6\037\uffe6\001\002\000\030\041\157" +
    "\042\151\043\147\044\156\045\154\046\161\047\155\050" +
    "\146\051\153\052\145\053\160\001\002\000\060\005\uffe9" +
    "\007\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016" +
    "\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9" +
    "\025\uffe9\027\uffe9\030\uffe9\032\uffe9\033\uffe9\034\uffe9\035" +
    "\uffe9\036\uffe9\037\uffe9\001\002\000\004\005\211\001\002" +
    "\000\060\005\uffe5\007\uffe5\011\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\027\uffe5\030\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\001\002\000\004" +
    "\066\213\001\002\000\004\005\214\001\002\000\060\005" +
    "\uffe0\007\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\027\uffe0\030\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\037\uffe0\001\002\000\004\066\216\001" +
    "\002\000\004\005\217\001\002\000\060\005\uffde\007\uffde" +
    "\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017" +
    "\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde" +
    "\027\uffde\030\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036" +
    "\uffde\037\uffde\001\002\000\004\005\225\001\002\000\046" +
    "\005\uff8c\011\122\012\110\013\120\014\104\015\116\016" +
    "\124\017\112\020\121\021\117\022\113\023\115\024\111" +
    "\025\107\027\uff8c\035\123\036\114\037\105\001\002\000" +
    "\006\005\uff8e\027\223\001\002\000\026\004\070\012\065" +
    "\026\062\066\077\067\064\072\074\073\067\074\061\076" +
    "\076\077\063\001\002\000\046\005\uff8d\011\122\012\110" +
    "\013\120\014\104\015\116\016\124\017\112\020\121\021" +
    "\117\022\113\023\115\024\111\025\107\027\uff8d\035\123" +
    "\036\114\037\105\001\002\000\056\005\uff90\007\uff90\011" +
    "\uff90\012\uff90\013\uff90\014\uff90\015\uff90\016\uff90\017\uff90" +
    "\020\uff90\021\uff90\022\uff90\023\uff90\024\uff90\025\uff90\027" +
    "\uff90\030\uff90\032\uff90\034\uff90\035\uff90\036\uff90\037\uff90" +
    "\001\002\000\004\006\227\001\002\000\020\040\027\054" +
    "\013\056\031\061\024\062\017\063\006\066\016\001\002" +
    "\000\022\007\231\040\027\054\013\056\031\061\024\062" +
    "\017\063\006\066\016\001\002\000\032\002\uffc1\007\uffc1" +
    "\040\uffc1\054\uffc1\055\uffc1\056\uffc1\057\233\061\uffc1\062" +
    "\uffc1\063\uffc1\064\uffc1\066\uffc1\001\002\000\032\002\uffc3" +
    "\007\uffc3\040\uffc3\054\uffc3\055\uffc3\056\uffc3\057\247\061" +
    "\uffc3\062\uffc3\063\uffc3\064\uffc3\066\uffc3\001\002\000\006" +
    "\006\236\056\235\001\002\000\030\002\uffc2\007\uffc2\040" +
    "\uffc2\054\uffc2\055\uffc2\056\uffc2\061\uffc2\062\uffc2\063\uffc2" +
    "\064\uffc2\066\uffc2\001\002\000\004\004\241\001\002\000" +
    "\020\040\027\054\013\056\031\061\024\062\017\063\006" +
    "\066\016\001\002\000\022\007\240\040\027\054\013\056" +
    "\031\061\024\062\017\063\006\066\016\001\002\000\030" +
    "\002\uffc0\007\uffc0\040\uffc0\054\uffc0\055\uffc0\056\uffc0\061" +
    "\uffc0\062\uffc0\063\uffc0\064\uffc0\066\uffc0\001\002\000\026" +
    "\004\070\012\065\026\062\066\077\067\064\072\074\073" +
    "\067\074\061\076\076\077\063\001\002\000\044\005\243" +
    "\011\122\012\110\013\120\014\104\015\116\016\124\017" +
    "\112\020\121\021\117\022\113\023\115\024\111\025\107" +
    "\035\123\036\114\037\105\001\002\000\004\006\244\001" +
    "\002\000\020\040\027\054\013\056\031\061\024\062\017" +
    "\063\006\066\016\001\002\000\022\007\246\040\027\054" +
    "\013\056\031\061\024\062\017\063\006\066\016\001\002" +
    "\000\032\002\uffbe\007\uffbe\040\uffbe\054\uffbe\055\uffbe\056" +
    "\uffbe\057\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\066\uffbe" +
    "\001\002\000\006\006\236\056\251\001\002\000\030\002" +
    "\uffc4\007\uffc4\040\uffc4\054\uffc4\055\uffc4\056\uffc4\061\uffc4" +
    "\062\uffc4\063\uffc4\064\uffc4\066\uffc4\001\002\000\004\004" +
    "\252\001\002\000\026\004\070\012\065\026\062\066\077" +
    "\067\064\072\074\073\067\074\061\076\076\077\063\001" +
    "\002\000\044\005\254\011\122\012\110\013\120\014\104" +
    "\015\116\016\124\017\112\020\121\021\117\022\113\023" +
    "\115\024\111\025\107\035\123\036\114\037\105\001\002" +
    "\000\004\006\255\001\002\000\020\040\027\054\013\056" +
    "\031\061\024\062\017\063\006\066\016\001\002\000\022" +
    "\007\257\040\027\054\013\056\031\061\024\062\017\063" +
    "\006\066\016\001\002\000\032\002\uffbf\007\uffbf\040\uffbf" +
    "\054\uffbf\055\uffbf\056\uffbf\057\uffbf\061\uffbf\062\uffbf\063" +
    "\uffbf\064\uffbf\066\uffbf\001\002\000\044\005\261\011\122" +
    "\012\110\013\120\014\104\015\116\016\124\017\112\020" +
    "\121\021\117\022\113\023\115\024\111\025\107\035\123" +
    "\036\114\037\105\001\002\000\056\005\uffa0\007\uffa0\011" +
    "\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0" +
    "\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\027" +
    "\uffa0\030\uffa0\032\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0" +
    "\001\002\000\056\005\uffaf\007\uffaf\011\uffaf\012\uffaf\013" +
    "\120\014\104\015\116\016\uffaf\017\uffaf\020\uffaf\021\uffaf" +
    "\022\uffaf\023\uffaf\024\uffaf\025\uffaf\027\uffaf\030\uffaf\032" +
    "\uffaf\034\uffaf\035\uffaf\036\114\037\105\001\002\000\056" +
    "\005\uffa1\007\uffa1\011\122\012\110\013\120\014\104\015" +
    "\116\016\124\017\112\020\121\021\117\022\113\023\115" +
    "\024\uffa1\025\uffa1\027\uffa1\030\uffa1\032\uffa1\034\uffa1\035" +
    "\uffa1\036\114\037\105\001\002\000\006\070\267\071\266" +
    "\001\002\000\004\005\270\001\002\000\004\005\uffb8\001" +
    "\002\000\004\005\uffb9\001\002\000\004\030\271\001\002" +
    "\000\026\002\ufffc\040\ufffc\054\ufffc\055\ufffc\056\ufffc\061" +
    "\ufffc\062\ufffc\063\ufffc\064\ufffc\066\ufffc\001\002\000\010" +
    "\010\uffb0\027\uffb0\030\uffb0\001\002\000\010\010\275\027" +
    "\276\030\274\001\002\000\030\002\uffbd\007\uffbd\040\uffbd" +
    "\054\uffbd\055\uffbd\056\uffbd\061\uffbd\062\uffbd\063\uffbd\064" +
    "\uffbd\066\uffbd\001\002\000\032\004\070\006\301\012\065" +
    "\026\062\031\300\066\077\067\064\072\074\073\067\074" +
    "\061\076\076\077\063\001\002\000\004\066\277\001\002" +
    "\000\010\010\uffb1\027\uffb1\030\uffb1\001\002\000\030\004" +
    "\070\012\065\026\062\032\uffb5\066\077\067\064\072\074" +
    "\073\067\074\061\076\076\077\063\001\002\000\004\066" +
    "\305\001\002\000\044\011\122\012\110\013\120\014\104" +
    "\015\116\016\124\017\112\020\121\021\117\022\113\023" +
    "\115\024\111\025\107\030\303\035\123\036\114\037\105" +
    "\001\002\000\030\002\uffbc\007\uffbc\040\uffbc\054\uffbc\055" +
    "\uffbc\056\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\066\uffbc" +
    "\001\002\000\006\007\310\027\311\001\002\000\004\034" +
    "\306\001\002\000\026\004\070\012\065\026\062\066\077" +
    "\067\064\072\074\073\067\074\061\076\076\077\063\001" +
    "\002\000\046\007\uffb6\011\122\012\110\013\120\014\104" +
    "\015\116\016\124\017\112\020\121\021\117\022\113\023" +
    "\115\024\111\025\107\027\uffb6\035\123\036\114\037\105" +
    "\001\002\000\004\030\315\001\002\000\004\066\312\001" +
    "\002\000\004\034\313\001\002\000\026\004\070\012\065" +
    "\026\062\066\077\067\064\072\074\073\067\074\061\076" +
    "\076\077\063\001\002\000\046\007\uffb7\011\122\012\110" +
    "\013\120\014\104\015\116\016\124\017\112\020\121\021" +
    "\117\022\113\023\115\024\111\025\107\027\uffb7\035\123" +
    "\036\114\037\105\001\002\000\030\002\uffba\007\uffba\040" +
    "\uffba\054\uffba\055\uffba\056\uffba\061\uffba\062\uffba\063\uffba" +
    "\064\uffba\066\uffba\001\002\000\004\032\323\001\002\000" +
    "\006\027\321\032\uffb4\001\002\000\046\011\122\012\110" +
    "\013\120\014\104\015\116\016\124\017\112\020\121\021" +
    "\117\022\113\023\115\024\111\025\107\027\uffb2\032\uffb2" +
    "\035\123\036\114\037\105\001\002\000\026\004\070\012" +
    "\065\026\062\066\077\067\064\072\074\073\067\074\061" +
    "\076\076\077\063\001\002\000\046\011\122\012\110\013" +
    "\120\014\104\015\116\016\124\017\112\020\121\021\117" +
    "\022\113\023\115\024\111\025\107\027\uffb3\032\uffb3\035" +
    "\123\036\114\037\105\001\002\000\004\030\324\001\002" +
    "\000\030\002\uffbb\007\uffbb\040\uffbb\054\uffbb\055\uffbb\056" +
    "\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\066\uffbb\001\002" +
    "\000\030\002\uffce\007\uffce\040\uffce\054\uffce\055\uffce\056" +
    "\uffce\061\uffce\062\uffce\063\uffce\064\uffce\066\uffce\001\002" +
    "\000\004\002\001\001\002\000\044\011\122\012\110\013" +
    "\120\014\104\015\116\016\124\017\112\020\121\021\117" +
    "\022\113\023\115\024\111\025\107\030\331\035\123\036" +
    "\114\037\105\001\002\000\030\002\uffcf\007\uffcf\040\uffcf" +
    "\054\uffcf\055\uffcf\056\uffcf\061\uffcf\062\uffcf\063\uffcf\064" +
    "\uffcf\066\uffcf\001\002\000\030\002\uffd0\007\uffd0\040\uffd0" +
    "\054\uffd0\055\uffd0\056\uffd0\061\uffd0\062\uffd0\063\uffd0\064" +
    "\uffd0\066\uffd0\001\002\000\004\010\u0104\001\002\000\004" +
    "\030\u0103\001\002\000\026\004\070\012\065\026\062\066" +
    "\077\067\064\072\074\073\067\074\061\076\076\077\063" +
    "\001\002\000\004\010\353\001\002\000\004\030\352\001" +
    "\002\000\004\010\347\001\002\000\004\010\344\001\002" +
    "\000\026\004\070\012\065\026\062\066\077\067\064\072" +
    "\074\073\067\074\061\076\076\077\063\001\002\000\044" +
    "\011\122\012\110\013\120\014\104\015\116\016\124\017" +
    "\112\020\121\021\117\022\113\023\115\024\111\025\107" +
    "\030\343\035\123\036\114\037\105\001\002\000\030\002" +
    "\uffdc\007\uffdc\040\uffdc\054\uffdc\055\uffdc\056\uffdc\061\uffdc" +
    "\062\uffdc\063\uffdc\064\uffdc\066\uffdc\001\002\000\026\004" +
    "\070\012\065\026\062\066\077\067\064\072\074\073\067" +
    "\074\061\076\076\077\063\001\002\000\044\011\122\012" +
    "\110\013\120\014\104\015\116\016\124\017\112\020\121" +
    "\021\117\022\113\023\115\024\111\025\107\030\346\035" +
    "\123\036\114\037\105\001\002\000\030\002\uffdb\007\uffdb" +
    "\040\uffdb\054\uffdb\055\uffdb\056\uffdb\061\uffdb\062\uffdb\063" +
    "\uffdb\064\uffdb\066\uffdb\001\002\000\026\004\070\012\065" +
    "\026\062\066\077\067\064\072\074\073\067\074\061\076" +
    "\076\077\063\001\002\000\044\011\122\012\110\013\120" +
    "\014\104\015\116\016\124\017\112\020\121\021\117\022" +
    "\113\023\115\024\111\025\107\030\351\035\123\036\114" +
    "\037\105\001\002\000\030\002\uffd9\007\uffd9\040\uffd9\054" +
    "\uffd9\055\uffd9\056\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9" +
    "\066\uffd9\001\002\000\030\002\uffd1\007\uffd1\040\uffd1\054" +
    "\uffd1\055\uffd1\056\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1" +
    "\066\uffd1\001\002\000\026\004\070\012\065\026\062\066" +
    "\077\067\064\072\074\073\067\074\061\076\076\077\063" +
    "\001\002\000\044\011\122\012\110\013\120\014\104\015" +
    "\116\016\124\017\112\020\121\021\117\022\113\023\115" +
    "\024\111\025\107\030\355\035\123\036\114\037\105\001" +
    "\002\000\030\002\uffda\007\uffda\040\uffda\054\uffda\055\uffda" +
    "\056\uffda\061\uffda\062\uffda\063\uffda\064\uffda\066\uffda\001" +
    "\002\000\044\011\122\012\110\013\120\014\104\015\116" +
    "\016\124\017\112\020\121\021\117\022\113\023\115\024" +
    "\111\025\107\032\357\035\123\036\114\037\105\001\002" +
    "\000\014\010\361\011\362\012\363\013\360\014\364\001" +
    "\002\000\004\010\u0100\001\002\000\026\004\070\012\065" +
    "\026\062\066\077\067\064\072\074\073\067\074\061\076" +
    "\076\077\063\001\002\000\004\010\373\001\002\000\004" +
    "\010\370\001\002\000\004\010\365\001\002\000\026\004" +
    "\070\012\065\026\062\066\077\067\064\072\074\073\067" +
    "\074\061\076\076\077\063\001\002\000\044\011\122\012" +
    "\110\013\120\014\104\015\116\016\124\017\112\020\121" +
    "\021\117\022\113\023\115\024\111\025\107\030\367\035" +
    "\123\036\114\037\105\001\002\000\030\002\uffd3\007\uffd3" +
    "\040\uffd3\054\uffd3\055\uffd3\056\uffd3\061\uffd3\062\uffd3\063" +
    "\uffd3\064\uffd3\066\uffd3\001\002\000\026\004\070\012\065" +
    "\026\062\066\077\067\064\072\074\073\067\074\061\076" +
    "\076\077\063\001\002\000\044\011\122\012\110\013\120" +
    "\014\104\015\116\016\124\017\112\020\121\021\117\022" +
    "\113\023\115\024\111\025\107\030\372\035\123\036\114" +
    "\037\105\001\002\000\030\002\uffd5\007\uffd5\040\uffd5\054" +
    "\uffd5\055\uffd5\056\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5" +
    "\066\uffd5\001\002\000\026\004\070\012\065\026\062\066" +
    "\077\067\064\072\074\073\067\074\061\076\076\077\063" +
    "\001\002\000\044\011\122\012\110\013\120\014\104\015" +
    "\116\016\124\017\112\020\121\021\117\022\113\023\115" +
    "\024\111\025\107\030\375\035\123\036\114\037\105\001" +
    "\002\000\030\002\uffd6\007\uffd6\040\uffd6\054\uffd6\055\uffd6" +
    "\056\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6\066\uffd6\001" +
    "\002\000\044\011\122\012\110\013\120\014\104\015\116" +
    "\016\124\017\112\020\121\021\117\022\113\023\115\024" +
    "\111\025\107\030\377\035\123\036\114\037\105\001\002" +
    "\000\030\002\uffd7\007\uffd7\040\uffd7\054\uffd7\055\uffd7\056" +
    "\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\066\uffd7\001\002" +
    "\000\026\004\070\012\065\026\062\066\077\067\064\072" +
    "\074\073\067\074\061\076\076\077\063\001\002\000\044" +
    "\011\122\012\110\013\120\014\104\015\116\016\124\017" +
    "\112\020\121\021\117\022\113\023\115\024\111\025\107" +
    "\030\u0102\035\123\036\114\037\105\001\002\000\030\002" +
    "\uffd4\007\uffd4\040\uffd4\054\uffd4\055\uffd4\056\uffd4\061\uffd4" +
    "\062\uffd4\063\uffd4\064\uffd4\066\uffd4\001\002\000\030\002" +
    "\uffd2\007\uffd2\040\uffd2\054\uffd2\055\uffd2\056\uffd2\061\uffd2" +
    "\062\uffd2\063\uffd2\064\uffd2\066\uffd2\001\002\000\026\004" +
    "\070\012\065\026\062\066\077\067\064\072\074\073\067" +
    "\074\061\076\076\077\063\001\002\000\044\011\122\012" +
    "\110\013\120\014\104\015\116\016\124\017\112\020\121" +
    "\021\117\022\113\023\115\024\111\025\107\030\u0106\035" +
    "\123\036\114\037\105\001\002\000\030\002\uffd8\007\uffd8" +
    "\040\uffd8\054\uffd8\055\uffd8\056\uffd8\061\uffd8\062\uffd8\063" +
    "\uffd8\064\uffd8\066\uffd8\001\002\000\030\002\uffec\007\uffec" +
    "\040\uffec\054\uffec\055\uffec\056\uffec\061\uffec\062\uffec\063" +
    "\uffec\064\uffec\066\uffec\001\002\000\026\004\070\012\065" +
    "\026\062\066\077\067\064\072\074\073\067\074\061\076" +
    "\076\077\063\001\002\000\044\005\u010a\011\122\012\110" +
    "\013\120\014\104\015\116\016\124\017\112\020\121\021" +
    "\117\022\113\023\115\024\111\025\107\035\123\036\114" +
    "\037\105\001\002\000\004\030\u010b\001\002\000\030\002" +
    "\uffcd\007\uffcd\040\uffcd\054\uffcd\055\uffcd\056\uffcd\061\uffcd" +
    "\062\uffcd\063\uffcd\064\uffcd\066\uffcd\001\002\000\030\002" +
    "\uffeb\007\uffeb\040\uffeb\054\uffeb\055\uffeb\056\uffeb\061\uffeb" +
    "\062\uffeb\063\uffeb\064\uffeb\066\uffeb\001\002\000\026\004" +
    "\070\012\065\026\062\066\077\067\064\072\074\073\067" +
    "\074\061\076\076\077\063\001\002\000\044\005\u010f\011" +
    "\122\012\110\013\120\014\104\015\116\016\124\017\112" +
    "\020\121\021\117\022\113\023\115\024\111\025\107\035" +
    "\123\036\114\037\105\001\002\000\004\006\u0110\001\002" +
    "\000\004\060\u0111\001\002\000\026\004\070\012\065\026" +
    "\062\066\077\067\064\072\074\073\067\074\061\076\076" +
    "\077\063\001\002\000\010\007\u0115\060\u0111\065\u0116\001" +
    "\002\000\010\007\uffc7\060\uffc7\065\uffc7\001\002\000\004" +
    "\007\u011c\001\002\000\030\002\uffc9\007\uffc9\040\uffc9\054" +
    "\uffc9\055\uffc9\056\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9" +
    "\066\uffc9\001\002\000\004\034\u0118\001\002\000\010\007" +
    "\uffc8\060\uffc8\065\uffc8\001\002\000\004\006\u0119\001\002" +
    "\000\020\040\027\054\013\056\031\061\024\062\017\063" +
    "\006\066\016\001\002\000\022\007\u011b\040\027\054\013" +
    "\056\031\061\024\062\017\063\006\066\016\001\002\000" +
    "\004\007\uffc5\001\002\000\030\002\uffca\007\uffca\040\uffca" +
    "\054\uffca\055\uffca\056\uffca\061\uffca\062\uffca\063\uffca\064" +
    "\uffca\066\uffca\001\002\000\044\011\122\012\110\013\120" +
    "\014\104\015\116\016\124\017\112\020\121\021\117\022" +
    "\113\023\115\024\111\025\107\034\u011e\035\123\036\114" +
    "\037\105\001\002\000\004\006\u011f\001\002\000\020\040" +
    "\027\054\013\056\031\061\024\062\017\063\006\066\016" +
    "\001\002\000\022\007\u0121\040\027\054\013\056\031\061" +
    "\024\062\017\063\006\066\016\001\002\000\010\007\uffc6" +
    "\060\uffc6\065\uffc6\001\002\000\026\002\uffff\040\uffff\054" +
    "\uffff\055\uffff\056\uffff\061\uffff\062\uffff\063\uffff\064\uffff" +
    "\066\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0120\000\040\002\017\003\003\004\010\005\007\011" +
    "\014\012\021\013\013\014\032\016\022\021\024\026\020" +
    "\027\004\031\006\033\025\043\011\001\001\000\034\004" +
    "\u0121\005\007\011\014\012\021\013\013\014\032\016\022" +
    "\021\024\026\020\027\004\031\006\033\025\043\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\326\011\072\015\070\042\065\043" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\272\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\005\007\011\014\012\051\013\013\014\032\016\022" +
    "\021\024\026\020\027\004\030\050\031\006\043\011\001" +
    "\001\000\030\005\007\011\014\012\052\013\013\014\032" +
    "\016\022\021\024\026\020\027\004\031\006\043\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\005\007\011\014\012\051\013\013\014\032\016" +
    "\022\021\024\026\020\027\004\030\055\031\006\043\011" +
    "\001\001\000\030\005\007\011\014\012\052\013\013\014" +
    "\032\016\022\021\024\026\020\027\004\031\006\043\011" +
    "\001\001\000\002\001\001\000\014\007\074\011\072\015" +
    "\070\042\065\043\071\001\001\000\002\001\001\000\014" +
    "\007\262\011\072\015\070\042\065\043\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\007\261\011\072" +
    "\015\070\042\065\043\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\007\257\011\072\015\070\042\065" +
    "\043\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\007\220\010\217\011" +
    "\072\015\070\034\221\042\065\043\071\001\001\000\006" +
    "\037\151\044\147\001\001\000\014\007\102\011\072\015" +
    "\070\042\065\043\071\001\001\000\002\001\001\000\014" +
    "\007\143\011\072\015\070\042\065\043\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\007\142\011\072" +
    "\015\070\042\065\043\071\001\001\000\014\007\141\011" +
    "\072\015\070\042\065\043\071\001\001\000\014\007\140" +
    "\011\072\015\070\042\065\043\071\001\001\000\014\007" +
    "\137\011\072\015\070\042\065\043\071\001\001\000\014" +
    "\007\136\011\072\015\070\042\065\043\071\001\001\000" +
    "\002\001\001\000\014\007\135\011\072\015\070\042\065" +
    "\043\071\001\001\000\014\007\134\011\072\015\070\042" +
    "\065\043\071\001\001\000\014\007\133\011\072\015\070" +
    "\042\065\043\071\001\001\000\014\007\132\011\072\015" +
    "\070\042\065\043\071\001\001\000\014\007\131\011\072" +
    "\015\070\042\065\043\071\001\001\000\014\007\130\011" +
    "\072\015\070\042\065\043\071\001\001\000\014\007\125" +
    "\011\072\015\070\042\065\043\071\001\001\000\014\007" +
    "\124\011\072\015\070\042\065\043\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\007\127\011\072\015" +
    "\070\042\065\043\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\007\223\011\072\015\070\042\065\043\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\005\007\011\014\012\051\013\013\014\032\016\022\021" +
    "\024\026\020\027\004\030\227\031\006\043\011\001\001" +
    "\000\030\005\007\011\014\012\052\013\013\014\032\016" +
    "\022\021\024\026\020\027\004\031\006\043\011\001\001" +
    "\000\006\017\231\020\233\001\001\000\004\020\247\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\005\007\011\014\012\051\013\013\014\032\016" +
    "\022\021\024\026\020\027\004\030\236\031\006\043\011" +
    "\001\001\000\030\005\007\011\014\012\052\013\013\014" +
    "\032\016\022\021\024\026\020\027\004\031\006\043\011" +
    "\001\001\000\002\001\001\000\014\007\241\011\072\015" +
    "\070\042\065\043\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\005\007\011\014\012\051\013\013\014" +
    "\032\016\022\021\024\026\020\027\004\030\244\031\006" +
    "\043\011\001\001\000\030\005\007\011\014\012\052\013" +
    "\013\014\032\016\022\021\024\026\020\027\004\031\006" +
    "\043\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\007\252\011\072" +
    "\015\070\042\065\043\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\005\007\011\014\012\051\013\013" +
    "\014\032\016\022\021\024\026\020\027\004\030\255\031" +
    "\006\043\011\001\001\000\030\005\007\011\014\012\052" +
    "\013\013\014\032\016\022\021\024\026\020\027\004\031" +
    "\006\043\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\264\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\007\301\011\072\015\070\042\065\043\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\007\317\011\072" +
    "\015\070\035\316\036\315\042\065\043\071\001\001\000" +
    "\004\040\303\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\007\306\011" +
    "\072\015\070\042\065\043\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\007\313\011\072\015\070\042\065\043\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\007\321\011\072" +
    "\015\070\042\065\043\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\007\355" +
    "\011\072\015\070\042\065\043\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\341\011\072\015\070\042\065\043\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\007\344" +
    "\011\072\015\070\042\065\043\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\007\347\011\072\015\070" +
    "\042\065\043\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\007\353\011\072\015\070" +
    "\042\065\043\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\375\011\072\015\070\042\065\043\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\365\011\072\015\070\042\065\043\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\007\370" +
    "\011\072\015\070\042\065\043\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\007\373\011\072\015\070" +
    "\042\065\043\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\007\u0100" +
    "\011\072\015\070\042\065\043\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\007\u0104" +
    "\011\072\015\070\042\065\043\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\007\u0108" +
    "\011\072\015\070\042\065\043\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\u010d\011\072\015\070\042\065\043\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\u0111" +
    "\023\u0112\001\001\000\014\007\u011c\011\072\015\070\042" +
    "\065\043\071\001\001\000\006\023\u0116\024\u0113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\005\007\011\014\012\051\013\013\014\032\016\022\021" +
    "\024\026\020\027\004\030\u0119\031\006\043\011\001\001" +
    "\000\030\005\007\011\014\012\052\013\013\014\032\016" +
    "\022\021\024\026\020\027\004\031\006\043\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\005\007\011\014\012\051\013\013" +
    "\014\032\016\022\021\024\026\020\027\004\030\u011f\031" +
    "\006\043\011\001\001\000\030\005\007\011\014\012\052" +
    "\013\013\014\032\016\022\021\024\026\020\027\004\031" +
    "\006\043\011\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintacticoFS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintacticoFS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintacticoFS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public AST root;
    public static int index=0;
    public void syntax_error(Symbol s){
        System.out.println("Error sintactico en la linea "+(s.left+1)+" Columna "+s.right+". Identificador "+s.value+" no reconocido"); 
    }
    /**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        javax.swing.JOptionPane.showMessageDialog(null,"Error Sintactico en la linea "+(s.right+1)+"Columna "+s.left+". Identificador"+s.value+" no reconocido.");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintacticoFS$actions {

  

  private final sintacticoFS parser;

  /** Constructor */
  CUP$sintacticoFS$actions(sintacticoFS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintacticoFS$do_action(
    int                        CUP$sintacticoFS$act_num,
    java_cup.runtime.lr_parser CUP$sintacticoFS$parser,
    java.util.Stack            CUP$sintacticoFS$stack,
    int                        CUP$sintacticoFS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintacticoFS$result;

      /* select the action based on the action number */
      switch (CUP$sintacticoFS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // LISTA_PARAMETRO ::= EXPRESION 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                RESULT=new LinkedList<>();
                                RESULT.add(a);
                               
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETRO",26, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // LISTA_PARAMETRO ::= LISTA_PARAMETRO coma EXPRESION 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                        RESULT=a;
                                                        RESULT.add(b);
                                                     
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETRO",26, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // LISTA_PARAMETROS ::= LISTA_PARAMETRO 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                        RESULT=a;
                                     
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // LISTA_PARAMETROS ::= 
            {
              LinkedList<NodoAST> RESULT =null;
		
                        RESULT=new LinkedList<>();
                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // LLAMADA_FUNCION ::= valor_id parena LISTA_PARAMETROS parenc 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                RESULT=new Llamada_Funcion(Type.PrimitiveType.FUNCION,a.toString().toLowerCase(),b);
                                                              
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",7, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // TERNARIO ::= EXPRESION signoi EXPRESION dospuntos EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=new Ternario(a,b,c);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TERNARIO",11, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LLAMADA_ARREGLO ::= valor_id corchea EXPRESION corchec 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                        RESULT=new AccesoArreglo(a.toString().toLowerCase(),b);
                                                     
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LLAMADA_ARREGLO",32, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESION ::= EXPRESION incremental 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                        RESULT=new Aritmetica(a,true,Operador.AUMENTO);
                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESION ::= EXPRESION decremental 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                        RESULT=new Aritmetica(a,true,Operador.AUMENTO);
                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION ::= LLAMADA_ARREGLO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION ::= valor_nulo 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                            RESULT=new Aritmetica(a.toString().toLowerCase(),Type.PrimitiveType.NULL);
                         
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESION ::= TERNARIO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESION ::= LLAMADA_FUNCION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESION ::= SENTENCIAS_ARREGLOS 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Funciones_Arreglos a = (Funciones_Arreglos)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESION ::= valor_falso 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                            RESULT=new Aritmetica("false",Type.PrimitiveType.BOOLEAN);
                          
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESION ::= valor_verdadero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                RESULT=new Aritmetica("true",Type.PrimitiveType.BOOLEAN);
                              
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION ::= valor_cadena 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                            RESULT=new Aritmetica(a.toString().toLowerCase(),Type.PrimitiveType.STRING);
                           
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= valor_numero_decimal 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                    RESULT=new Aritmetica(a.toString().toLowerCase(),Type.PrimitiveType.DOUBLE);
                                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= valor_numero_completo 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                        RESULT=new Aritmetica(a.toString().toLowerCase(),Type.PrimitiveType.INTEGER);
                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= valor_id 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                        RESULT=new Aritmetica(a.toString().toLowerCase(),Type.PrimitiveType.ID);
                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= parena EXPRESION parenc 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                        RESULT=a;
                                      
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= not EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                RESULT=new Logica(a,true,Operador.NOT);
                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= EXPRESION or EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Logica(a,b,Operador.OR);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= EXPRESION and EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Logica(a,b,Operador.AND);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= EXPRESION diferente EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Relacional(a,b,Operador.DIFERENTE);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= EXPRESION igualigual EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Relacional(a,b,Operador.IGUALIGUAL);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= EXPRESION menorigualq EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Relacional(a,b,Operador.MENORIGUALQ);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= EXPRESION mayorigualq EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Relacional(a,b,Operador.MAYORIGUALQ);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= EXPRESION menorq EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Relacional(a,b,Operador.MENORQ);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= EXPRESION mayorq EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Relacional(a,b,Operador.MAYORQ);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= EXPRESION pot EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Aritmetica(a,b,Operador.POTENCIA);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= EXPRESION div EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Aritmetica(a,b,Operador.DIVISION);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= EXPRESION por EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Aritmetica(a,b,Operador.MULTIPLICACION);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= EXPRESION menos EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Aritmetica(a,b,Operador.RESTA);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= EXPRESION mas EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Aritmetica(a,b,Operador.SUMA);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= menos EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Aritmetica(a,true,Operador.UNARIO);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LISTA_ID ::= valor_id 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                        RESULT=new LinkedList<NodoAST>();
                        Declaracion declaracion=new Declaracion(Type.PrimitiveType.NULL,a.toString().toLowerCase(),null,false,aleft);
                        RESULT.add(declaracion);
                      
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_ID",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LISTA_ID ::= LISTA_ID coma valor_id 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                       RESULT=a;
                                       Declaracion declaracion=new Declaracion(Type.PrimitiveType.NULL,b.toString().toLowerCase(),null,false,bleft);
                                       RESULT.add(declaracion);
                                      
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_ID",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LISTA_ARRAY ::= EXPRESION 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                            RESULT=new LinkedList<>();
                            RESULT.add(a);
                          
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_ARRAY",27, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LISTA_ARRAY ::= LISTA_ARRAY coma EXPRESION 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                RESULT=a;
                                                RESULT.add(b);
                                             
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_ARRAY",27, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ELEMENTOS_ARRAY ::= LISTA_ARRAY 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_ARRAY",28, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ELEMENTOS_ARRAY ::= 
            {
              LinkedList<Expresion> RESULT =null;
		RESULT=new LinkedList<>();
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_ARRAY",28, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ELEMENTOS_OBJETO ::= valor_id dospuntos EXPRESION 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_OBJETO",30, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ELEMENTOS_OBJETO ::= ELEMENTOS_OBJETO coma valor_id dospuntos EXPRESION 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_OBJETO",30, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ELEMENTO_PATH ::= valor_path2 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ELEMENTO_PATH",31, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ELEMENTO_PATH ::= valor_path 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ELEMENTO_PATH",31, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION_VARIABLES ::= var LISTA_ID igual llavea ELEMENTOS_OBJETO llavec pyc 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION_VARIABLES ::= var LISTA_ID igual corchea ELEMENTOS_ARRAY corchec pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		
                                                                                int indice=a.size()-1;
                                                                                Declaracion ultima=(Declaracion)a.get(indice);
                                                                                a.remove(indice);
                                                                                Declaracion_Arreglo declaracion_arreglo=new Declaracion_Arreglo(Type.PrimitiveType.NULL,ultima.getId(),null,true,ultima.getLine(),b);
                                                                                a.add(declaracion_arreglo);
                                                                                RESULT=a;
                                                                               
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION_VARIABLES ::= var LISTA_ID igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                int indice=a.size()-1;
                                                                Declaracion ultima=(Declaracion)a.get(indice);
                                                                a.remove(indice);
                                                                ultima.setIntValue(b);
                                                                ultima.setInicializado(true);
                                                                a.add(ultima);
                                                                RESULT=a;
                                                             
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION_VARIABLES ::= var LISTA_ID pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                            RESULT=a;
                                           
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_SINOSI ::= sino si parena EXPRESION parenc llavea SENTENCIAS_INTERNAS llavec 
            {
              LinkedList<SubIf> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                            RESULT=new LinkedList<SubIf>();
                                                                                            RESULT.add(new SubIf(a,b,false));
                                                                                         
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SINOSI",13, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA_SINOSI ::= SENTENCIA_SINOSI sino si parena EXPRESION parenc llavea SENTENCIAS_INTERNAS llavec 
            {
              LinkedList<SubIf> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)).right;
		LinkedList<SubIf> a = (LinkedList<SubIf>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                                                RESULT=a;
                                                                                                                RESULT.add(new SubIf(b,c,false));
                                                                                                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SINOSI",13, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA_SINO ::= sino llavea SENTENCIAS_INTERNAS llavec 
            {
              SubIf RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                            RESULT=new SubIf(null,a,true);
                                                          
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SINO",14, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIA_SI ::= si parena EXPRESION parenc llavea SENTENCIAS_INTERNAS llavec 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                 RESULT=new If(a,b,new LinkedList<>(),new SubIf());
                                                                                
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",12, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIA_SI ::= si parena EXPRESION parenc llavea SENTENCIAS_INTERNAS llavec SENTENCIA_SINO 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		SubIf c = (SubIf)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                                                                    RESULT=new If(a,b,new LinkedList<>(),c);
                                                                                                 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",12, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA_SI ::= si parena EXPRESION parenc llavea SENTENCIAS_INTERNAS llavec SENTENCIA_SINOSI 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<SubIf> c = (LinkedList<SubIf>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                                                                    RESULT=new If(a,b,c,new SubIf());
                                                                                                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",12, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA_SI ::= si parena EXPRESION parenc llavea SENTENCIAS_INTERNAS llavec SENTENCIA_SINOSI SENTENCIA_SINO 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<SubIf> c = (LinkedList<SubIf>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		SubIf d = (SubIf)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                                                                                        RESULT=new If(a,b,c,d);
                                                                                                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",12, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CASO_DEFECTO ::= defecto dospuntos llavea SENTENCIAS_INTERNAS llavec 
            {
              Caso RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                    RESULT=new Caso(a);
                                                                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("CASO_DEFECTO",18, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LISTA_CASO ::= caso EXPRESION dospuntos llavea SENTENCIAS_INTERNAS llavec 
            {
              Caso RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                             RESULT=new Caso(a,b);
                                                                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_CASO",17, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LISTAS_CASOS ::= LISTA_CASO 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Caso a = (Caso)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                RESULT=new LinkedList<>();
                                RESULT.add(a);
                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTAS_CASOS",16, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LISTAS_CASOS ::= LISTAS_CASOS LISTA_CASO 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<Caso> a = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Caso b = (Caso)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=a;
                                            RESULT.add(b);
                                           
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTAS_CASOS",16, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_SELECCIONA ::= selecciona parena EXPRESION parenc llavea LISTAS_CASOS llavec 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                            RESULT=new Switch(a,b,null);
                                                                                         
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCIONA",15, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_SELECCIONA ::= selecciona parena EXPRESION parenc llavea LISTAS_CASOS CASO_DEFECTO llavec 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Caso c = (Caso)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                                        RESULT=new Switch(a,b,c);
                                                                                                        
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCIONA",15, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIAS_SELECCION ::= SENTENCIA_SELECCIONA 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                RESULT=new LinkedList<NodoAST>();
                                                RESULT.add(a);
                                              
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_SELECCION",10, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIAS_SELECCION ::= SENTENCIA_SI 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                        RESULT=new LinkedList<NodoAST>();
                                        RESULT.add(a);
                                      
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_SELECCION",10, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_IMPRIMIR ::= imprimir parena EXPRESION parenc pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		
                                                                RESULT=new LinkedList<NodoAST>();
                                                                RESULT.add(new Imprimir(b));
                                                             
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IMPRIMIR",9, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_DETENER ::= detener pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		
                                    RESULT=new LinkedList<>();
                                    RESULT.add(new Detener());
                                
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DETENER",21, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_RETORNAR ::= retornar pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		
                                    RESULT=new LinkedList<>();
                                    RESULT.add(new Retornar());
                                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETORNAR",20, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_RETORNAR ::= retornar EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                RESULT=new LinkedList<>();
                                                RESULT.add(new Retornar(a));
                                              
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETORNAR",20, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_ASIGNACION ::= valor_id incremental pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		
                                                    RESULT=new LinkedList<>();
                                                    Aritmetica aritmetica=new Aritmetica(a.toString().toLowerCase(),Type.PrimitiveType.ID);
                                                    RESULT.add(new Asignacion(a.toString().toLowerCase(),aritmetica,Operador.AUMENTO,aleft,aright));
                                                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_ASIGNACION ::= valor_id decremental pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		
                                                        RESULT=new LinkedList<>();
                                                        Aritmetica aritmetica =new Aritmetica(a.toString().toLowerCase(),Type.PrimitiveType.ID);
                                                        RESULT.add(new Asignacion(a.toString().toLowerCase(),aritmetica,Operador.DECREMENTO,aleft,aright));
                                                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_ASIGNACION ::= valor_id corchea EXPRESION corchec div igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                            RESULT=new LinkedList<>();
                                                                                            RESULT.add(new AsignacionArreglo(a.toString().toLowerCase(),c,b,Operador.A_DIV));
                                                                                        
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_ASIGNACION ::= valor_id corchea EXPRESION corchec por igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                            RESULT=new LinkedList<>();
                                                                                            RESULT.add(new AsignacionArreglo(a.toString().toLowerCase(),c,b,Operador.A_MULT));
                                                                                        
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_ASIGNACION ::= valor_id corchea EXPRESION corchec menos igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                            RESULT=new LinkedList<>();
                                                                                            RESULT.add(new AsignacionArreglo(a.toString().toLowerCase(),c,b,Operador.A_RESTA));
                                                                                          
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_ASIGNACION ::= valor_id corchea EXPRESION corchec mas igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                            RESULT=new LinkedList<>();
                                                                                            RESULT.add(new AsignacionArreglo(a.toString().toLowerCase(),c,b,Operador.A_SUMA));
                                                                                        
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_ASIGNACION ::= valor_id corchea EXPRESION corchec igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                        RESULT=new LinkedList<>();
                                                                                        RESULT.add(new AsignacionArreglo(a.toString().toLowerCase(),c,b,Operador.IGUAL));
                                                                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_ASIGNACION ::= valor_id div igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                RESULT=new LinkedList<>();
                                                                RESULT.add(new Asignacion(a.toString().toLowerCase(),b,Operador.A_DIV,aright,aleft));
                                                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_ASIGNACION ::= valor_id por igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                RESULT=new LinkedList<>();
                                                                RESULT.add(new Asignacion(a.toString().toLowerCase(),b,Operador.A_MULT,aright,aleft));
                                                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_ASIGNACION ::= valor_id menos igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                RESULT=new LinkedList<>();
                                                                RESULT.add(new Asignacion(a.toString().toLowerCase(),b,Operador.A_RESTA,aright,aleft));
                                                              
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_ASIGNACION ::= valor_id mas igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                RESULT=new LinkedList<>();
                                                                RESULT.add(new Asignacion(a.toString().toLowerCase(),b,Operador.A_SUMA,aright,aleft));
                                                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA_ASIGNACION ::= valor_id igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                            RESULT=new LinkedList<>();
                                                            RESULT.add(new Asignacion(a.toString().toLowerCase(),b,Operador.IGUAL,aright,aleft));
                                                        
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FUNCIONES_LENGUAJE ::= alguno parena valor_id parenc 
            {
              Componente_Funcion_Arreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                        RESULT=new Componente_Funcion_Arreglo("alguno",a.toString().toLowerCase());
                                                      
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FUNCIONES_LENGUAJE ::= todos parena valor_id parenc 
            {
              Componente_Funcion_Arreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                        RESULT=new Componente_Funcion_Arreglo("todos",a.toString().toLowerCase());
                                                     
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUNCIONES_LENGUAJE ::= reduce parena valor_id parenc 
            {
              Componente_Funcion_Arreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                        RESULT=new Componente_Funcion_Arreglo("reduce",a.toString().toLowerCase());
                                                      
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNCIONES_LENGUAJE ::= map parena valor_id parenc 
            {
              Componente_Funcion_Arreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                    RESULT=new Componente_Funcion_Arreglo("map",a.toString().toLowerCase());
                                                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNCIONES_LENGUAJE ::= buscar parena valor_id parenc 
            {
              Componente_Funcion_Arreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                        RESULT=new Componente_Funcion_Arreglo("buscar",a.toString().toLowerCase());
                                                      
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUNCIONES_LENGUAJE ::= filtrar parena valor_id parenc 
            {
              Componente_Funcion_Arreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                        RESULT=new Componente_Funcion_Arreglo("filtrar",a.toString().toLowerCase());
                                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCIONES_LENGUAJE ::= minimo parena parenc 
            {
              Componente_Funcion_Arreglo RESULT =null;
		
                                            RESULT=new Componente_Funcion_Arreglo("minimo");
                                          
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNCIONES_LENGUAJE ::= maximo parena parenc 
            {
              Componente_Funcion_Arreglo RESULT =null;
		
                                            RESULT=new Componente_Funcion_Arreglo("maximo");
                                          
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNCIONES_LENGUAJE ::= invertir parena parenc 
            {
              Componente_Funcion_Arreglo RESULT =null;
		
                                              RESULT=new Componente_Funcion_Arreglo("invertir");
                                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUNCIONES_LENGUAJE ::= ascendente parena parenc 
            {
              Componente_Funcion_Arreglo RESULT =null;
		
                                                RESULT=new Componente_Funcion_Arreglo("ascendente");
                                              
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FUNCIONES_LENGUAJE ::= descendente parena parenc 
            {
              Componente_Funcion_Arreglo RESULT =null;
		
                                                RESULT=new Componente_Funcion_Arreglo("descendente");
                                               
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FUNCIONES_LENGUAJES ::= FUNCIONES_LENGUAJE 
            {
              LinkedList<Componente_Funcion_Arreglo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Componente_Funcion_Arreglo a = (Componente_Funcion_Arreglo)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new LinkedList<>();
                                            RESULT.add(a);
                                           
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJES",34, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNCIONES_LENGUAJES ::= FUNCIONES_LENGUAJES pto FUNCIONES_LENGUAJE 
            {
              LinkedList<Componente_Funcion_Arreglo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<Componente_Funcion_Arreglo> a = (LinkedList<Componente_Funcion_Arreglo>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Componente_Funcion_Arreglo b = (Componente_Funcion_Arreglo)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                                        RESULT=a;
                                                                        RESULT.add(b);
                                                                     
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJES",34, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIAS_ARREGLOS ::= valor_id pto FUNCIONES_LENGUAJES 
            {
              Funciones_Arreglos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<Componente_Funcion_Arreglo> b = (LinkedList<Componente_Funcion_Arreglo>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                                RESULT=new Funciones_Arreglos(a,b);
                                                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_ARREGLOS",33, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIAS_GENERALES ::= SENTENCIAS_ARREGLOS pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Funciones_Arreglos a = (Funciones_Arreglos)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                RESULT=new LinkedList<>();
                                                RESULT.add(a);
                                             
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GENERALES",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIAS_GENERALES ::= LLAMADA_FUNCION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                RESULT=new LinkedList<>();
                                                RESULT.add(a);
                                             
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GENERALES",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIAS_GENERALES ::= SENTENCIA_ASIGNACION 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GENERALES",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIAS_GENERALES ::= SENTENCIA_DETENER 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GENERALES",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIAS_GENERALES ::= SENTENCIA_RETORNAR 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GENERALES",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIAS_GENERALES ::= SENTENCIAS_SELECCION 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GENERALES",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIAS_GENERALES ::= DECLARACION_VARIABLES 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                RESULT=a;
                                               
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GENERALES",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIAS_GENERALES ::= SENTENCIA_IMPRIMIR 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=a;
                                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GENERALES",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIAS_INTERNAS ::= SENTENCIAS_GENERALES 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                RESULT=a;
                                             
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_INTERNAS",22, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIAS_INTERNAS ::= SENTENCIAS_INTERNAS SENTENCIAS_GENERALES 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                                    RESULT=a;
                                                                    RESULT.addAll(b);
                                                                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_INTERNAS",22, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEFINICIONES_PARAMETROS ::= var valor_id 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new LinkedList<>();
                                            RESULT.add(new Declaracion(Type.PrimitiveType.ID,a.toString().toLowerCase(),null,false,aright));
                                         
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DEFINICIONES_PARAMETROS",24, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEFINICIONES_PARAMETROS ::= valor_id 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new LinkedList<>();
                                            RESULT.add(new Declaracion(Type.PrimitiveType.ID,a.toString().toLowerCase(),null,false,aright));
                                         
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DEFINICIONES_PARAMETROS",24, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEFINICIONES_PARAMETROS ::= DEFINICIONES_PARAMETROS coma var valor_id 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                                        RESULT=a;
                                                                        RESULT.add(new Declaracion(Type.PrimitiveType.ID,b.toString().toLowerCase(),null,false,bright));
                                                                        
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DEFINICIONES_PARAMETROS",24, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DEFINICIONES_PARAMETROS ::= DEFINICIONES_PARAMETROS coma valor_id 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                                        RESULT=a;
                                                                        RESULT.add(new Declaracion(Type.PrimitiveType.ID,b.toString().toLowerCase(),null,false,bright));
                                                                        
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DEFINICIONES_PARAMETROS",24, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARAR_FUNCIONES ::= funcion valor_id parena DEFINICIONES_PARAMETROS parenc llavea SENTENCIAS_INTERNAS llavec 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                                                        RESULT=new LinkedList<>();
                                                                                                                        RESULT.add(new Funcion(a.toString().toLowerCase(),b,c));
                                                                                                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARAR_FUNCIONES",25, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARAR_FUNCIONES ::= funcion valor_id parena parenc llavea SENTENCIAS_INTERNAS llavec 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                            RESULT=new LinkedList<>();
                                                                                            RESULT.add(new Funcion(a.toString().toLowerCase(),b));
                                                                                          
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARAR_FUNCIONES",25, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA_GLOBAL ::= DECLARAR_FUNCIONES 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_GLOBAL",2, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA_GLOBAL ::= importar parena ELEMENTO_PATH parenc pyc 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_GLOBAL",2, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA_GLOBAL ::= SENTENCIAS_GENERALES 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_GLOBAL",2, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIAS_GLOBALES ::= SENTENCIA_GLOBAL 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=a;
                                         
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GLOBALES",1, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIAS_GLOBALES ::= SENTENCIAS_GLOBALES SENTENCIA_GLOBAL 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                                RESULT=a;
                                                                RESULT.addAll(b);
                                                               
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GLOBALES",1, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIAL ::= SENTENCIAS_GLOBALES 
            {
              AST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                this.parser.root=new AST(a);
                               
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INICIAL",0, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		AST start_val = (AST)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = start_val;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintacticoFS$parser.done_parsing();
          return CUP$sintacticoFS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

