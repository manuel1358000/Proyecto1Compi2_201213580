
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 18 22:56:33 CST 2019
//----------------------------------------------------

package Analizadores.GramaticaFS;

import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.lang.*;
import javax.swing.JOptionPane;
import java.io.*;
import java.util.LinkedList;
import java.awt.Color;
import ArbolAST.AST;
import ArbolAST.NodoAST;
import ArbolAST.Entorno.Type;
import ArbolAST.Expresiones.Expresion;
import ArbolAST.Expresiones.operacion.Logica;
import ArbolAST.Expresiones.operacion.Aritmetica;
import ArbolAST.Expresiones.operacion.Relacional;
import ArbolAST.Expresiones.operacion.Operacion.Operador;
import ArbolAST.Expresiones.operacion.Ternario;
import ArbolAST.Expresiones.operacion.Retornar;
import ArbolAST.Expresiones.Llamada_Funcion;
import ArbolAST.Instrucciones.Imprimir;
import ArbolAST.Instrucciones.Detener;
import ArbolAST.Instrucciones.Seleccion.If;
import ArbolAST.Instrucciones.Seleccion.SubIf;
import ArbolAST.Instrucciones.Seleccion.Caso;
import ArbolAST.Instrucciones.Seleccion.Switch;
import ArbolAST.Instrucciones.Asignacion;
import ArbolAST.Instrucciones.Funcion;
import ArbolAST.Instrucciones.Declaracion;
import ArbolAST.Instrucciones.AsignacionArreglo;
import ArbolAST.Instrucciones.Declaracion_Arreglo;
import ArbolAST.Expresiones.AccesoArreglo;
import ArbolAST.Instrucciones.Componente_Funcion_Arreglo;
import ArbolAST.Instrucciones.Funciones_Arreglos;
import ArbolAST.Instrucciones.Declaracion_UI;
import ArbolAST.Instrucciones.Eventos_Botones;
import Auxiliares.Errores;
import ArbolAST.Instrucciones.Eventos_Ventanas;
import ArbolAST.Instrucciones.Importar;
import ArbolAST.Expresiones.LeerGXML;
import ArbolAST.Expresiones.operacion.Obtener;
import ArbolAST.Expresiones.AccesoObjetos;
import ArbolAST.Expresiones.arrayDesde;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 18 22:56:33 CST 2019
  */
public class sintacticoFS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintacticoFS() {super();}

  /** Constructor which sets the default scanner. */
  public sintacticoFS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintacticoFS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\223\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\007" +
    "\000\002\004\003\000\002\033\011\000\002\033\012\000" +
    "\002\032\005\000\002\032\006\000\002\032\003\000\002" +
    "\032\004\000\002\030\004\000\002\030\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\004\000" +
    "\002\012\004\000\002\043\005\000\002\044\005\000\002" +
    "\044\003\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\037\006" +
    "\000\002\037\006\000\002\037\006\000\002\037\006\000" +
    "\002\037\006\000\002\037\006\000\002\031\006\000\002" +
    "\031\007\000\002\031\007\000\002\031\007\000\002\031" +
    "\007\000\002\031\011\000\002\031\012\000\002\031\012" +
    "\000\002\031\012\000\002\031\012\000\002\031\005\000" +
    "\002\031\005\000\002\026\005\000\002\026\004\000\002" +
    "\027\004\000\002\013\007\000\002\014\003\000\002\014" +
    "\003\000\002\021\012\000\002\021\011\000\002\022\004" +
    "\000\002\022\003\000\002\023\010\000\002\024\007\000" +
    "\002\016\013\000\002\016\012\000\002\016\012\000\002" +
    "\016\011\000\002\020\006\000\002\017\013\000\002\017" +
    "\012\000\002\005\005\000\002\005\007\000\002\005\011" +
    "\000\002\005\007\000\002\005\011\000\002\005\011\000" +
    "\002\005\011\000\002\005\011\000\002\005\011\000\002" +
    "\005\011\000\002\005\011\000\002\005\011\000\002\005" +
    "\010\000\002\005\011\000\002\005\010\000\002\005\010" +
    "\000\002\045\006\000\002\045\010\000\002\045\010\000" +
    "\002\041\003\000\002\041\003\000\002\040\007\000\002" +
    "\040\005\000\002\036\002\000\002\036\003\000\002\035" +
    "\005\000\002\035\003\000\002\006\005\000\002\006\003" +
    "\000\002\007\004\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\004\000\002\007\005\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\004\000" +
    "\002\007\004\000\002\007\005\000\002\007\003\000\002" +
    "\051\006\000\002\051\006\000\002\051\006\000\002\050" +
    "\010\000\002\050\010\000\002\050\012\000\002\042\006" +
    "\000\002\015\007\000\002\011\006\000\002\010\002\000" +
    "\002\010\003\000\002\034\005\000\002\034\003\000\002" +
    "\034\007\000\002\047\002\000\002\047\003\000\002\046" +
    "\005\000\002\046\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u017e\000\024\040\027\054\013\055\030\056\031\061" +
    "\024\062\017\063\006\064\032\066\016\001\002\000\026" +
    "\002\000\040\027\054\013\055\030\056\031\061\024\062" +
    "\017\063\006\064\032\066\016\001\002\000\030\002\uffee" +
    "\007\uffee\040\uffee\054\uffee\055\uffee\056\uffee\061\uffee\062" +
    "\uffee\063\uffee\064\uffee\066\uffee\001\002\000\004\004\u016b" +
    "\001\002\000\030\002\uffed\007\uffed\040\uffed\054\uffed\055" +
    "\uffed\056\uffed\061\uffed\062\uffed\063\uffed\064\uffed\066\uffed" +
    "\001\002\000\030\002\ufff1\007\ufff1\040\ufff1\054\ufff1\055" +
    "\ufff1\056\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\066\ufff1" +
    "\001\002\000\026\002\ufffe\040\ufffe\054\ufffe\055\ufffe\056" +
    "\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\066\ufffe\001\002" +
    "\000\004\030\u016a\001\002\000\004\004\u0166\001\002\000" +
    "\030\002\ufff2\007\ufff2\040\ufff2\054\ufff2\055\ufff2\056\ufff2" +
    "\061\ufff2\062\ufff2\063\ufff2\064\ufff2\066\ufff2\001\002\000" +
    "\004\030\u0165\001\002\000\026\004\206\010\u0109\011\u0108" +
    "\012\u0105\013\u0107\014\u0101\031\u0104\033\u0102\036\u0106\037" +
    "\u0103\001\002\000\034\004\076\012\073\026\064\030\376" +
    "\066\074\067\070\075\101\076\062\077\067\101\065\102" +
    "\077\116\100\120\063\001\002\000\004\002\375\001\002" +
    "\000\030\002\uffef\007\uffef\040\uffef\054\uffef\055\uffef\056" +
    "\uffef\061\uffef\062\uffef\063\uffef\064\uffef\066\uffef\001\002" +
    "\000\026\002\ufffd\040\ufffd\054\ufffd\055\ufffd\056\ufffd\061" +
    "\ufffd\062\ufffd\063\ufffd\064\ufffd\066\ufffd\001\002\000\030" +
    "\002\uffcc\007\uffcc\040\uffcc\054\uffcc\055\uffcc\056\uffcc\061" +
    "\uffcc\062\uffcc\063\uffcc\064\uffcc\066\uffcc\001\002\000\004" +
    "\030\374\001\002\000\030\002\uffcb\007\uffcb\040\uffcb\054" +
    "\uffcb\055\uffcb\056\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb" +
    "\066\uffcb\001\002\000\026\002\ufffb\040\ufffb\054\ufffb\055" +
    "\ufffb\056\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb\066\ufffb" +
    "\001\002\000\004\066\334\001\002\000\004\004\326\001" +
    "\002\000\004\004\060\001\002\000\004\066\034\001\002" +
    "\000\030\002\ufff0\007\ufff0\040\ufff0\054\ufff0\055\ufff0\056" +
    "\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\066\ufff0\001\002" +
    "\000\004\004\035\001\002\000\010\005\036\040\041\066" +
    "\037\001\002\000\004\006\055\001\002\000\006\005\ufff6" +
    "\027\ufff6\001\002\000\006\005\043\027\044\001\002\000" +
    "\004\066\042\001\002\000\006\005\ufff5\027\ufff5\001\002" +
    "\000\004\006\050\001\002\000\006\040\046\066\045\001" +
    "\002\000\006\005\ufff8\027\ufff8\001\002\000\004\066\047" +
    "\001\002\000\006\005\ufff7\027\ufff7\001\002\000\020\040" +
    "\027\054\013\056\031\061\024\062\017\063\006\066\016" +
    "\001\002\000\022\007\054\040\027\054\013\056\031\061" +
    "\024\062\017\063\006\066\016\001\002\000\022\007\ufff3" +
    "\040\ufff3\054\ufff3\056\ufff3\061\ufff3\062\ufff3\063\ufff3\066" +
    "\ufff3\001\002\000\022\007\ufff4\040\ufff4\054\ufff4\056\ufff4" +
    "\061\ufff4\062\ufff4\063\ufff4\066\ufff4\001\002\000\026\002" +
    "\ufff9\040\ufff9\054\ufff9\055\ufff9\056\ufff9\061\ufff9\062\ufff9" +
    "\063\ufff9\064\ufff9\066\ufff9\001\002\000\020\040\027\054" +
    "\013\056\031\061\024\062\017\063\006\066\016\001\002" +
    "\000\022\007\057\040\027\054\013\056\031\061\024\062" +
    "\017\063\006\066\016\001\002\000\026\002\ufffa\040\ufffa" +
    "\054\ufffa\055\ufffa\056\ufffa\061\ufffa\062\ufffa\063\ufffa\064" +
    "\ufffa\066\ufffa\001\002\000\032\004\076\012\073\026\064" +
    "\066\074\067\070\075\101\076\062\077\067\101\065\102" +
    "\077\116\100\120\063\001\002\000\054\005\uff81\011\uff81" +
    "\012\uff81\013\uff81\014\uff81\015\uff81\016\uff81\017\uff81\020" +
    "\uff81\021\uff81\022\uff81\023\uff81\024\uff81\025\uff81\027\uff81" +
    "\030\uff81\032\uff81\034\uff81\035\uff81\036\uff81\037\uff81\001" +
    "\002\000\054\005\uff8c\011\uff8c\012\uff8c\013\uff8c\014\uff8c" +
    "\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022\uff8c\023" +
    "\uff8c\024\uff8c\025\uff8c\027\uff8c\030\uff8c\032\uff8c\034\uff8c" +
    "\035\uff8c\036\uff8c\037\uff8c\001\002\000\004\004\323\001" +
    "\002\000\032\004\076\012\073\026\064\066\074\067\070" +
    "\075\101\076\062\077\067\101\065\102\077\116\100\120" +
    "\063\001\002\000\054\005\uff8e\011\uff8e\012\uff8e\013\uff8e" +
    "\014\uff8e\015\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e\022" +
    "\uff8e\023\uff8e\024\uff8e\025\uff8e\027\uff8e\030\uff8e\032\uff8e" +
    "\034\uff8e\035\uff8e\036\uff8e\037\uff8e\001\002\000\054\005" +
    "\uff8a\011\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a" +
    "\017\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a\025" +
    "\uff8a\027\uff8a\030\uff8a\032\uff8a\034\uff8a\035\uff8a\036\uff8a" +
    "\037\uff8a\001\002\000\054\005\uff8b\011\uff8b\012\uff8b\013" +
    "\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b\020\uff8b\021\uff8b" +
    "\022\uff8b\023\uff8b\024\uff8b\025\uff8b\027\uff8b\030\uff8b\032" +
    "\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\001\002\000\054" +
    "\005\uff8f\011\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f\016" +
    "\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f" +
    "\025\uff8f\027\uff8f\030\uff8f\032\uff8f\034\uff8f\035\uff8f\036" +
    "\uff8f\037\uff8f\001\002\000\054\005\uff88\011\uff88\012\uff88" +
    "\013\uff88\014\uff88\015\uff88\016\uff88\017\uff88\020\uff88\021" +
    "\uff88\022\uff88\023\uff88\024\uff88\025\uff88\027\uff88\030\uff88" +
    "\032\uff88\034\uff88\035\uff88\036\uff88\037\uff88\001\002\000" +
    "\054\005\uff85\011\uff85\012\uff85\013\uff85\014\uff85\015\uff85" +
    "\016\uff85\017\uff85\020\uff85\021\uff85\022\uff85\023\uff85\024" +
    "\uff85\025\uff85\027\uff85\030\uff85\032\uff85\034\uff85\035\uff85" +
    "\036\uff85\037\uff85\001\002\000\032\004\076\012\073\026" +
    "\064\066\074\067\070\075\101\076\062\077\067\101\065" +
    "\102\077\116\100\120\063\001\002\000\062\004\206\005" +
    "\uff90\011\uff90\012\uff90\013\uff90\014\uff90\015\uff90\016\uff90" +
    "\017\uff90\020\uff90\021\uff90\022\uff90\023\uff90\024\uff90\025" +
    "\uff90\027\uff90\030\uff90\031\207\032\uff90\033\205\034\uff90" +
    "\035\uff90\036\uff90\037\uff90\001\002\000\054\005\uff87\011" +
    "\uff87\012\uff87\013\uff87\014\uff87\015\uff87\016\uff87\017\uff87" +
    "\020\uff87\021\uff87\022\uff87\023\uff87\024\uff87\025\uff87\027" +
    "\uff87\030\uff87\032\uff87\034\uff87\035\uff87\036\uff87\037\uff87" +
    "\001\002\000\032\004\076\012\073\026\064\066\074\067" +
    "\070\075\101\076\062\077\067\101\065\102\077\116\100" +
    "\120\063\001\002\000\054\005\uff86\011\uff86\012\uff86\013" +
    "\uff86\014\uff86\015\uff86\016\uff86\017\uff86\020\uff86\021\uff86" +
    "\022\uff86\023\uff86\024\uff86\025\uff86\027\uff86\030\uff86\032" +
    "\uff86\034\uff86\035\uff86\036\uff86\037\uff86\001\002\000\004" +
    "\004\176\001\002\000\054\005\uff8d\011\uff8d\012\uff8d\013" +
    "\uff8d\014\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d" +
    "\022\uff8d\023\uff8d\024\uff8d\025\uff8d\027\uff8d\030\uff8d\032" +
    "\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d\001\002\000\054" +
    "\005\uff89\011\uff89\012\uff89\013\uff89\014\uff89\015\uff89\016" +
    "\uff89\017\uff89\020\uff89\021\uff89\022\uff89\023\uff89\024\uff89" +
    "\025\uff89\027\uff89\030\uff89\032\uff89\034\uff89\035\uff89\036" +
    "\uff89\037\uff89\001\002\000\044\005\113\011\122\012\107" +
    "\013\120\014\104\015\116\016\124\017\111\020\121\021" +
    "\117\022\112\023\115\024\110\025\106\035\123\036\114" +
    "\037\105\001\002\000\032\004\076\012\073\026\064\066" +
    "\074\067\070\075\101\076\062\077\067\101\065\102\077" +
    "\116\100\120\063\001\002\000\054\005\uff84\011\uff84\012" +
    "\uff84\013\uff84\014\uff84\015\uff84\016\uff84\017\uff84\020\uff84" +
    "\021\uff84\022\uff84\023\uff84\024\uff84\025\uff84\027\uff84\030" +
    "\uff84\032\uff84\034\uff84\035\uff84\036\uff84\037\uff84\001\002" +
    "\000\032\004\076\012\073\026\064\066\074\067\070\075" +
    "\101\076\062\077\067\101\065\102\077\116\100\120\063" +
    "\001\002\000\032\004\076\012\073\026\064\066\074\067" +
    "\070\075\101\076\062\077\067\101\065\102\077\116\100" +
    "\120\063\001\002\000\032\004\076\012\073\026\064\066" +
    "\074\067\070\075\101\076\062\077\067\101\065\102\077" +
    "\116\100\120\063\001\002\000\032\004\076\012\073\026" +
    "\064\066\074\067\070\075\101\076\062\077\067\101\065" +
    "\102\077\116\100\120\063\001\002\000\032\004\076\012" +
    "\073\026\064\066\074\067\070\075\101\076\062\077\067" +
    "\101\065\102\077\116\100\120\063\001\002\000\004\006" +
    "\137\001\002\000\054\005\uff83\011\uff83\012\uff83\013\uff83" +
    "\014\uff83\015\uff83\016\uff83\017\uff83\020\uff83\021\uff83\022" +
    "\uff83\023\uff83\024\uff83\025\uff83\027\uff83\030\uff83\032\uff83" +
    "\034\uff83\035\uff83\036\uff83\037\uff83\001\002\000\032\004" +
    "\076\012\073\026\064\066\074\067\070\075\101\076\062" +
    "\077\067\101\065\102\077\116\100\120\063\001\002\000" +
    "\032\004\076\012\073\026\064\066\074\067\070\075\101" +
    "\076\062\077\067\101\065\102\077\116\100\120\063\001" +
    "\002\000\032\004\076\012\073\026\064\066\074\067\070" +
    "\075\101\076\062\077\067\101\065\102\077\116\100\120" +
    "\063\001\002\000\032\004\076\012\073\026\064\066\074" +
    "\067\070\075\101\076\062\077\067\101\065\102\077\116" +
    "\100\120\063\001\002\000\032\004\076\012\073\026\064" +
    "\066\074\067\070\075\101\076\062\077\067\101\065\102" +
    "\077\116\100\120\063\001\002\000\032\004\076\012\073" +
    "\026\064\066\074\067\070\075\101\076\062\077\067\101" +
    "\065\102\077\116\100\120\063\001\002\000\032\004\076" +
    "\012\073\026\064\066\074\067\070\075\101\076\062\077" +
    "\067\101\065\102\077\116\100\120\063\001\002\000\032" +
    "\004\076\012\073\026\064\066\074\067\070\075\101\076" +
    "\062\077\067\101\065\102\077\116\100\120\063\001\002" +
    "\000\054\005\uff9a\011\122\012\107\013\120\014\104\015" +
    "\116\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a" +
    "\024\uff9a\025\uff9a\027\uff9a\030\uff9a\032\uff9a\034\uff9a\035" +
    "\uff9a\036\114\037\105\001\002\000\044\011\122\012\107" +
    "\013\120\014\104\015\116\016\124\017\111\020\121\021" +
    "\117\022\112\023\115\024\110\025\106\034\127\035\123" +
    "\036\114\037\105\001\002\000\032\004\076\012\073\026" +
    "\064\066\074\067\070\075\101\076\062\077\067\101\065" +
    "\102\077\116\100\120\063\001\002\000\054\005\uff79\011" +
    "\122\012\107\013\120\014\104\015\116\016\124\017\111" +
    "\020\121\021\117\022\112\023\115\024\110\025\106\027" +
    "\uff79\030\uff79\032\uff79\034\uff79\035\123\036\114\037\105" +
    "\001\002\000\054\005\uff9f\011\uff9f\012\uff9f\013\120\014" +
    "\104\015\116\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f" +
    "\023\uff9f\024\uff9f\025\uff9f\027\uff9f\030\uff9f\032\uff9f\034" +
    "\uff9f\035\uff9f\036\114\037\105\001\002\000\054\005\uff98" +
    "\011\122\012\107\013\120\014\104\015\116\016\uff98\017" +
    "\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98" +
    "\027\uff98\030\uff98\032\uff98\034\uff98\035\uff98\036\114\037" +
    "\105\001\002\000\054\005\uff9d\011\uff9d\012\uff9d\013\uff9d" +
    "\014\uff9d\015\116\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022" +
    "\uff9d\023\uff9d\024\uff9d\025\uff9d\027\uff9d\030\uff9d\032\uff9d" +
    "\034\uff9d\035\uff9d\036\114\037\105\001\002\000\054\005" +
    "\uff97\011\122\012\107\013\120\014\104\015\116\016\uff97" +
    "\017\uff97\020\uff97\021\uff97\022\uff97\023\uff97\024\uff97\025" +
    "\uff97\027\uff97\030\uff97\032\uff97\034\uff97\035\uff97\036\114" +
    "\037\105\001\002\000\054\005\uff9b\011\uff9b\012\uff9b\013" +
    "\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b" +
    "\022\uff9b\023\uff9b\024\uff9b\025\uff9b\027\uff9b\030\uff9b\032" +
    "\uff9b\034\uff9b\035\uff9b\036\114\037\105\001\002\000\054" +
    "\005\uff95\011\122\012\107\013\120\014\104\015\116\016" +
    "\uff95\017\uff95\020\uff95\021\uff95\022\uff95\023\uff95\024\uff95" +
    "\025\uff95\027\uff95\030\uff95\032\uff95\034\uff95\035\uff95\036" +
    "\114\037\105\001\002\000\020\040\027\054\013\056\031" +
    "\061\024\062\017\063\006\066\016\001\002\000\022\007" +
    "\141\040\027\054\013\056\031\061\024\062\017\063\006" +
    "\066\016\001\002\000\032\002\uffc1\007\uffc1\040\uffc1\054" +
    "\uffc1\055\uffc1\056\uffc1\057\143\061\uffc1\062\uffc1\063\uffc1" +
    "\064\uffc1\066\uffc1\001\002\000\032\002\uffc3\007\uffc3\040" +
    "\uffc3\054\uffc3\055\uffc3\056\uffc3\057\157\061\uffc3\062\uffc3" +
    "\063\uffc3\064\uffc3\066\uffc3\001\002\000\006\006\146\056" +
    "\145\001\002\000\030\002\uffc2\007\uffc2\040\uffc2\054\uffc2" +
    "\055\uffc2\056\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\066" +
    "\uffc2\001\002\000\004\004\151\001\002\000\020\040\027" +
    "\054\013\056\031\061\024\062\017\063\006\066\016\001" +
    "\002\000\022\007\150\040\027\054\013\056\031\061\024" +
    "\062\017\063\006\066\016\001\002\000\030\002\uffc0\007" +
    "\uffc0\040\uffc0\054\uffc0\055\uffc0\056\uffc0\061\uffc0\062\uffc0" +
    "\063\uffc0\064\uffc0\066\uffc0\001\002\000\032\004\076\012" +
    "\073\026\064\066\074\067\070\075\101\076\062\077\067" +
    "\101\065\102\077\116\100\120\063\001\002\000\044\005" +
    "\153\011\122\012\107\013\120\014\104\015\116\016\124" +
    "\017\111\020\121\021\117\022\112\023\115\024\110\025" +
    "\106\035\123\036\114\037\105\001\002\000\004\006\154" +
    "\001\002\000\020\040\027\054\013\056\031\061\024\062" +
    "\017\063\006\066\016\001\002\000\022\007\156\040\027" +
    "\054\013\056\031\061\024\062\017\063\006\066\016\001" +
    "\002\000\032\002\uffbe\007\uffbe\040\uffbe\054\uffbe\055\uffbe" +
    "\056\uffbe\057\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\066" +
    "\uffbe\001\002\000\006\006\146\056\161\001\002\000\030" +
    "\002\uffc4\007\uffc4\040\uffc4\054\uffc4\055\uffc4\056\uffc4\061" +
    "\uffc4\062\uffc4\063\uffc4\064\uffc4\066\uffc4\001\002\000\004" +
    "\004\162\001\002\000\032\004\076\012\073\026\064\066" +
    "\074\067\070\075\101\076\062\077\067\101\065\102\077" +
    "\116\100\120\063\001\002\000\044\005\164\011\122\012" +
    "\107\013\120\014\104\015\116\016\124\017\111\020\121" +
    "\021\117\022\112\023\115\024\110\025\106\035\123\036" +
    "\114\037\105\001\002\000\004\006\165\001\002\000\020" +
    "\040\027\054\013\056\031\061\024\062\017\063\006\066" +
    "\016\001\002\000\022\007\167\040\027\054\013\056\031" +
    "\061\024\062\017\063\006\066\016\001\002\000\032\002" +
    "\uffbf\007\uffbf\040\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf" +
    "\061\uffbf\062\uffbf\063\uffbf\064\uffbf\066\uffbf\001\002\000" +
    "\054\005\uff96\011\122\012\107\013\120\014\104\015\116" +
    "\016\uff96\017\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024" +
    "\uff96\025\uff96\027\uff96\030\uff96\032\uff96\034\uff96\035\uff96" +
    "\036\114\037\105\001\002\000\054\005\uff99\011\122\012" +
    "\107\013\120\014\104\015\116\016\uff99\017\uff99\020\uff99" +
    "\021\uff99\022\uff99\023\uff99\024\uff99\025\uff99\027\uff99\030" +
    "\uff99\032\uff99\034\uff99\035\uff99\036\114\037\105\001\002" +
    "\000\054\005\uff94\011\122\012\107\013\120\014\104\015" +
    "\116\016\124\017\111\020\121\021\117\022\112\023\115" +
    "\024\uff94\025\uff94\027\uff94\030\uff94\032\uff94\034\uff94\035" +
    "\uff94\036\114\037\105\001\002\000\054\005\uff9e\011\uff9e" +
    "\012\uff9e\013\120\014\104\015\116\016\uff9e\017\uff9e\020" +
    "\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\027\uff9e" +
    "\030\uff9e\032\uff9e\034\uff9e\035\uff9e\036\114\037\105\001" +
    "\002\000\054\005\uff93\011\122\012\107\013\120\014\104" +
    "\015\116\016\124\017\111\020\121\021\117\022\112\023" +
    "\115\024\110\025\uff93\027\uff93\030\uff93\032\uff93\034\uff93" +
    "\035\uff93\036\114\037\105\001\002\000\054\005\uff9c\011" +
    "\uff9c\012\uff9c\013\uff9c\014\uff9c\015\116\016\uff9c\017\uff9c" +
    "\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\027" +
    "\uff9c\030\uff9c\032\uff9c\034\uff9c\035\uff9c\036\114\037\105" +
    "\001\002\000\006\073\200\074\177\001\002\000\004\005" +
    "\202\001\002\000\004\005\201\001\002\000\054\005\uff80" +
    "\011\uff80\012\uff80\013\uff80\014\uff80\015\uff80\016\uff80\017" +
    "\uff80\020\uff80\021\uff80\022\uff80\023\uff80\024\uff80\025\uff80" +
    "\027\uff80\030\uff80\032\uff80\034\uff80\035\uff80\036\uff80\037" +
    "\uff80\001\002\000\054\005\uff7f\011\uff7f\012\uff7f\013\uff7f" +
    "\014\uff7f\015\uff7f\016\uff7f\017\uff7f\020\uff7f\021\uff7f\022" +
    "\uff7f\023\uff7f\024\uff7f\025\uff7f\027\uff7f\030\uff7f\032\uff7f" +
    "\034\uff7f\035\uff7f\036\uff7f\037\uff7f\001\002\000\044\005" +
    "\204\011\122\012\107\013\120\014\104\015\116\016\124" +
    "\017\111\020\121\021\117\022\112\023\115\024\110\025" +
    "\106\035\123\036\114\037\105\001\002\000\054\005\uff91" +
    "\011\uff91\012\uff91\013\uff91\014\uff91\015\uff91\016\uff91\017" +
    "\uff91\020\uff91\021\uff91\022\uff91\023\uff91\024\uff91\025\uff91" +
    "\027\uff91\030\uff91\032\uff91\034\uff91\035\uff91\036\uff91\037" +
    "\uff91\001\002\000\040\041\245\042\234\043\233\044\243" +
    "\045\241\046\246\047\242\050\230\051\240\052\231\053" +
    "\244\066\247\121\232\122\227\123\237\001\002\000\034" +
    "\004\076\005\uff77\012\073\026\064\066\074\067\070\075" +
    "\101\076\062\077\067\101\065\102\077\116\100\120\063" +
    "\001\002\000\032\004\076\012\073\026\064\066\074\067" +
    "\070\075\101\076\062\077\067\101\065\102\077\116\100" +
    "\120\063\001\002\000\044\011\122\012\107\013\120\014" +
    "\104\015\116\016\124\017\111\020\121\021\117\022\112" +
    "\023\115\024\110\025\106\032\211\035\123\036\114\037" +
    "\105\001\002\000\054\005\uff7a\011\uff7a\012\uff7a\013\uff7a" +
    "\014\uff7a\015\uff7a\016\uff7a\017\uff7a\020\uff7a\021\uff7a\022" +
    "\uff7a\023\uff7a\024\uff7a\025\uff7a\027\uff7a\030\uff7a\032\uff7a" +
    "\034\uff7a\035\uff7a\036\uff7a\037\uff7a\001\002\000\006\005" +
    "\uff76\027\216\001\002\000\004\005\215\001\002\000\046" +
    "\005\uff74\011\122\012\107\013\120\014\104\015\116\016" +
    "\124\017\111\020\121\021\117\022\112\023\115\024\110" +
    "\025\106\027\uff74\035\123\036\114\037\105\001\002\000" +
    "\054\005\uff78\011\uff78\012\uff78\013\uff78\014\uff78\015\uff78" +
    "\016\uff78\017\uff78\020\uff78\021\uff78\022\uff78\023\uff78\024" +
    "\uff78\025\uff78\027\uff78\030\uff78\032\uff78\034\uff78\035\uff78" +
    "\036\uff78\037\uff78\001\002\000\034\004\076\012\073\026" +
    "\064\031\217\066\074\067\070\075\101\076\062\077\067" +
    "\101\065\102\077\116\100\120\063\001\002\000\006\032" +
    "\uff72\075\221\001\002\000\046\005\uff75\011\122\012\107" +
    "\013\120\014\104\015\116\016\124\017\111\020\121\021" +
    "\117\022\112\023\115\024\110\025\106\027\uff75\035\123" +
    "\036\114\037\105\001\002\000\006\027\uff6f\032\uff6f\001" +
    "\002\000\006\027\225\032\uff71\001\002\000\004\032\224" +
    "\001\002\000\006\005\uff73\027\uff73\001\002\000\004\075" +
    "\226\001\002\000\006\027\uff70\032\uff70\001\002\000\004" +
    "\004\314\001\002\000\004\004\311\001\002\000\004\004" +
    "\306\001\002\000\004\004\303\001\002\000\004\004\301" +
    "\001\002\000\004\004\277\001\002\000\056\005\uffea\011" +
    "\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea" +
    "\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\027" +
    "\uffea\030\uffea\032\uffea\033\275\034\uffea\035\uffea\036\uffea" +
    "\037\uffea\001\002\000\056\005\uffe8\011\uffe8\012\uffe8\013" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8" +
    "\022\uffe8\023\uffe8\024\uffe8\025\uffe8\027\uffe8\030\uffe8\032" +
    "\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\001\002" +
    "\000\004\004\272\001\002\000\004\004\267\001\002\000" +
    "\004\004\265\001\002\000\004\004\262\001\002\000\004" +
    "\004\260\001\002\000\004\004\255\001\002\000\004\004" +
    "\253\001\002\000\004\004\250\001\002\000\054\005\uff82" +
    "\011\uff82\012\uff82\013\uff82\014\uff82\015\uff82\016\uff82\017" +
    "\uff82\020\uff82\021\uff82\022\uff82\023\uff82\024\uff82\025\uff82" +
    "\027\uff82\030\uff82\032\uff82\034\uff82\035\uff82\036\uff82\037" +
    "\uff82\001\002\000\004\066\251\001\002\000\004\005\252" +
    "\001\002\000\056\005\uffe2\011\uffe2\012\uffe2\013\uffe2\014" +
    "\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\027\uffe2\030\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\001\002\000\004" +
    "\005\254\001\002\000\056\005\uffe7\011\uffe7\012\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7" +
    "\022\uffe7\023\uffe7\024\uffe7\025\uffe7\027\uffe7\030\uffe7\032" +
    "\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\001\002" +
    "\000\004\066\256\001\002\000\004\005\257\001\002\000" +
    "\056\005\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\027\uffdd\030\uffdd\032\uffdd\033\uffdd\034\uffdd" +
    "\035\uffdd\036\uffdd\037\uffdd\001\002\000\004\005\261\001" +
    "\002\000\056\005\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\027\uffe4\030\uffe4\032\uffe4\033\uffe4" +
    "\034\uffe4\035\uffe4\036\uffe4\037\uffe4\001\002\000\004\066" +
    "\263\001\002\000\004\005\264\001\002\000\056\005\uffe1" +
    "\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017" +
    "\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\027\uffe1\030\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\001\002\000\004\005\266\001\002\000\056" +
    "\005\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\025\uffe3\027\uffe3\030\uffe3\032\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\036\uffe3\037\uffe3\001\002\000\004\066\270\001\002" +
    "\000\004\005\271\001\002\000\056\005\uffdf\011\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\027\uffdf\030" +
    "\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf" +
    "\001\002\000\032\004\076\012\073\026\064\066\074\067" +
    "\070\075\101\076\062\077\067\101\065\102\077\116\100" +
    "\120\063\001\002\000\044\005\274\011\122\012\107\013" +
    "\120\014\104\015\116\016\124\017\111\020\121\021\117" +
    "\022\112\023\115\024\110\025\106\035\123\036\114\037" +
    "\105\001\002\000\054\005\uff7c\011\uff7c\012\uff7c\013\uff7c" +
    "\014\uff7c\015\uff7c\016\uff7c\017\uff7c\020\uff7c\021\uff7c\022" +
    "\uff7c\023\uff7c\024\uff7c\025\uff7c\027\uff7c\030\uff7c\032\uff7c" +
    "\034\uff7c\035\uff7c\036\uff7c\037\uff7c\001\002\000\030\041" +
    "\245\042\234\043\233\044\243\045\241\046\246\047\242" +
    "\050\230\051\240\052\231\053\244\001\002\000\056\005" +
    "\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025" +
    "\uffe9\027\uffe9\030\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9" +
    "\036\uffe9\037\uffe9\001\002\000\004\005\300\001\002\000" +
    "\056\005\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024" +
    "\uffe6\025\uffe6\027\uffe6\030\uffe6\032\uffe6\033\uffe6\034\uffe6" +
    "\035\uffe6\036\uffe6\037\uffe6\001\002\000\004\005\302\001" +
    "\002\000\056\005\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\027\uffe5\030\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\036\uffe5\037\uffe5\001\002\000\032\004" +
    "\076\012\073\026\064\066\074\067\070\075\101\076\062" +
    "\077\067\101\065\102\077\116\100\120\063\001\002\000" +
    "\044\005\305\011\122\012\107\013\120\014\104\015\116" +
    "\016\124\017\111\020\121\021\117\022\112\023\115\024" +
    "\110\025\106\035\123\036\114\037\105\001\002\000\054" +
    "\005\uff7d\011\uff7d\012\uff7d\013\uff7d\014\uff7d\015\uff7d\016" +
    "\uff7d\017\uff7d\020\uff7d\021\uff7d\022\uff7d\023\uff7d\024\uff7d" +
    "\025\uff7d\027\uff7d\030\uff7d\032\uff7d\034\uff7d\035\uff7d\036" +
    "\uff7d\037\uff7d\001\002\000\004\066\307\001\002\000\004" +
    "\005\310\001\002\000\056\005\uffde\011\uffde\012\uffde\013" +
    "\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde" +
    "\022\uffde\023\uffde\024\uffde\025\uffde\027\uffde\030\uffde\032" +
    "\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\001\002" +
    "\000\004\066\312\001\002\000\004\005\313\001\002\000" +
    "\056\005\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\027\uffe0\030\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\037\uffe0\001\002\000\032\004\076\012" +
    "\073\026\064\066\074\067\070\075\101\076\062\077\067" +
    "\101\065\102\077\116\100\120\063\001\002\000\044\011" +
    "\122\012\107\013\120\014\104\015\116\016\124\017\111" +
    "\020\121\021\117\022\112\023\115\024\110\025\106\027" +
    "\316\035\123\036\114\037\105\001\002\000\032\004\076" +
    "\012\073\026\064\066\074\067\070\075\101\076\062\077" +
    "\067\101\065\102\077\116\100\120\063\001\002\000\044" +
    "\005\320\011\122\012\107\013\120\014\104\015\116\016" +
    "\124\017\111\020\121\021\117\022\112\023\115\024\110" +
    "\025\106\035\123\036\114\037\105\001\002\000\054\005" +
    "\uff7b\011\uff7b\012\uff7b\013\uff7b\014\uff7b\015\uff7b\016\uff7b" +
    "\017\uff7b\020\uff7b\021\uff7b\022\uff7b\023\uff7b\024\uff7b\025" +
    "\uff7b\027\uff7b\030\uff7b\032\uff7b\034\uff7b\035\uff7b\036\uff7b" +
    "\037\uff7b\001\002\000\054\005\uffa0\011\uffa0\012\uffa0\013" +
    "\120\014\104\015\116\016\uffa0\017\uffa0\020\uffa0\021\uffa0" +
    "\022\uffa0\023\uffa0\024\uffa0\025\uffa0\027\uffa0\030\uffa0\032" +
    "\uffa0\034\uffa0\035\uffa0\036\114\037\105\001\002\000\054" +
    "\005\uff92\011\122\012\107\013\120\014\104\015\116\016" +
    "\124\017\111\020\121\021\117\022\112\023\115\024\uff92" +
    "\025\uff92\027\uff92\030\uff92\032\uff92\034\uff92\035\uff92\036" +
    "\114\037\105\001\002\000\004\072\324\001\002\000\004" +
    "\005\325\001\002\000\054\005\uff7e\011\uff7e\012\uff7e\013" +
    "\uff7e\014\uff7e\015\uff7e\016\uff7e\017\uff7e\020\uff7e\021\uff7e" +
    "\022\uff7e\023\uff7e\024\uff7e\025\uff7e\027\uff7e\030\uff7e\032" +
    "\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e\001\002\000\006" +
    "\070\331\071\330\001\002\000\004\005\332\001\002\000" +
    "\004\005\uffa9\001\002\000\004\005\uffaa\001\002\000\004" +
    "\030\333\001\002\000\026\002\ufffc\040\ufffc\054\ufffc\055" +
    "\ufffc\056\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\066\ufffc" +
    "\001\002\000\010\010\uffa1\027\uffa1\030\uffa1\001\002\000" +
    "\010\010\337\027\340\030\336\001\002\000\030\002\uffbd" +
    "\007\uffbd\040\uffbd\054\uffbd\055\uffbd\056\uffbd\061\uffbd\062" +
    "\uffbd\063\uffbd\064\uffbd\066\uffbd\001\002\000\036\004\076" +
    "\012\073\026\064\031\345\066\344\067\070\075\101\076" +
    "\062\077\067\101\065\102\077\103\342\116\100\120\063" +
    "\001\002\000\004\066\341\001\002\000\010\010\uffa2\027" +
    "\uffa2\030\uffa2\001\002\000\004\004\371\001\002\000\004" +
    "\030\370\001\002\000\052\004\206\011\uff90\012\uff90\013" +
    "\uff90\014\uff90\015\uff90\016\uff90\017\uff90\020\uff90\021\uff90" +
    "\022\uff90\023\uff90\024\uff90\025\uff90\030\uff90\031\207\033" +
    "\357\035\uff90\036\uff90\037\uff90\001\002\000\034\004\076" +
    "\012\073\026\064\032\uffa6\066\074\067\070\075\101\076" +
    "\062\077\067\101\065\102\077\116\100\120\063\001\002" +
    "\000\044\011\122\012\107\013\120\014\104\015\116\016" +
    "\124\017\111\020\121\021\117\022\112\023\115\024\110" +
    "\025\106\030\347\035\123\036\114\037\105\001\002\000" +
    "\030\002\uffbc\007\uffbc\040\uffbc\054\uffbc\055\uffbc\056\uffbc" +
    "\061\uffbc\062\uffbc\063\uffbc\064\uffbc\066\uffbc\001\002\000" +
    "\004\032\355\001\002\000\006\027\353\032\uffa5\001\002" +
    "\000\046\011\122\012\107\013\120\014\104\015\116\016" +
    "\124\017\111\020\121\021\117\022\112\023\115\024\110" +
    "\025\106\027\uffa3\032\uffa3\035\123\036\114\037\105\001" +
    "\002\000\032\004\076\012\073\026\064\066\074\067\070" +
    "\075\101\076\062\077\067\101\065\102\077\116\100\120" +
    "\063\001\002\000\046\011\122\012\107\013\120\014\104" +
    "\015\116\016\124\017\111\020\121\021\117\022\112\023" +
    "\115\024\110\025\106\027\uffa4\032\uffa4\035\123\036\114" +
    "\037\105\001\002\000\004\030\356\001\002\000\030\002" +
    "\uffbb\007\uffbb\040\uffbb\054\uffbb\055\uffbb\056\uffbb\061\uffbb" +
    "\062\uffbb\063\uffbb\064\uffbb\066\uffbb\001\002\000\044\041" +
    "\245\042\234\043\233\044\243\045\241\046\246\047\242" +
    "\050\230\051\240\052\231\053\244\066\247\104\361\105" +
    "\360\121\232\122\227\123\237\001\002\000\004\004\365" +
    "\001\002\000\004\004\362\001\002\000\032\004\076\012" +
    "\073\026\064\066\074\067\070\075\101\076\062\077\067" +
    "\101\065\102\077\116\100\120\063\001\002\000\006\005" +
    "\364\027\216\001\002\000\004\030\uffac\001\002\000\032" +
    "\004\076\012\073\026\064\066\074\067\070\075\101\076" +
    "\062\077\067\101\065\102\077\116\100\120\063\001\002" +
    "\000\006\005\367\027\216\001\002\000\004\030\uffab\001" +
    "\002\000\030\002\uffba\007\uffba\040\uffba\054\uffba\055\uffba" +
    "\056\uffba\061\uffba\062\uffba\063\uffba\064\uffba\066\uffba\001" +
    "\002\000\032\004\076\012\073\026\064\066\074\067\070" +
    "\075\101\076\062\077\067\101\065\102\077\116\100\120" +
    "\063\001\002\000\006\005\373\027\216\001\002\000\004" +
    "\030\uffad\001\002\000\030\002\uffce\007\uffce\040\uffce\054" +
    "\uffce\055\uffce\056\uffce\061\uffce\062\uffce\063\uffce\064\uffce" +
    "\066\uffce\001\002\000\004\002\001\001\002\000\030\002" +
    "\uffcf\007\uffcf\040\uffcf\054\uffcf\055\uffcf\056\uffcf\061\uffcf" +
    "\062\uffcf\063\uffcf\064\uffcf\066\uffcf\001\002\000\044\011" +
    "\122\012\107\013\120\014\104\015\116\016\124\017\111" +
    "\020\121\021\117\022\112\023\115\024\110\025\106\030" +
    "\u0100\035\123\036\114\037\105\001\002\000\030\002\uffd0" +
    "\007\uffd0\040\uffd0\054\uffd0\055\uffd0\056\uffd0\061\uffd0\062" +
    "\uffd0\063\uffd0\064\uffd0\066\uffd0\001\002\000\004\010\u0162" +
    "\001\002\000\054\041\245\042\234\043\233\044\243\045" +
    "\241\046\246\047\242\050\230\051\240\052\231\053\244" +
    "\106\u0132\107\u012c\110\u012d\111\u012e\112\u0134\113\u0131\114" +
    "\u0135\115\u0130\116\u0133\117\u012f\001\002\000\004\030\u012b" +
    "\001\002\000\032\004\076\012\073\026\064\066\074\067" +
    "\070\075\101\076\062\077\067\101\065\102\077\116\100" +
    "\120\063\001\002\000\004\010\u0113\001\002\000\004\030" +
    "\u0112\001\002\000\004\010\u010f\001\002\000\004\010\u010c" +
    "\001\002\000\032\004\076\012\073\026\064\066\074\067" +
    "\070\075\101\076\062\077\067\101\065\102\077\116\100" +
    "\120\063\001\002\000\044\011\122\012\107\013\120\014" +
    "\104\015\116\016\124\017\111\020\121\021\117\022\112" +
    "\023\115\024\110\025\106\030\u010b\035\123\036\114\037" +
    "\105\001\002\000\030\002\uffdc\007\uffdc\040\uffdc\054\uffdc" +
    "\055\uffdc\056\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc\066" +
    "\uffdc\001\002\000\032\004\076\012\073\026\064\066\074" +
    "\067\070\075\101\076\062\077\067\101\065\102\077\116" +
    "\100\120\063\001\002\000\044\011\122\012\107\013\120" +
    "\014\104\015\116\016\124\017\111\020\121\021\117\022" +
    "\112\023\115\024\110\025\106\030\u010e\035\123\036\114" +
    "\037\105\001\002\000\030\002\uffdb\007\uffdb\040\uffdb\054" +
    "\uffdb\055\uffdb\056\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb" +
    "\066\uffdb\001\002\000\032\004\076\012\073\026\064\066" +
    "\074\067\070\075\101\076\062\077\067\101\065\102\077" +
    "\116\100\120\063\001\002\000\044\011\122\012\107\013" +
    "\120\014\104\015\116\016\124\017\111\020\121\021\117" +
    "\022\112\023\115\024\110\025\106\030\u0111\035\123\036" +
    "\114\037\105\001\002\000\030\002\uffd9\007\uffd9\040\uffd9" +
    "\054\uffd9\055\uffd9\056\uffd9\061\uffd9\062\uffd9\063\uffd9\064" +
    "\uffd9\066\uffd9\001\002\000\030\002\uffd1\007\uffd1\040\uffd1" +
    "\054\uffd1\055\uffd1\056\uffd1\061\uffd1\062\uffd1\063\uffd1\064" +
    "\uffd1\066\uffd1\001\002\000\032\004\076\012\073\026\064" +
    "\066\074\067\070\075\101\076\062\077\067\101\065\102" +
    "\077\116\100\120\063\001\002\000\044\011\122\012\107" +
    "\013\120\014\104\015\116\016\124\017\111\020\121\021" +
    "\117\022\112\023\115\024\110\025\106\030\u0115\035\123" +
    "\036\114\037\105\001\002\000\030\002\uffda\007\uffda\040" +
    "\uffda\054\uffda\055\uffda\056\uffda\061\uffda\062\uffda\063\uffda" +
    "\064\uffda\066\uffda\001\002\000\044\011\122\012\107\013" +
    "\120\014\104\015\116\016\124\017\111\020\121\021\117" +
    "\022\112\023\115\024\110\025\106\032\u0117\035\123\036" +
    "\114\037\105\001\002\000\014\010\u0119\011\u011a\012\u011b" +
    "\013\u0118\014\u011c\001\002\000\004\010\u0128\001\002\000" +
    "\032\004\076\012\073\026\064\066\074\067\070\075\101" +
    "\076\062\077\067\101\065\102\077\116\100\120\063\001" +
    "\002\000\004\010\u0123\001\002\000\004\010\u0120\001\002" +
    "\000\004\010\u011d\001\002\000\032\004\076\012\073\026" +
    "\064\066\074\067\070\075\101\076\062\077\067\101\065" +
    "\102\077\116\100\120\063\001\002\000\044\011\122\012" +
    "\107\013\120\014\104\015\116\016\124\017\111\020\121" +
    "\021\117\022\112\023\115\024\110\025\106\030\u011f\035" +
    "\123\036\114\037\105\001\002\000\030\002\uffd3\007\uffd3" +
    "\040\uffd3\054\uffd3\055\uffd3\056\uffd3\061\uffd3\062\uffd3\063" +
    "\uffd3\064\uffd3\066\uffd3\001\002\000\032\004\076\012\073" +
    "\026\064\066\074\067\070\075\101\076\062\077\067\101" +
    "\065\102\077\116\100\120\063\001\002\000\044\011\122" +
    "\012\107\013\120\014\104\015\116\016\124\017\111\020" +
    "\121\021\117\022\112\023\115\024\110\025\106\030\u0122" +
    "\035\123\036\114\037\105\001\002\000\030\002\uffd5\007" +
    "\uffd5\040\uffd5\054\uffd5\055\uffd5\056\uffd5\061\uffd5\062\uffd5" +
    "\063\uffd5\064\uffd5\066\uffd5\001\002\000\032\004\076\012" +
    "\073\026\064\066\074\067\070\075\101\076\062\077\067" +
    "\101\065\102\077\116\100\120\063\001\002\000\044\011" +
    "\122\012\107\013\120\014\104\015\116\016\124\017\111" +
    "\020\121\021\117\022\112\023\115\024\110\025\106\030" +
    "\u0125\035\123\036\114\037\105\001\002\000\030\002\uffd6" +
    "\007\uffd6\040\uffd6\054\uffd6\055\uffd6\056\uffd6\061\uffd6\062" +
    "\uffd6\063\uffd6\064\uffd6\066\uffd6\001\002\000\044\011\122" +
    "\012\107\013\120\014\104\015\116\016\124\017\111\020" +
    "\121\021\117\022\112\023\115\024\110\025\106\030\u0127" +
    "\035\123\036\114\037\105\001\002\000\030\002\uffd7\007" +
    "\uffd7\040\uffd7\054\uffd7\055\uffd7\056\uffd7\061\uffd7\062\uffd7" +
    "\063\uffd7\064\uffd7\066\uffd7\001\002\000\032\004\076\012" +
    "\073\026\064\066\074\067\070\075\101\076\062\077\067" +
    "\101\065\102\077\116\100\120\063\001\002\000\044\011" +
    "\122\012\107\013\120\014\104\015\116\016\124\017\111" +
    "\020\121\021\117\022\112\023\115\024\110\025\106\030" +
    "\u012a\035\123\036\114\037\105\001\002\000\030\002\uffd4" +
    "\007\uffd4\040\uffd4\054\uffd4\055\uffd4\056\uffd4\061\uffd4\062" +
    "\uffd4\063\uffd4\064\uffd4\066\uffd4\001\002\000\030\002\uffd2" +
    "\007\uffd2\040\uffd2\054\uffd2\055\uffd2\056\uffd2\061\uffd2\062" +
    "\uffd2\063\uffd2\064\uffd2\066\uffd2\001\002\000\004\004\u015e" +
    "\001\002\000\004\004\u015a\001\002\000\004\004\u0156\001" +
    "\002\000\004\004\u0152\001\002\000\004\004\u014c\001\002" +
    "\000\004\004\u0148\001\002\000\004\004\u0144\001\002\000" +
    "\004\004\u0141\001\002\000\004\004\u013d\001\002\000\004" +
    "\004\u0136\001\002\000\006\005\u0137\066\u0138\001\002\000" +
    "\004\030\u013c\001\002\000\004\004\206\001\002\000\004" +
    "\005\u013a\001\002\000\004\030\u013b\001\002\000\030\002" +
    "\uffb2\007\uffb2\040\uffb2\054\uffb2\055\uffb2\056\uffb2\061\uffb2" +
    "\062\uffb2\063\uffb2\064\uffb2\066\uffb2\001\002\000\030\002" +
    "\uffb1\007\uffb1\040\uffb1\054\uffb1\055\uffb1\056\uffb1\061\uffb1" +
    "\062\uffb1\063\uffb1\064\uffb1\066\uffb1\001\002\000\034\004" +
    "\076\005\uff77\012\073\026\064\066\074\067\070\075\101" +
    "\076\062\077\067\101\065\102\077\116\100\120\063\001" +
    "\002\000\004\005\u013f\001\002\000\004\030\u0140\001\002" +
    "\000\030\002\uffb5\007\uffb5\040\uffb5\054\uffb5\055\uffb5\056" +
    "\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\066\uffb5\001\002" +
    "\000\004\005\u0142\001\002\000\004\030\u0143\001\002\000" +
    "\030\002\uffae\007\uffae\040\uffae\054\uffae\055\uffae\056\uffae" +
    "\061\uffae\062\uffae\063\uffae\064\uffae\066\uffae\001\002\000" +
    "\034\004\076\005\uff77\012\073\026\064\066\074\067\070" +
    "\075\101\076\062\077\067\101\065\102\077\116\100\120" +
    "\063\001\002\000\004\005\u0146\001\002\000\004\030\u0147" +
    "\001\002\000\030\002\uffb9\007\uffb9\040\uffb9\054\uffb9\055" +
    "\uffb9\056\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\066\uffb9" +
    "\001\002\000\004\066\u0138\001\002\000\004\005\u014a\001" +
    "\002\000\004\030\u014b\001\002\000\030\002\uffb3\007\uffb3" +
    "\040\uffb3\054\uffb3\055\uffb3\056\uffb3\061\uffb3\062\uffb3\063" +
    "\uffb3\064\uffb3\066\uffb3\001\002\000\006\005\u014d\066\u0138" +
    "\001\002\000\004\030\u0151\001\002\000\004\005\u014f\001" +
    "\002\000\004\030\u0150\001\002\000\030\002\uffb0\007\uffb0" +
    "\040\uffb0\054\uffb0\055\uffb0\056\uffb0\061\uffb0\062\uffb0\063" +
    "\uffb0\064\uffb0\066\uffb0\001\002\000\030\002\uffaf\007\uffaf" +
    "\040\uffaf\054\uffaf\055\uffaf\056\uffaf\061\uffaf\062\uffaf\063" +
    "\uffaf\064\uffaf\066\uffaf\001\002\000\034\004\076\005\uff77" +
    "\012\073\026\064\066\074\067\070\075\101\076\062\077" +
    "\067\101\065\102\077\116\100\120\063\001\002\000\004" +
    "\005\u0154\001\002\000\004\030\u0155\001\002\000\030\002" +
    "\uffb4\007\uffb4\040\uffb4\054\uffb4\055\uffb4\056\uffb4\061\uffb4" +
    "\062\uffb4\063\uffb4\064\uffb4\066\uffb4\001\002\000\034\004" +
    "\076\005\uff77\012\073\026\064\066\074\067\070\075\101" +
    "\076\062\077\067\101\065\102\077\116\100\120\063\001" +
    "\002\000\004\005\u0158\001\002\000\004\030\u0159\001\002" +
    "\000\030\002\uffb6\007\uffb6\040\uffb6\054\uffb6\055\uffb6\056" +
    "\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\066\uffb6\001\002" +
    "\000\034\004\076\005\uff77\012\073\026\064\066\074\067" +
    "\070\075\101\076\062\077\067\101\065\102\077\116\100" +
    "\120\063\001\002\000\004\005\u015c\001\002\000\004\030" +
    "\u015d\001\002\000\030\002\uffb7\007\uffb7\040\uffb7\054\uffb7" +
    "\055\uffb7\056\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\066" +
    "\uffb7\001\002\000\034\004\076\005\uff77\012\073\026\064" +
    "\066\074\067\070\075\101\076\062\077\067\101\065\102" +
    "\077\116\100\120\063\001\002\000\004\005\u0160\001\002" +
    "\000\004\030\u0161\001\002\000\030\002\uffb8\007\uffb8\040" +
    "\uffb8\054\uffb8\055\uffb8\056\uffb8\061\uffb8\062\uffb8\063\uffb8" +
    "\064\uffb8\066\uffb8\001\002\000\032\004\076\012\073\026" +
    "\064\066\074\067\070\075\101\076\062\077\067\101\065" +
    "\102\077\116\100\120\063\001\002\000\044\011\122\012" +
    "\107\013\120\014\104\015\116\016\124\017\111\020\121" +
    "\021\117\022\112\023\115\024\110\025\106\030\u0164\035" +
    "\123\036\114\037\105\001\002\000\030\002\uffd8\007\uffd8" +
    "\040\uffd8\054\uffd8\055\uffd8\056\uffd8\061\uffd8\062\uffd8\063" +
    "\uffd8\064\uffd8\066\uffd8\001\002\000\030\002\uffec\007\uffec" +
    "\040\uffec\054\uffec\055\uffec\056\uffec\061\uffec\062\uffec\063" +
    "\uffec\064\uffec\066\uffec\001\002\000\032\004\076\012\073" +
    "\026\064\066\074\067\070\075\101\076\062\077\067\101" +
    "\065\102\077\116\100\120\063\001\002\000\044\005\u0168" +
    "\011\122\012\107\013\120\014\104\015\116\016\124\017" +
    "\111\020\121\021\117\022\112\023\115\024\110\025\106" +
    "\035\123\036\114\037\105\001\002\000\004\030\u0169\001" +
    "\002\000\030\002\uffcd\007\uffcd\040\uffcd\054\uffcd\055\uffcd" +
    "\056\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\066\uffcd\001" +
    "\002\000\030\002\uffeb\007\uffeb\040\uffeb\054\uffeb\055\uffeb" +
    "\056\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\066\uffeb\001" +
    "\002\000\032\004\076\012\073\026\064\066\074\067\070" +
    "\075\101\076\062\077\067\101\065\102\077\116\100\120" +
    "\063\001\002\000\044\005\u016d\011\122\012\107\013\120" +
    "\014\104\015\116\016\124\017\111\020\121\021\117\022" +
    "\112\023\115\024\110\025\106\035\123\036\114\037\105" +
    "\001\002\000\004\006\u016e\001\002\000\004\060\u016f\001" +
    "\002\000\032\004\076\012\073\026\064\066\074\067\070" +
    "\075\101\076\062\077\067\101\065\102\077\116\100\120" +
    "\063\001\002\000\010\007\u0173\060\u016f\065\u0174\001\002" +
    "\000\010\007\uffc7\060\uffc7\065\uffc7\001\002\000\004\007" +
    "\u017a\001\002\000\030\002\uffc9\007\uffc9\040\uffc9\054\uffc9" +
    "\055\uffc9\056\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\066" +
    "\uffc9\001\002\000\004\034\u0176\001\002\000\010\007\uffc8" +
    "\060\uffc8\065\uffc8\001\002\000\004\006\u0177\001\002\000" +
    "\020\040\027\054\013\056\031\061\024\062\017\063\006" +
    "\066\016\001\002\000\022\007\u0179\040\027\054\013\056" +
    "\031\061\024\062\017\063\006\066\016\001\002\000\004" +
    "\007\uffc5\001\002\000\030\002\uffca\007\uffca\040\uffca\054" +
    "\uffca\055\uffca\056\uffca\061\uffca\062\uffca\063\uffca\064\uffca" +
    "\066\uffca\001\002\000\044\011\122\012\107\013\120\014" +
    "\104\015\116\016\124\017\111\020\121\021\117\022\112" +
    "\023\115\024\110\025\106\034\u017c\035\123\036\114\037" +
    "\105\001\002\000\004\006\u017d\001\002\000\020\040\027" +
    "\054\013\056\031\061\024\062\017\063\006\066\016\001" +
    "\002\000\022\007\u017f\040\027\054\013\056\031\061\024" +
    "\062\017\063\006\066\016\001\002\000\010\007\uffc6\060" +
    "\uffc6\065\uffc6\001\002\000\026\002\uffff\040\uffff\054\uffff" +
    "\055\uffff\056\uffff\061\uffff\062\uffff\063\uffff\064\uffff\066" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u017e\000\040\002\017\003\003\004\010\005\007\011" +
    "\014\012\021\013\013\014\032\016\022\021\024\026\020" +
    "\027\004\031\006\033\025\043\011\001\001\000\034\004" +
    "\u017f\005\007\011\014\012\021\013\013\014\032\016\022" +
    "\021\024\026\020\027\004\031\006\033\025\043\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\007\376\011\070\015\074\042\071\043" +
    "\065\050\101\051\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\334" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\005\007\011\014\012\051\013\013" +
    "\014\032\016\022\021\024\026\020\027\004\030\050\031" +
    "\006\043\011\001\001\000\030\005\007\011\014\012\052" +
    "\013\013\014\032\016\022\021\024\026\020\027\004\031" +
    "\006\043\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\005\007\011\014\012\051\013" +
    "\013\014\032\016\022\021\024\026\020\027\004\030\055" +
    "\031\006\043\011\001\001\000\030\005\007\011\014\012" +
    "\052\013\013\014\032\016\022\021\024\026\020\027\004" +
    "\031\006\043\011\001\001\000\002\001\001\000\020\007" +
    "\102\011\070\015\074\042\071\043\065\050\101\051\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\007\321\011\070\015\074\042\071\043\065" +
    "\050\101\051\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\007\320\011\070\015\074\042" +
    "\071\043\065\050\101\051\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\007\202\011\070\015\074\042" +
    "\071\043\065\050\101\051\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\007\174\011\070\015\074\042\071" +
    "\043\065\050\101\051\060\001\001\000\002\001\001\000" +
    "\020\007\173\011\070\015\074\042\071\043\065\050\101" +
    "\051\060\001\001\000\020\007\172\011\070\015\074\042" +
    "\071\043\065\050\101\051\060\001\001\000\020\007\171" +
    "\011\070\015\074\042\071\043\065\050\101\051\060\001" +
    "\001\000\020\007\170\011\070\015\074\042\071\043\065" +
    "\050\101\051\060\001\001\000\020\007\167\011\070\015" +
    "\074\042\071\043\065\050\101\051\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\007\135\011\070\015" +
    "\074\042\071\043\065\050\101\051\060\001\001\000\020" +
    "\007\134\011\070\015\074\042\071\043\065\050\101\051" +
    "\060\001\001\000\020\007\133\011\070\015\074\042\071" +
    "\043\065\050\101\051\060\001\001\000\020\007\132\011" +
    "\070\015\074\042\071\043\065\050\101\051\060\001\001" +
    "\000\020\007\131\011\070\015\074\042\071\043\065\050" +
    "\101\051\060\001\001\000\020\007\130\011\070\015\074" +
    "\042\071\043\065\050\101\051\060\001\001\000\020\007" +
    "\125\011\070\015\074\042\071\043\065\050\101\051\060" +
    "\001\001\000\020\007\124\011\070\015\074\042\071\043" +
    "\065\050\101\051\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\007\127\011\070\015\074\042\071\043" +
    "\065\050\101\051\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\005\007" +
    "\011\014\012\051\013\013\014\032\016\022\021\024\026" +
    "\020\027\004\030\137\031\006\043\011\001\001\000\030" +
    "\005\007\011\014\012\052\013\013\014\032\016\022\021" +
    "\024\026\020\027\004\031\006\043\011\001\001\000\006" +
    "\017\141\020\143\001\001\000\004\020\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\005\007\011\014\012\051\013\013\014\032\016\022\021" +
    "\024\026\020\027\004\030\146\031\006\043\011\001\001" +
    "\000\030\005\007\011\014\012\052\013\013\014\032\016" +
    "\022\021\024\026\020\027\004\031\006\043\011\001\001" +
    "\000\002\001\001\000\020\007\151\011\070\015\074\042" +
    "\071\043\065\050\101\051\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\005\007\011\014\012\051\013" +
    "\013\014\032\016\022\021\024\026\020\027\004\030\154" +
    "\031\006\043\011\001\001\000\030\005\007\011\014\012" +
    "\052\013\013\014\032\016\022\021\024\026\020\027\004" +
    "\031\006\043\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\007\162" +
    "\011\070\015\074\042\071\043\065\050\101\051\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\005\007" +
    "\011\014\012\051\013\013\014\032\016\022\021\024\026" +
    "\020\027\004\030\165\031\006\043\011\001\001\000\030" +
    "\005\007\011\014\012\052\013\013\014\032\016\022\021" +
    "\024\026\020\027\004\031\006\043\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\037\235\044\234\001\001\000\024\007" +
    "\213\010\212\011\070\015\074\034\211\042\071\043\065" +
    "\050\101\051\060\001\001\000\020\007\207\011\070\015" +
    "\074\042\071\043\065\050\101\051\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\007\217" +
    "\011\070\015\074\042\071\043\065\050\101\051\060\001" +
    "\001\000\006\046\221\047\222\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\007\272\011" +
    "\070\015\074\042\071\043\065\050\101\051\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\275\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\007\303\011" +
    "\070\015\074\042\071\043\065\050\101\051\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\007\314\011\070\015" +
    "\074\042\071\043\065\050\101\051\060\001\001\000\002" +
    "\001\001\000\020\007\316\011\070\015\074\042\071\043" +
    "\065\050\101\051\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\326" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\007\345\011" +
    "\070\015\074\042\071\043\065\045\342\050\101\051\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\007\351" +
    "\011\070\015\074\035\350\036\347\042\071\043\065\050" +
    "\101\051\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\007\353\011\070\015\074\042\071\043\065\050\101" +
    "\051\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\037\235\044\234\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\007\213\011\070\015" +
    "\074\034\362\042\071\043\065\050\101\051\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\007\213\011" +
    "\070\015\074\034\365\042\071\043\065\050\101\051\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\007\213\011\070\015\074\034\371\042\071" +
    "\043\065\050\101\051\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\037\235\044\234\001\001\000\002\001\001" +
    "\000\020\007\u0115\011\070\015\074\042\071\043\065\050" +
    "\101\051\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\007\u0109\011" +
    "\070\015\074\042\071\043\065\050\101\051\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\007\u010c\011" +
    "\070\015\074\042\071\043\065\050\101\051\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\007\u010f\011" +
    "\070\015\074\042\071\043\065\050\101\051\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\007\u0113\011\070\015\074\042\071\043\065\050\101" +
    "\051\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\007\u0125\011\070\015\074\042\071\043\065\050\101\051" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\007\u011d\011\070\015\074\042\071\043" +
    "\065\050\101\051\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\007\u0120\011\070\015\074\042\071\043" +
    "\065\050\101\051\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\007\u0123\011\070\015\074\042\071\043" +
    "\065\050\101\051\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\007" +
    "\u0128\011\070\015\074\042\071\043\065\050\101\051\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\u0138\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\007\213\010\u013d\011" +
    "\070\015\074\034\211\042\071\043\065\050\101\051\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\007\213\010\u0144\011\070\015\074\034\211\042" +
    "\071\043\065\050\101\051\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\u0148\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\u014d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\007\213\010\u0152\011\070\015\074\034\211\042" +
    "\071\043\065\050\101\051\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\007\213\010" +
    "\u0156\011\070\015\074\034\211\042\071\043\065\050\101" +
    "\051\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\007\213\010\u015a\011\070\015\074" +
    "\034\211\042\071\043\065\050\101\051\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\007\213\010\u015e\011\070\015\074\034\211\042\071\043" +
    "\065\050\101\051\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\007\u0162\011\070\015" +
    "\074\042\071\043\065\050\101\051\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\007" +
    "\u0166\011\070\015\074\042\071\043\065\050\101\051\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\007\u016b\011\070\015\074" +
    "\042\071\043\065\050\101\051\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\u016f\023\u0170\001\001" +
    "\000\020\007\u017a\011\070\015\074\042\071\043\065\050" +
    "\101\051\060\001\001\000\006\023\u0174\024\u0171\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\005\007\011\014\012\051\013\013\014\032\016\022\021" +
    "\024\026\020\027\004\030\u0177\031\006\043\011\001\001" +
    "\000\030\005\007\011\014\012\052\013\013\014\032\016" +
    "\022\021\024\026\020\027\004\031\006\043\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\005\007\011\014\012\051\013\013" +
    "\014\032\016\022\021\024\026\020\027\004\030\u017d\031" +
    "\006\043\011\001\001\000\030\005\007\011\014\012\052" +
    "\013\013\014\032\016\022\021\024\026\020\027\004\031" +
    "\006\043\011\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintacticoFS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintacticoFS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintacticoFS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public AST root;
    public static int index=0;
    public void syntax_error(Symbol s){
        System.out.println("Error sintactico en la linea "+(s.left+1)+" Columna "+s.right+". Identificador "+s.value+" no reconocido"); 
        //id,archivo,tipo,descripcion,acciones,linea,columna,aux
         Errores errores=new Errores("SINTACTICO","Error en el elemento "+s.value.toString(),s.left+1,s.right+1);
         proyecto1compi2_201213580.Proyecto1Compi2_201213580.errores_fs.add(errores);
    }
    /**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        Errores errores=new Errores("SINTACTICO","Error en el elemento "+s.value.toString(),s.left+1,s.right+1);
        proyecto1compi2_201213580.Proyecto1Compi2_201213580.errores_fs.add(errores);
        javax.swing.JOptionPane.showMessageDialog(null,"Error Sintactico en la linea "+(s.right+1)+"Columna "+s.left+". Identificador"+s.value+" no reconocido.");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintacticoFS$actions {

  

  private final sintacticoFS parser;

  /** Constructor */
  CUP$sintacticoFS$actions(sintacticoFS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintacticoFS$do_action(
    int                        CUP$sintacticoFS$act_num,
    java_cup.runtime.lr_parser CUP$sintacticoFS$parser,
    java.util.Stack            CUP$sintacticoFS$stack,
    int                        CUP$sintacticoFS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintacticoFS$result;

      /* select the action based on the action number */
      switch (CUP$sintacticoFS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // LISTADO_NUEVO ::= valor_cadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                RESULT=a.toString();
                               
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTADO_NUEVO",36, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // LISTADO_NUEVO ::= LISTADO_NUEVO coma valor_cadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                        RESULT=a;
                                                        RESULT+=","+b.toString();
                                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTADO_NUEVO",36, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // LISTADO_NUEVOS ::= LISTADO_NUEVO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTADO_NUEVOS",37, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // LISTADO_NUEVOS ::= 
            {
              String RESULT =null;
		RESULT="";
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTADO_NUEVOS",37, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // LISTA_PARAMETRO ::= LISTA_PARAMETRO coma corchea LISTADO_NUEVOS corchec 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                            RESULT=a;
                                                                            RESULT.add(new Aritmetica(b.toString(),Type.PrimitiveType.STRING,aleft+1,aright+1));
                                                                          
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETRO",26, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // LISTA_PARAMETRO ::= EXPRESION 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                RESULT=new LinkedList<>();
                                RESULT.add(a);
                               
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETRO",26, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // LISTA_PARAMETRO ::= LISTA_PARAMETRO coma EXPRESION 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                        RESULT=a;
                                                        RESULT.add(b);
                                                     
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETRO",26, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // LISTA_PARAMETROS ::= LISTA_PARAMETRO 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                        RESULT=a;
                                     
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // LISTA_PARAMETROS ::= 
            {
              LinkedList<NodoAST> RESULT =null;
		
                        RESULT=new LinkedList<>();
                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // LLAMADA_FUNCION ::= valor_id parena LISTA_PARAMETROS parenc 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                RESULT=new Llamada_Funcion(Type.PrimitiveType.FUNCION,a.toString().toLowerCase(),b,aleft+1,aright+1);
                                                              
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",7, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // TERNARIO ::= EXPRESION signoi EXPRESION dospuntos EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=new Ternario(a,b,c,aleft+1,aright+1);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TERNARIO",11, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // LLAMADA_ARREGLO ::= valor_id corchea EXPRESION corchec 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                        RESULT=new AccesoArreglo(a.toString().toLowerCase(),b,aleft+1,aright+1);
                                                     
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LLAMADA_ARREGLO",32, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SENTENCIAS_OBTENER ::= valor_id pto obtenerpornombre parena EXPRESION coma EXPRESION parenc 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                                    RESULT=new Obtener(a,Type.PrimitiveType.PORNOMBRE,b,c);
                                                                                                
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_OBTENER",38, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SENTENCIAS_OBTENER ::= valor_id pto obtenerporetiqueta parena EXPRESION parenc 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                    RESULT=new Obtener(a,Type.PrimitiveType.PORETIQUETA,b);
                                                                                 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_OBTENER",38, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SENTENCIAS_OBTENER ::= valor_id pto obtenerporid parena EXPRESION parenc 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                            RESULT=new Obtener(a,Type.PrimitiveType.PORID,b);
                                                                           
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_OBTENER",38, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SENTENCIAS_ARRAYDESDE ::= leergxml parena valor_path3 parenc 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                RESULT=new LeerGXML(b.toString(),bleft+1,bright+1);
                                                             
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_ARRAYDESDE",39, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SENTENCIAS_ARRAYDESDE ::= arraydesdearchivo parena valor_path5 parenc 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                            RESULT=new arrayDesde(b,Type.PrimitiveType.GDATO,aleft,aright);
                                                                        
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_ARRAYDESDE",39, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SENTENCIAS_ARRAYDESDE ::= arraydesdearchivo parena valor_path4 parenc 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                            RESULT=new arrayDesde(b,Type.PrimitiveType.GDATO,aleft,aright);
                                                                        
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_ARRAYDESDE",39, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXPRESION ::= SENTENCIAS_ARRAYDESDE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXPRESION ::= valor_id pto valor_id 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                        RESULT=new AccesoObjetos(a.toLowerCase(),b.toLowerCase(),aleft+1,aright+1);
                                      
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXPRESION ::= EXPRESION incremental 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                        RESULT=new Aritmetica(a,true,Operador.AUMENTO,aleft+1,aright+1);
                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXPRESION ::= EXPRESION decremental 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                        RESULT=new Aritmetica(a,true,Operador.AUMENTO,aleft+1,aright+1);
                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXPRESION ::= LLAMADA_ARREGLO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXPRESION ::= valor_nulo 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                            RESULT=new Aritmetica(a.toString().toLowerCase(),Type.PrimitiveType.NULO,aleft+1,aright+1);
                         
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXPRESION ::= TERNARIO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXPRESION ::= LLAMADA_FUNCION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXPRESION ::= SENTENCIAS_OBTENER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPRESION ::= SENTENCIAS_ARREGLOS 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Funciones_Arreglos a = (Funciones_Arreglos)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPRESION ::= valor_falso 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                            RESULT=new Aritmetica("false",Type.PrimitiveType.BOOLEAN,aleft+1,aright+1);
                          
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRESION ::= valor_verdadero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                RESULT=new Aritmetica("true",Type.PrimitiveType.BOOLEAN,aleft+1,aright+1);
                              
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRESION ::= valor_cadena 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                            RESULT=new Aritmetica(a.toString().toLowerCase().replaceAll("\"",""),Type.PrimitiveType.STRING,aleft+1,aright+1);
                           
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESION ::= valor_numero_decimal 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                    RESULT=new Aritmetica(a.toString().toLowerCase(),Type.PrimitiveType.DOUBLE,aleft+1,aright+1);
                                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESION ::= valor_numero_completo 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                        RESULT=new Aritmetica(a.toString().toLowerCase(),Type.PrimitiveType.INTEGER,aleft+1,aright+1);
                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRESION ::= valor_id 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                        RESULT=new Aritmetica(a.toString().toLowerCase(),Type.PrimitiveType.ID,aleft+1,aright+1);
                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESION ::= parena EXPRESION parenc 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                        RESULT=a;
                                      
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESION ::= not EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                RESULT=new Logica(a,true,Operador.NOT,aleft+1,aright+1);
                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESION ::= EXPRESION or EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Logica(a,b,Operador.OR,aleft+1,aright+1);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESION ::= EXPRESION and EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Logica(a,b,Operador.AND,aleft+1,aright+1);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION ::= EXPRESION diferente EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Relacional(a,b,Operador.DIFERENTE,aleft+1,aright+1);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION ::= EXPRESION igualigual EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Relacional(a,b,Operador.IGUALIGUAL,aleft+1,aright+1);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESION ::= EXPRESION menorigualq EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Relacional(a,b,Operador.MENORIGUALQ,aleft+1,aright+1);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESION ::= EXPRESION mayorigualq EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Relacional(a,b,Operador.MAYORIGUALQ,aleft+1,aright+1);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESION ::= EXPRESION menorq EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Relacional(a,b,Operador.MENORQ,aleft+1,aright+1);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESION ::= EXPRESION mayorq EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Relacional(a,b,Operador.MAYORQ,aleft+1,aright+1);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESION ::= EXPRESION pot EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Aritmetica(a,b,Operador.POTENCIA,aleft+1,aright+1);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION ::= EXPRESION div EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Aritmetica(a,b,Operador.DIVISION,aleft+1,aright+1);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= EXPRESION por EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Aritmetica(a,b,Operador.MULTIPLICACION,aleft+1,aright+1);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= EXPRESION menos EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Aritmetica(a,b,Operador.RESTA,aleft+1,aright+1);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= EXPRESION mas EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Aritmetica(a,b,Operador.SUMA,aleft+1,aright+1);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= menos EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Aritmetica(a,true,Operador.UNARIO,aleft+1,aright+1);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LISTA_ID ::= valor_id 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                        RESULT=new LinkedList<NodoAST>();
                        Declaracion declaracion=new Declaracion(Type.PrimitiveType.NULL,a.toString().toLowerCase(),null,false,aleft+1,aright+1);
                        RESULT.add(declaracion);
                      
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_ID",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LISTA_ID ::= LISTA_ID coma valor_id 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                       RESULT=a;
                                       Declaracion declaracion=new Declaracion(Type.PrimitiveType.NULL,b.toString().toLowerCase(),null,false,aleft+1,aright+1);
                                       RESULT.add(declaracion);
                                      
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_ID",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LISTA_ARRAY ::= EXPRESION 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                            RESULT=new LinkedList<>();
                            RESULT.add(a);
                          
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_ARRAY",27, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LISTA_ARRAY ::= LISTA_ARRAY coma EXPRESION 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                RESULT=a;
                                                RESULT.add(b);
                                             
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_ARRAY",27, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ELEMENTOS_ARRAY ::= LISTA_ARRAY 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_ARRAY",28, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ELEMENTOS_ARRAY ::= 
            {
              LinkedList<Expresion> RESULT =null;
		RESULT=new LinkedList<>();
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_ARRAY",28, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ELEMENTOS_OBJETO ::= valor_id dospuntos EXPRESION 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_OBJETO",30, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ELEMENTOS_OBJETO ::= ELEMENTOS_OBJETO coma valor_id dospuntos EXPRESION 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_OBJETO",30, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ELEMENTO_PATH ::= valor_path2 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                RESULT=a.toString();
                               
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ELEMENTO_PATH",31, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ELEMENTO_PATH ::= valor_path 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                RESULT=a.toString();
                             
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ELEMENTO_PATH",31, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION_UI ::= valor_id pto crearboton parena LISTA_PARAMETRO parenc 
            {
              Declaracion_UI RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                            RESULT=new Declaracion_UI(Type.PrimitiveType.BOTON,b,aleft+1,aright+1);
                                                                            RESULT.setId_padre(a.toString());
                                                                         
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION_UI",35, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION_UI ::= valor_id pto crearcontenedor parena LISTA_PARAMETRO parenc 
            {
              Declaracion_UI RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                    RESULT=new Declaracion_UI(Type.PrimitiveType.CONTENEDOR,b,aleft+1,aright+1);
                                                                                    RESULT.setId_padre(a.toString());
                                                                                
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION_UI",35, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION_UI ::= crearventana parena LISTA_PARAMETRO parenc 
            {
              Declaracion_UI RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                RESULT=new Declaracion_UI(Type.PrimitiveType.VENTANA,b,aleft+1,aright+1);
                                                             
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION_UI",35, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARACION_VARIABLES ::= valor_id pto arraydesdearchivo parena parenc pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		
                                                                            RESULT=new LinkedList<>();
                                                                            Eventos_Botones eventos=new Eventos_Botones(a.toString(),"crear",aleft+1,aright+1);
                                                                            RESULT.add(eventos);
                                                                         
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARACION_VARIABLES ::= valor_id pto alcerrar parena parenc pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		
                                                                    RESULT=new LinkedList<>();
                                                                    Eventos_Ventanas eventos=new Eventos_Ventanas(a.toString(),null,"cerrar",aleft+1,aright+1);
                                                                    RESULT.add(eventos);
                                                                  
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION_VARIABLES ::= valor_id pto alcerrar parena LLAMADA_FUNCION parenc pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		
                                                                                        RESULT=new LinkedList<>();
                                                                                        Eventos_Ventanas eventos=new Eventos_Ventanas(a.toString(),b,"cerrar",aleft+1,aright+1);
                                                                                        RESULT.add(eventos);
                                                                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARACION_VARIABLES ::= valor_id pto alcargar parena parenc pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		
                                                                    RESULT=new LinkedList<>();
                                                                    Eventos_Ventanas eventos=new Eventos_Ventanas(a.toString(),null,"cargar",aleft+1,aright+1);
                                                                    RESULT.add(eventos);
                                                                  
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARACION_VARIABLES ::= valor_id pto alcargar parena LLAMADA_FUNCION parenc pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		
                                                                                        RESULT=new LinkedList<>();
                                                                                        Eventos_Ventanas eventos=new Eventos_Ventanas(a.toString(),b,"cargar",aleft+1,aright+1);
                                                                                        RESULT.add(eventos);
                                                                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION_VARIABLES ::= valor_id pto alclic parena LLAMADA_FUNCION parenc pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		
                                                                                    RESULT=new LinkedList<>();
                                                                                    Eventos_Botones eventos=new Eventos_Botones(a.toString(),b,aleft+1,aright+1);
                                                                                    RESULT.add(eventos);
                                                                                  
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION_VARIABLES ::= valor_id pto crearimagen parena LISTA_PARAMETROS parenc pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		
                                                                                        RESULT=new LinkedList<>();
                                                                                        Declaracion_UI decla=new Declaracion_UI(Type.PrimitiveType.IMAGEN,b,aleft+1,aright+1);
                                                                                        decla.setId_padre(a.toString());
                                                                                        RESULT.add(decla);
                                                                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION_VARIABLES ::= valor_id pto creardesplegable parena LISTA_PARAMETROS parenc pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		
                                                                                                    RESULT=new LinkedList<>();
                                                                                                    Declaracion_UI decla=new Declaracion_UI(Type.PrimitiveType.DESPLEGABLE,b,aleft+1,aright+1);
                                                                                                    decla.setId_padre(a.toString());
                                                                                                    decla.setId("desplegable");
                                                                                                    RESULT.add(decla);
                                                                                                 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION_VARIABLES ::= valor_id pto crearcontrolnumerico parena LISTA_PARAMETROS parenc pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		
                                                                                                    RESULT=new LinkedList<>();
                                                                                                    Declaracion_UI decla=new Declaracion_UI(Type.PrimitiveType.NUMERICO,b,aleft+1,aright+1);
                                                                                                    decla.setId_padre(a.toString());
                                                                                                    decla.setId("numerico");
                                                                                                    RESULT.add(decla);
                                                                                                 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION_VARIABLES ::= valor_id pto crearcajatexto parena LISTA_PARAMETROS parenc pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		
                                                                                            RESULT=new LinkedList<>();
                                                                                            Declaracion_UI decla=new Declaracion_UI(Type.PrimitiveType.CAJATEXTO,b,aleft+1,aright+1);
                                                                                            decla.setId_padre(a.toString());
                                                                                            decla.setId("cajatexto");
                                                                                            RESULT.add(decla);
                                                                                           
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION_VARIABLES ::= valor_id pto crearareatexto parena LISTA_PARAMETROS parenc pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		
                                                                                            RESULT=new LinkedList<>();
                                                                                            Declaracion_UI decla=new Declaracion_UI(Type.PrimitiveType.AREATEXTO,b,aleft+1,aright+1);
                                                                                            decla.setId_padre(a.toString());
                                                                                            decla.setId("areatexto");
                                                                                            RESULT.add(decla);
                                                                                           
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION_VARIABLES ::= valor_id pto creartexto parena LISTA_PARAMETROS parenc pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		
                                                                                        RESULT=new LinkedList<>();
                                                                                        Declaracion_UI decla=new Declaracion_UI(Type.PrimitiveType.TEXTO,b,aleft+1,aright+1);
                                                                                        decla.setId_padre(a.toString());
                                                                                        decla.setId("texto");
                                                                                        RESULT.add(decla);
                                                                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION_VARIABLES ::= var LISTA_ID igual EXPRESION_UI pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Declaracion_UI b = (Declaracion_UI)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                RESULT=new LinkedList<>();
                                                                int indice=a.size()-1;
                                                                Declaracion ultima=(Declaracion)a.get(indice);
                                                                b.setId(ultima.getId());
                                                                RESULT.add(b);
                                                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION_VARIABLES ::= var LISTA_ID igual corchea ELEMENTOS_ARRAY corchec pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		
                                                                                int indice=a.size()-1;
                                                                                Declaracion ultima=(Declaracion)a.get(indice);
                                                                                a.remove(indice);
                                                                                Declaracion_Arreglo declaracion_arreglo=new Declaracion_Arreglo(Type.PrimitiveType.NULL,ultima.getId(),null,true,b,aleft+1,aright+1);
                                                                                a.add(declaracion_arreglo);
                                                                                RESULT=a;
                                                                               
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION_VARIABLES ::= var LISTA_ID igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                int indice=a.size()-1;
                                                                Declaracion ultima=(Declaracion)a.get(indice);
                                                                a.remove(indice);
                                                                ultima.setIntValue(b);
                                                                ultima.setInicializado(true);
                                                                a.add(ultima);
                                                                RESULT=a;
                                                             
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION_VARIABLES ::= var LISTA_ID pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                            RESULT=a;
                                           
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_SINOSI ::= sino si parena EXPRESION parenc llavea SENTENCIAS_INTERNAS llavec 
            {
              LinkedList<SubIf> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                            RESULT=new LinkedList<SubIf>();
                                                                                            RESULT.add(new SubIf(a,b,false,aleft+1,aright+1));
                                                                                         
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SINOSI",13, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA_SINOSI ::= SENTENCIA_SINOSI sino si parena EXPRESION parenc llavea SENTENCIAS_INTERNAS llavec 
            {
              LinkedList<SubIf> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)).right;
		LinkedList<SubIf> a = (LinkedList<SubIf>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                                                RESULT=a;
                                                                                                                RESULT.add(new SubIf(b,c,false,aleft+1,aright+1));
                                                                                                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SINOSI",13, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA_SINO ::= sino llavea SENTENCIAS_INTERNAS llavec 
            {
              SubIf RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                            RESULT=new SubIf(null,a,true,aleft+1,aright+1);
                                                          
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SINO",14, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIA_SI ::= si parena EXPRESION parenc llavea SENTENCIAS_INTERNAS llavec 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                 RESULT=new If(a,b,new LinkedList<>(),new SubIf(aleft,aright),aleft+1,aright+1);
                                                                                
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",12, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIA_SI ::= si parena EXPRESION parenc llavea SENTENCIAS_INTERNAS llavec SENTENCIA_SINO 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		SubIf c = (SubIf)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                                                                    RESULT=new If(a,b,new LinkedList<>(),c,aleft+1,aright+1);
                                                                                                 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",12, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA_SI ::= si parena EXPRESION parenc llavea SENTENCIAS_INTERNAS llavec SENTENCIA_SINOSI 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<SubIf> c = (LinkedList<SubIf>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                                                                    RESULT=new If(a,b,c,new SubIf(aleft,aright),aleft+1,aright+1);
                                                                                                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",12, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA_SI ::= si parena EXPRESION parenc llavea SENTENCIAS_INTERNAS llavec SENTENCIA_SINOSI SENTENCIA_SINO 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<SubIf> c = (LinkedList<SubIf>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		SubIf d = (SubIf)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                                                                                        RESULT=new If(a,b,c,d,aleft+1,aright+1);
                                                                                                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",12, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CASO_DEFECTO ::= defecto dospuntos llavea SENTENCIAS_INTERNAS llavec 
            {
              Caso RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                    RESULT=new Caso(a,aleft+1,aright+1);
                                                                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("CASO_DEFECTO",18, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LISTA_CASO ::= caso EXPRESION dospuntos llavea SENTENCIAS_INTERNAS llavec 
            {
              Caso RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                             RESULT=new Caso(a,b,aleft+1,aright+1);
                                                                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_CASO",17, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LISTAS_CASOS ::= LISTA_CASO 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Caso a = (Caso)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                RESULT=new LinkedList<>();
                                RESULT.add(a);
                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTAS_CASOS",16, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LISTAS_CASOS ::= LISTAS_CASOS LISTA_CASO 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<Caso> a = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Caso b = (Caso)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=a;
                                            RESULT.add(b);
                                           
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTAS_CASOS",16, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_SELECCIONA ::= selecciona parena EXPRESION parenc llavea LISTAS_CASOS llavec 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                            RESULT=new Switch(a,b,null,aleft+1,aright+1);
                                                                                         
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCIONA",15, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_SELECCIONA ::= selecciona parena EXPRESION parenc llavea LISTAS_CASOS CASO_DEFECTO llavec 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Caso c = (Caso)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                                        RESULT=new Switch(a,b,c,aleft+1,aright+1);
                                                                                                        
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCIONA",15, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIAS_SELECCION ::= SENTENCIA_SELECCIONA 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                RESULT=new LinkedList<NodoAST>();
                                                RESULT.add(a);
                                              
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_SELECCION",10, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIAS_SELECCION ::= SENTENCIA_SI 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                        RESULT=new LinkedList<NodoAST>();
                                        RESULT.add(a);
                                      
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_SELECCION",10, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_IMPRIMIR ::= imprimir parena EXPRESION parenc pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		
                                                                RESULT=new LinkedList<NodoAST>();
                                                                RESULT.add(new Imprimir(b,aleft+1,aright+1));
                                                             
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IMPRIMIR",9, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_DETENER ::= detener pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                    RESULT=new LinkedList<>();
                                    RESULT.add(new Detener(aleft+1,aright+1));
                                
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DETENER",21, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_RETORNAR ::= retornar pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                    RESULT=new LinkedList<>();
                                    RESULT.add(new Retornar(aleft+1,aright+1));
                                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETORNAR",20, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_RETORNAR ::= retornar EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                RESULT=new LinkedList<>();
                                                RESULT.add(new Retornar(a,aleft+1,aright+1));
                                              
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETORNAR",20, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_ASIGNACION ::= valor_id incremental pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		
                                                    RESULT=new LinkedList<>();
                                                    Aritmetica aritmetica=new Aritmetica(a.toString().toLowerCase(),Type.PrimitiveType.ID,aleft+1,aright+1);
                                                    RESULT.add(new Asignacion(a.toString().toLowerCase(),aritmetica,Operador.AUMENTO,aleft+1,aright+1));
                                                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_ASIGNACION ::= valor_id decremental pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		
                                                        RESULT=new LinkedList<>();
                                                        Aritmetica aritmetica =new Aritmetica(a.toString().toLowerCase(),Type.PrimitiveType.ID,aleft+1,aright+1);
                                                        RESULT.add(new Asignacion(a.toString().toLowerCase(),aritmetica,Operador.DECREMENTO,aleft+1,aright+1));
                                                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_ASIGNACION ::= valor_id corchea EXPRESION corchec div igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                            RESULT=new LinkedList<>();
                                                                                            RESULT.add(new AsignacionArreglo(a.toString().toLowerCase(),c,b,Operador.A_DIV,aleft+1,aright+1));
                                                                                        
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_ASIGNACION ::= valor_id corchea EXPRESION corchec por igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                            RESULT=new LinkedList<>();
                                                                                            RESULT.add(new AsignacionArreglo(a.toString().toLowerCase(),c,b,Operador.A_MULT,aleft+1,aright+1));
                                                                                        
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_ASIGNACION ::= valor_id corchea EXPRESION corchec menos igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                            RESULT=new LinkedList<>();
                                                                                            RESULT.add(new AsignacionArreglo(a.toString().toLowerCase(),c,b,Operador.A_RESTA,aleft+1,aright+1));
                                                                                          
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_ASIGNACION ::= valor_id corchea EXPRESION corchec mas igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                            RESULT=new LinkedList<>();
                                                                                            RESULT.add(new AsignacionArreglo(a.toString().toLowerCase(),c,b,Operador.A_SUMA,aleft+1,aright+1));
                                                                                        
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_ASIGNACION ::= valor_id corchea EXPRESION corchec igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                        RESULT=new LinkedList<>();
                                                                                        RESULT.add(new AsignacionArreglo(a.toString().toLowerCase(),c,b,Operador.IGUAL,aleft+1,aright+1));
                                                                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_ASIGNACION ::= valor_id div igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                RESULT=new LinkedList<>();
                                                                RESULT.add(new Asignacion(a.toString().toLowerCase(),b,Operador.A_DIV,aleft+1,aright+1));
                                                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_ASIGNACION ::= valor_id por igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                RESULT=new LinkedList<>();
                                                                RESULT.add(new Asignacion(a.toString().toLowerCase(),b,Operador.A_MULT,aleft+1,aright+1));
                                                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_ASIGNACION ::= valor_id menos igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                RESULT=new LinkedList<>();
                                                                RESULT.add(new Asignacion(a.toString().toLowerCase(),b,Operador.A_RESTA,aleft+1,aright+1));
                                                              
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_ASIGNACION ::= valor_id mas igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                RESULT=new LinkedList<>();
                                                                RESULT.add(new Asignacion(a.toString().toLowerCase(),b,Operador.A_SUMA,aleft+1,aright+1));
                                                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA_ASIGNACION ::= valor_id igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                            RESULT=new LinkedList<>();
                                                            RESULT.add(new Asignacion(a.toString().toLowerCase(),b,Operador.IGUAL,aleft+1,aright+1));
                                                        
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FUNCIONES_LENGUAJE ::= alguno parena valor_id parenc 
            {
              Componente_Funcion_Arreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                        RESULT=new Componente_Funcion_Arreglo("alguno",a.toString().toLowerCase(),aleft+1,aright+1);
                                                      
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FUNCIONES_LENGUAJE ::= todos parena valor_id parenc 
            {
              Componente_Funcion_Arreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                        RESULT=new Componente_Funcion_Arreglo("todos",a.toString().toLowerCase(),aleft+1,aright+1);
                                                     
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUNCIONES_LENGUAJE ::= reduce parena valor_id parenc 
            {
              Componente_Funcion_Arreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                        RESULT=new Componente_Funcion_Arreglo("reduce",a.toString().toLowerCase(),aleft+1,aright+1);
                                                      
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNCIONES_LENGUAJE ::= map parena valor_id parenc 
            {
              Componente_Funcion_Arreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                    RESULT=new Componente_Funcion_Arreglo("map",a.toString().toLowerCase(),aleft+1,aright+1);
                                                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNCIONES_LENGUAJE ::= buscar parena valor_id parenc 
            {
              Componente_Funcion_Arreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                        RESULT=new Componente_Funcion_Arreglo("buscar",a.toString().toLowerCase(),aleft+1,aright+1);
                                                      
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUNCIONES_LENGUAJE ::= filtrar parena valor_id parenc 
            {
              Componente_Funcion_Arreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                        RESULT=new Componente_Funcion_Arreglo("filtrar",a.toString().toLowerCase(),aleft+1,aright+1);
                                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCIONES_LENGUAJE ::= minimo parena parenc 
            {
              Componente_Funcion_Arreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		
                                            RESULT=new Componente_Funcion_Arreglo("minimo",aleft+1,aright+1);
                                          
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNCIONES_LENGUAJE ::= maximo parena parenc 
            {
              Componente_Funcion_Arreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		
                                            RESULT=new Componente_Funcion_Arreglo("maximo",aleft+1,aright+1);
                                          
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNCIONES_LENGUAJE ::= invertir parena parenc 
            {
              Componente_Funcion_Arreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		
                                              RESULT=new Componente_Funcion_Arreglo("invertir",aleft+1,aright+1);
                                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUNCIONES_LENGUAJE ::= ascendente parena parenc 
            {
              Componente_Funcion_Arreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		
                                                RESULT=new Componente_Funcion_Arreglo("ascendente",aleft+1,aright+1);
                                              
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FUNCIONES_LENGUAJE ::= descendente parena parenc 
            {
              Componente_Funcion_Arreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		
                                                RESULT=new Componente_Funcion_Arreglo("descendente",aleft+1,aright+1);
                                               
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FUNCIONES_LENGUAJES ::= FUNCIONES_LENGUAJE 
            {
              LinkedList<Componente_Funcion_Arreglo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Componente_Funcion_Arreglo a = (Componente_Funcion_Arreglo)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new LinkedList<>();
                                            RESULT.add(a);
                                           
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJES",34, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNCIONES_LENGUAJES ::= FUNCIONES_LENGUAJES pto FUNCIONES_LENGUAJE 
            {
              LinkedList<Componente_Funcion_Arreglo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<Componente_Funcion_Arreglo> a = (LinkedList<Componente_Funcion_Arreglo>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Componente_Funcion_Arreglo b = (Componente_Funcion_Arreglo)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                                        RESULT=a;
                                                                        RESULT.add(b);
                                                                     
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJES",34, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIAS_ARREGLOS ::= valor_id pto FUNCIONES_LENGUAJES 
            {
              Funciones_Arreglos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<Componente_Funcion_Arreglo> b = (LinkedList<Componente_Funcion_Arreglo>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                                RESULT=new Funciones_Arreglos(a,b,aleft+1,aright+1);
                                                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_ARREGLOS",33, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIAS_GENERALES ::= SENTENCIAS_ARREGLOS pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Funciones_Arreglos a = (Funciones_Arreglos)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                RESULT=new LinkedList<>();
                                                RESULT.add(a);
                                             
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GENERALES",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIAS_GENERALES ::= LLAMADA_FUNCION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                RESULT=new LinkedList<>();
                                                RESULT.add(a);
                                             
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GENERALES",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIAS_GENERALES ::= SENTENCIA_ASIGNACION 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GENERALES",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIAS_GENERALES ::= SENTENCIA_DETENER 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GENERALES",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIAS_GENERALES ::= SENTENCIA_RETORNAR 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GENERALES",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIAS_GENERALES ::= SENTENCIAS_SELECCION 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GENERALES",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIAS_GENERALES ::= DECLARACION_VARIABLES 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                RESULT=a;
                                               
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GENERALES",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIAS_GENERALES ::= SENTENCIA_IMPRIMIR 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=a;
                                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GENERALES",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIAS_INTERNAS ::= SENTENCIAS_GENERALES 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                RESULT=a;
                                             
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_INTERNAS",22, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIAS_INTERNAS ::= SENTENCIAS_INTERNAS SENTENCIAS_GENERALES 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                                    RESULT=a;
                                                                    RESULT.addAll(b);
                                                                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_INTERNAS",22, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEFINICIONES_PARAMETROS ::= var valor_id 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new LinkedList<>();
                                            RESULT.add(new Declaracion(Type.PrimitiveType.ID,a.toString().toLowerCase(),null,false,aleft+1,aright+1));
                                         
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DEFINICIONES_PARAMETROS",24, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEFINICIONES_PARAMETROS ::= valor_id 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new LinkedList<>();
                                            RESULT.add(new Declaracion(Type.PrimitiveType.ID,a.toString().toLowerCase(),null,false,aleft+1,aright+1));
                                         
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DEFINICIONES_PARAMETROS",24, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEFINICIONES_PARAMETROS ::= DEFINICIONES_PARAMETROS coma var valor_id 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                                        RESULT=a;
                                                                        RESULT.add(new Declaracion(Type.PrimitiveType.ID,b.toString().toLowerCase(),null,false,aleft+1,aright+1));
                                                                        
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DEFINICIONES_PARAMETROS",24, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DEFINICIONES_PARAMETROS ::= DEFINICIONES_PARAMETROS coma valor_id 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                                        RESULT=a;
                                                                        RESULT.add(new Declaracion(Type.PrimitiveType.ID,b.toString().toLowerCase(),null,false,aleft+1,aright+1));
                                                                        
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DEFINICIONES_PARAMETROS",24, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARAR_FUNCIONES ::= funcion valor_id parena DEFINICIONES_PARAMETROS parenc llavea SENTENCIAS_INTERNAS llavec 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                                                        RESULT=new LinkedList<>();
                                                                                                                        RESULT.add(new Funcion(a.toString().toLowerCase(),b,c,aleft+1,aright+1));
                                                                                                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARAR_FUNCIONES",25, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARAR_FUNCIONES ::= funcion valor_id parena parenc llavea SENTENCIAS_INTERNAS llavec 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                            RESULT=new LinkedList<>();
                                                                                            RESULT.add(new Funcion(a.toString().toLowerCase(),b,aleft+1,aright+1));
                                                                                          
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARAR_FUNCIONES",25, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA_GLOBAL ::= DECLARAR_FUNCIONES 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_GLOBAL",2, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA_GLOBAL ::= importar parena ELEMENTO_PATH parenc pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		
                                                                    RESULT=new LinkedList<>();
                                                                    RESULT.add(new Importar(a.toString(),b.toString(),aleft+1,aright+1));
                                                                
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_GLOBAL",2, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA_GLOBAL ::= SENTENCIAS_GENERALES 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_GLOBAL",2, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIAS_GLOBALES ::= SENTENCIA_GLOBAL 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=a;
                                         
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GLOBALES",1, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIAS_GLOBALES ::= SENTENCIAS_GLOBALES SENTENCIA_GLOBAL 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                                RESULT=a;
                                                                RESULT.addAll(b);
                                                               
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GLOBALES",1, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIAL ::= SENTENCIAS_GLOBALES 
            {
              AST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                this.parser.root=new AST(a);
                               
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INICIAL",0, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		AST start_val = (AST)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = start_val;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintacticoFS$parser.done_parsing();
          return CUP$sintacticoFS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

