
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 05 17:25:37 CST 2019
//----------------------------------------------------

package Analizadores.GramaticaFS;

import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.lang.*;
import javax.swing.JOptionPane;
import java.io.*;
import java.util.LinkedList;
import java.awt.Color;
import ArbolAST.AST;
import ArbolAST.NodoAST;
import ArbolAST.Entorno.Type;
import ArbolAST.Expresiones.Expresion;
import ArbolAST.Expresiones.operacion.Logica;
import ArbolAST.Expresiones.operacion.Aritmetica;
import ArbolAST.Expresiones.operacion.Relacional;
import ArbolAST.Expresiones.operacion.Operacion.Operador;
import ArbolAST.Expresiones.operacion.Ternario;
import ArbolAST.Expresiones.operacion.Retornar;
import ArbolAST.Expresiones.Llamada_Funcion;
import ArbolAST.Instrucciones.Imprimir;
import ArbolAST.Instrucciones.Detener;
import ArbolAST.Instrucciones.Seleccion.If;
import ArbolAST.Instrucciones.Seleccion.SubIf;
import ArbolAST.Instrucciones.Seleccion.Caso;
import ArbolAST.Instrucciones.Seleccion.Switch;
import ArbolAST.Instrucciones.Asignacion;
import ArbolAST.Instrucciones.Funcion;
import ArbolAST.Instrucciones.Declaracion;
import ArbolAST.Instrucciones.AsignacionArreglo;
import ArbolAST.Instrucciones.Declaracion_Arreglo;
import ArbolAST.Expresiones.AccesoArreglo;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 05 17:25:37 CST 2019
  */
public class sintacticoFS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintacticoFS() {super();}

  /** Constructor which sets the default scanner. */
  public sintacticoFS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintacticoFS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\007" +
    "\000\002\004\003\000\002\033\011\000\002\033\012\000" +
    "\002\032\006\000\002\032\004\000\002\030\004\000\002" +
    "\030\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\004\000\002\031\006\000\002\031\007\000" +
    "\002\031\007\000\002\031\007\000\002\031\007\000\002" +
    "\031\011\000\002\031\012\000\002\031\012\000\002\031" +
    "\012\000\002\031\012\000\002\031\005\000\002\031\005" +
    "\000\002\026\005\000\002\026\004\000\002\027\004\000" +
    "\002\013\007\000\002\014\003\000\002\014\003\000\002" +
    "\021\012\000\002\021\011\000\002\022\004\000\002\022" +
    "\003\000\002\023\010\000\002\024\007\000\002\016\013" +
    "\000\002\016\012\000\002\016\012\000\002\016\011\000" +
    "\002\020\006\000\002\017\013\000\002\017\012\000\002" +
    "\005\005\000\002\005\007\000\002\005\011\000\002\005" +
    "\011\000\002\041\003\000\002\041\003\000\002\040\007" +
    "\000\002\040\005\000\002\036\002\000\002\036\003\000" +
    "\002\035\005\000\002\035\003\000\002\006\005\000\002" +
    "\006\003\000\002\007\004\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\004\000\002\007" +
    "\005\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\004\000\002\007\004\000\002\042" +
    "\006\000\002\015\007\000\002\037\005\000\002\037\005" +
    "\000\002\037\005\000\002\037\005\000\002\037\005\000" +
    "\002\037\006\000\002\037\006\000\002\037\006\000\002" +
    "\037\006\000\002\037\006\000\002\037\006\000\002\011" +
    "\006\000\002\010\002\000\002\010\003\000\002\034\005" +
    "\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\046\004\034\012\022\026\012\040\040\054" +
    "\015\055\041\056\043\061\033\062\025\063\010\064\044" +
    "\066\024\067\020\072\042\073\006\074\016\076\013\077" +
    "\035\001\002\000\050\002\000\004\034\012\022\026\012" +
    "\040\040\054\015\055\041\056\043\061\033\062\025\063" +
    "\010\064\044\066\024\067\020\072\042\073\006\074\016" +
    "\076\013\077\035\001\002\000\052\002\ufff0\004\ufff0\007" +
    "\ufff0\012\ufff0\026\ufff0\040\ufff0\054\ufff0\055\ufff0\056\ufff0" +
    "\061\ufff0\062\ufff0\063\ufff0\064\ufff0\066\ufff0\067\ufff0\072" +
    "\ufff0\073\ufff0\074\ufff0\076\ufff0\077\ufff0\001\002\000\056" +
    "\005\uffac\007\uffac\011\uffac\012\uffac\013\uffac\014\uffac\015" +
    "\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac" +
    "\024\uffac\025\uffac\027\uffac\030\uffac\032\uffac\034\uffac\035" +
    "\uffac\036\uffac\037\uffac\001\002\000\052\002\ufff3\004\ufff3" +
    "\007\ufff3\012\ufff3\026\ufff3\040\ufff3\054\ufff3\055\ufff3\056" +
    "\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\066\ufff3\067\ufff3" +
    "\072\ufff3\073\ufff3\074\ufff3\076\ufff3\077\ufff3\001\002\000" +
    "\004\004\335\001\002\000\052\002\uffef\004\uffef\007\uffef" +
    "\012\uffef\026\uffef\040\uffef\054\uffef\055\uffef\056\uffef\061" +
    "\uffef\062\uffef\063\uffef\064\uffef\066\uffef\067\uffef\072\uffef" +
    "\073\uffef\074\uffef\076\uffef\077\uffef\001\002\000\026\004" +
    "\034\012\022\026\012\066\071\067\020\072\042\073\006" +
    "\074\016\076\013\077\035\001\002\000\056\005\uffae\007" +
    "\uffae\011\uffae\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae" +
    "\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025" +
    "\uffae\027\uffae\030\uffae\032\uffae\034\uffae\035\uffae\036\uffae" +
    "\037\uffae\001\002\000\050\002\ufffe\004\ufffe\012\ufffe\026" +
    "\ufffe\040\ufffe\054\ufffe\055\ufffe\056\ufffe\061\ufffe\062\ufffe" +
    "\063\ufffe\064\ufffe\066\ufffe\067\ufffe\072\ufffe\073\ufffe\074" +
    "\ufffe\076\ufffe\077\ufffe\001\002\000\004\004\330\001\002" +
    "\000\056\005\uffab\007\uffab\011\uffab\012\uffab\013\uffab\014" +
    "\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab" +
    "\023\uffab\024\uffab\025\uffab\027\uffab\030\uffab\032\uffab\034" +
    "\uffab\035\uffab\036\uffab\037\uffab\001\002\000\052\002\ufff4" +
    "\004\ufff4\007\ufff4\012\ufff4\026\ufff4\040\ufff4\054\ufff4\055" +
    "\ufff4\056\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\066\ufff4" +
    "\067\ufff4\072\ufff4\073\ufff4\074\ufff4\076\ufff4\077\ufff4\001" +
    "\002\000\056\005\uffaf\007\uffaf\011\uffaf\012\uffaf\013\uffaf" +
    "\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022" +
    "\uffaf\023\uffaf\024\uffaf\025\uffaf\027\uffaf\030\uffaf\032\uffaf" +
    "\034\uffaf\035\uffaf\036\uffaf\037\uffaf\001\002\000\044\011" +
    "\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa" +
    "\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\030" +
    "\327\035\uffaa\036\uffaa\037\uffaa\001\002\000\026\004\034" +
    "\012\022\026\012\066\071\067\020\072\042\073\006\074" +
    "\016\076\013\077\035\001\002\000\056\005\uffa7\007\uffa7" +
    "\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017" +
    "\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7" +
    "\027\uffa7\030\uffa7\032\uffa7\034\uffa7\035\uffa7\036\uffa7\037" +
    "\uffa7\001\002\000\050\004\072\010\256\011\260\012\261" +
    "\013\255\014\262\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021" +
    "\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\031\257\035\uffb0" +
    "\036\uffb0\037\uffb0\001\002\000\030\004\034\012\022\026" +
    "\012\030\253\066\071\067\020\072\042\073\006\074\016" +
    "\076\013\077\035\001\002\000\004\002\251\001\002\000" +
    "\052\002\ufff1\004\ufff1\007\ufff1\012\ufff1\026\ufff1\040\ufff1" +
    "\054\ufff1\055\ufff1\056\ufff1\061\ufff1\062\ufff1\063\ufff1\064" +
    "\ufff1\066\ufff1\067\ufff1\072\ufff1\073\ufff1\074\ufff1\076\ufff1" +
    "\077\ufff1\001\002\000\050\002\ufffd\004\ufffd\012\ufffd\026" +
    "\ufffd\040\ufffd\054\ufffd\055\ufffd\056\ufffd\061\ufffd\062\ufffd" +
    "\063\ufffd\064\ufffd\066\ufffd\067\ufffd\072\ufffd\073\ufffd\074" +
    "\ufffd\076\ufffd\077\ufffd\001\002\000\052\002\uffdd\004\uffdd" +
    "\007\uffdd\012\uffdd\026\uffdd\040\uffdd\054\uffdd\055\uffdd\056" +
    "\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd\066\uffdd\067\uffdd" +
    "\072\uffdd\073\uffdd\074\uffdd\076\uffdd\077\uffdd\001\002\000" +
    "\056\005\uffa9\007\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9" +
    "\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023" +
    "\uffa9\024\uffa9\025\uffa9\027\uffa9\030\uffa9\032\uffa9\034\uffa9" +
    "\035\uffa9\036\uffa9\037\uffa9\001\002\000\004\030\250\001" +
    "\002\000\026\004\034\012\022\026\012\066\071\067\020" +
    "\072\042\073\006\074\016\076\013\077\035\001\002\000" +
    "\056\005\uffa8\007\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8" +
    "\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023" +
    "\uffa8\024\uffa8\025\uffa8\027\uffa8\030\uffa8\032\uffa8\034\uffa8" +
    "\035\uffa8\036\uffa8\037\uffa8\001\002\000\050\002\ufffb\004" +
    "\ufffb\012\ufffb\026\ufffb\040\ufffb\054\ufffb\055\ufffb\056\ufffb" +
    "\061\ufffb\062\ufffb\063\ufffb\064\ufffb\066\ufffb\067\ufffb\072" +
    "\ufffb\073\ufffb\074\ufffb\076\ufffb\077\ufffb\001\002\000\052" +
    "\002\uffdc\004\uffdc\007\uffdc\012\uffdc\026\uffdc\040\uffdc\054" +
    "\uffdc\055\uffdc\056\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc" +
    "\066\uffdc\067\uffdc\072\uffdc\073\uffdc\074\uffdc\076\uffdc\077" +
    "\uffdc\001\002\000\004\066\213\001\002\000\004\004\205" +
    "\001\002\000\056\005\uffad\007\uffad\011\uffad\012\uffad\013" +
    "\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad" +
    "\022\uffad\023\uffad\024\uffad\025\uffad\027\uffad\030\uffad\032" +
    "\uffad\034\uffad\035\uffad\036\uffad\037\uffad\001\002\000\004" +
    "\004\151\001\002\000\004\066\127\001\002\000\042\011" +
    "\064\012\052\013\062\014\047\015\060\016\066\017\054" +
    "\020\063\021\061\022\055\023\056\024\053\025\051\035" +
    "\065\036\057\037\050\001\002\000\052\002\ufff2\004\ufff2" +
    "\007\ufff2\012\ufff2\026\ufff2\040\ufff2\054\ufff2\055\ufff2\056" +
    "\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2\066\ufff2\067\ufff2" +
    "\072\ufff2\073\ufff2\074\ufff2\076\ufff2\077\ufff2\001\002\000" +
    "\026\004\034\012\022\026\012\066\071\067\020\072\042" +
    "\073\006\074\016\076\013\077\035\001\002\000\044\011" +
    "\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6" +
    "\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\030" +
    "\125\035\uffa6\036\uffa6\037\uffa6\001\002\000\026\004\034" +
    "\012\022\026\012\066\071\067\020\072\042\073\006\074" +
    "\016\076\013\077\035\001\002\000\026\004\034\012\022" +
    "\026\012\066\071\067\020\072\042\073\006\074\016\076" +
    "\013\077\035\001\002\000\026\004\034\012\022\026\012" +
    "\066\071\067\020\072\042\073\006\074\016\076\013\077" +
    "\035\001\002\000\026\004\034\012\022\026\012\066\071" +
    "\067\020\072\042\073\006\074\016\076\013\077\035\001" +
    "\002\000\026\004\034\012\022\026\012\066\071\067\020" +
    "\072\042\073\006\074\016\076\013\077\035\001\002\000" +
    "\026\004\034\012\022\026\012\066\071\067\020\072\042" +
    "\073\006\074\016\076\013\077\035\001\002\000\044\011" +
    "\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5" +
    "\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\030" +
    "\116\035\uffa5\036\uffa5\037\uffa5\001\002\000\026\004\034" +
    "\012\022\026\012\066\071\067\020\072\042\073\006\074" +
    "\016\076\013\077\035\001\002\000\026\004\034\012\022" +
    "\026\012\066\071\067\020\072\042\073\006\074\016\076" +
    "\013\077\035\001\002\000\026\004\034\012\022\026\012" +
    "\066\071\067\020\072\042\073\006\074\016\076\013\077" +
    "\035\001\002\000\026\004\034\012\022\026\012\066\071" +
    "\067\020\072\042\073\006\074\016\076\013\077\035\001" +
    "\002\000\026\004\034\012\022\026\012\066\071\067\020" +
    "\072\042\073\006\074\016\076\013\077\035\001\002\000" +
    "\026\004\034\012\022\026\012\066\071\067\020\072\042" +
    "\073\006\074\016\076\013\077\035\001\002\000\026\004" +
    "\034\012\022\026\012\066\071\067\020\072\042\073\006" +
    "\074\016\076\013\077\035\001\002\000\056\005\uffaa\007" +
    "\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025" +
    "\uffaa\027\uffaa\030\uffaa\032\uffaa\034\uffaa\035\uffaa\036\uffaa" +
    "\037\uffaa\001\002\000\056\005\uffba\007\uffba\011\064\012" +
    "\052\013\062\014\047\015\060\016\uffba\017\uffba\020\uffba" +
    "\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\027\uffba\030" +
    "\uffba\032\uffba\034\uffba\035\uffba\036\077\037\075\001\002" +
    "\000\062\004\072\005\uffb0\007\uffb0\011\uffb0\012\uffb0\013" +
    "\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0" +
    "\022\uffb0\023\uffb0\024\uffb0\025\uffb0\027\uffb0\030\uffb0\031" +
    "\073\032\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\001\002" +
    "\000\030\004\034\005\uff96\012\022\026\012\066\071\067" +
    "\020\072\042\073\006\074\016\076\013\077\035\001\002" +
    "\000\026\004\034\012\022\026\012\066\071\067\020\072" +
    "\042\073\006\074\016\076\013\077\035\001\002\000\044" +
    "\011\064\012\052\013\062\014\047\015\060\016\066\017" +
    "\054\020\063\021\061\022\055\023\056\024\053\025\051" +
    "\032\076\035\065\036\077\037\075\001\002\000\056\005" +
    "\uffa6\007\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6" +
    "\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024" +
    "\uffa6\025\uffa6\027\uffa6\030\uffa6\032\uffa6\034\uffa6\035\uffa6" +
    "\036\uffa6\037\uffa6\001\002\000\056\005\uffa4\007\uffa4\011" +
    "\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4" +
    "\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\027" +
    "\uffa4\030\uffa4\032\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4" +
    "\001\002\000\056\005\uffa5\007\uffa5\011\uffa5\012\uffa5\013" +
    "\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5" +
    "\022\uffa5\023\uffa5\024\uffa5\025\uffa5\027\uffa5\030\uffa5\032" +
    "\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\001\002\000\004" +
    "\005\105\001\002\000\046\005\uff93\011\064\012\052\013" +
    "\062\014\047\015\060\016\066\017\054\020\063\021\061" +
    "\022\055\023\056\024\053\025\051\027\uff93\035\065\036" +
    "\077\037\075\001\002\000\006\005\uff95\027\103\001\002" +
    "\000\026\004\034\012\022\026\012\066\071\067\020\072" +
    "\042\073\006\074\016\076\013\077\035\001\002\000\046" +
    "\005\uff94\011\064\012\052\013\062\014\047\015\060\016" +
    "\066\017\054\020\063\021\061\022\055\023\056\024\053" +
    "\025\051\027\uff94\035\065\036\077\037\075\001\002\000" +
    "\056\005\uff97\007\uff97\011\uff97\012\uff97\013\uff97\014\uff97" +
    "\015\uff97\016\uff97\017\uff97\020\uff97\021\uff97\022\uff97\023" +
    "\uff97\024\uff97\025\uff97\027\uff97\030\uff97\032\uff97\034\uff97" +
    "\035\uff97\036\uff97\037\uff97\001\002\000\044\011\064\012" +
    "\052\013\062\014\047\015\060\016\066\017\054\020\063" +
    "\021\061\022\055\023\056\024\053\025\051\034\107\035" +
    "\065\036\077\037\075\001\002\000\026\004\034\012\022" +
    "\026\012\066\071\067\020\072\042\073\006\074\016\076" +
    "\013\077\035\001\002\000\056\005\uffa3\007\uffa3\011\064" +
    "\012\052\013\062\014\047\015\060\016\066\017\054\020" +
    "\063\021\061\022\055\023\056\024\053\025\051\027\uffa3" +
    "\030\uffa3\032\uffa3\034\uffa3\035\065\036\077\037\075\001" +
    "\002\000\056\005\uffbf\007\uffbf\011\uffbf\012\uffbf\013\062" +
    "\014\047\015\060\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\027\uffbf\030\uffbf\032\uffbf" +
    "\034\uffbf\035\uffbf\036\077\037\075\001\002\000\056\005" +
    "\uffb8\007\uffb8\011\064\012\052\013\062\014\047\015\060" +
    "\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024" +
    "\uffb8\025\uffb8\027\uffb8\030\uffb8\032\uffb8\034\uffb8\035\uffb8" +
    "\036\077\037\075\001\002\000\056\005\uffbd\007\uffbd\011" +
    "\uffbd\012\uffbd\013\uffbd\014\uffbd\015\060\016\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\027" +
    "\uffbd\030\uffbd\032\uffbd\034\uffbd\035\uffbd\036\077\037\075" +
    "\001\002\000\056\005\uffb7\007\uffb7\011\064\012\052\013" +
    "\062\014\047\015\060\016\uffb7\017\uffb7\020\uffb7\021\uffb7" +
    "\022\uffb7\023\uffb7\024\uffb7\025\uffb7\027\uffb7\030\uffb7\032" +
    "\uffb7\034\uffb7\035\uffb7\036\077\037\075\001\002\000\056" +
    "\005\uffbb\007\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015" +
    "\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\027\uffbb\030\uffbb\032\uffbb\034\uffbb\035" +
    "\uffbb\036\077\037\075\001\002\000\052\002\uffe2\004\uffe2" +
    "\007\uffe2\012\uffe2\026\uffe2\040\uffe2\054\uffe2\055\uffe2\056" +
    "\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\066\uffe2\067\uffe2" +
    "\072\uffe2\073\uffe2\074\uffe2\076\uffe2\077\uffe2\001\002\000" +
    "\056\005\uffb5\007\uffb5\011\064\012\052\013\062\014\047" +
    "\015\060\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023" +
    "\uffb5\024\uffb5\025\uffb5\027\uffb5\030\uffb5\032\uffb5\034\uffb5" +
    "\035\uffb5\036\077\037\075\001\002\000\056\005\uffb6\007" +
    "\uffb6\011\064\012\052\013\062\014\047\015\060\016\uffb6" +
    "\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025" +
    "\uffb6\027\uffb6\030\uffb6\032\uffb6\034\uffb6\035\uffb6\036\077" +
    "\037\075\001\002\000\056\005\uffb9\007\uffb9\011\064\012" +
    "\052\013\062\014\047\015\060\016\uffb9\017\uffb9\020\uffb9" +
    "\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\027\uffb9\030" +
    "\uffb9\032\uffb9\034\uffb9\035\uffb9\036\077\037\075\001\002" +
    "\000\056\005\uffb4\007\uffb4\011\064\012\052\013\062\014" +
    "\047\015\060\016\066\017\054\020\063\021\061\022\055" +
    "\023\056\024\uffb4\025\uffb4\027\uffb4\030\uffb4\032\uffb4\034" +
    "\uffb4\035\uffb4\036\077\037\075\001\002\000\056\005\uffbe" +
    "\007\uffbe\011\uffbe\012\uffbe\013\062\014\047\015\060\016" +
    "\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\027\uffbe\030\uffbe\032\uffbe\034\uffbe\035\uffbe\036" +
    "\077\037\075\001\002\000\056\005\uffb3\007\uffb3\011\064" +
    "\012\052\013\062\014\047\015\060\016\066\017\054\020" +
    "\063\021\061\022\055\023\056\024\053\025\uffb3\027\uffb3" +
    "\030\uffb3\032\uffb3\034\uffb3\035\uffb3\036\077\037\075\001" +
    "\002\000\052\002\uffe3\004\uffe3\007\uffe3\012\uffe3\026\uffe3" +
    "\040\uffe3\054\uffe3\055\uffe3\056\uffe3\061\uffe3\062\uffe3\063" +
    "\uffe3\064\uffe3\066\uffe3\067\uffe3\072\uffe3\073\uffe3\074\uffe3" +
    "\076\uffe3\077\uffe3\001\002\000\056\005\uffbc\007\uffbc\011" +
    "\uffbc\012\uffbc\013\uffbc\014\uffbc\015\060\016\uffbc\017\uffbc" +
    "\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\027" +
    "\uffbc\030\uffbc\032\uffbc\034\uffbc\035\uffbc\036\077\037\075" +
    "\001\002\000\004\004\130\001\002\000\006\005\131\040" +
    "\133\001\002\000\004\006\146\001\002\000\006\005\135" +
    "\027\136\001\002\000\004\066\134\001\002\000\006\005" +
    "\ufff7\027\ufff7\001\002\000\004\006\141\001\002\000\004" +
    "\040\137\001\002\000\004\066\140\001\002\000\006\005" +
    "\ufff8\027\ufff8\001\002\000\042\004\034\012\022\026\012" +
    "\040\040\054\015\056\043\061\033\062\025\063\010\066" +
    "\024\067\020\072\042\073\006\074\016\076\013\077\035" +
    "\001\002\000\044\004\034\007\145\012\022\026\012\040" +
    "\040\054\015\056\043\061\033\062\025\063\010\066\024" +
    "\067\020\072\042\073\006\074\016\076\013\077\035\001" +
    "\002\000\044\004\ufff5\007\ufff5\012\ufff5\026\ufff5\040\ufff5" +
    "\054\ufff5\056\ufff5\061\ufff5\062\ufff5\063\ufff5\066\ufff5\067" +
    "\ufff5\072\ufff5\073\ufff5\074\ufff5\076\ufff5\077\ufff5\001\002" +
    "\000\044\004\ufff6\007\ufff6\012\ufff6\026\ufff6\040\ufff6\054" +
    "\ufff6\056\ufff6\061\ufff6\062\ufff6\063\ufff6\066\ufff6\067\ufff6" +
    "\072\ufff6\073\ufff6\074\ufff6\076\ufff6\077\ufff6\001\002\000" +
    "\050\002\ufff9\004\ufff9\012\ufff9\026\ufff9\040\ufff9\054\ufff9" +
    "\055\ufff9\056\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\066" +
    "\ufff9\067\ufff9\072\ufff9\073\ufff9\074\ufff9\076\ufff9\077\ufff9" +
    "\001\002\000\042\004\034\012\022\026\012\040\040\054" +
    "\015\056\043\061\033\062\025\063\010\066\024\067\020" +
    "\072\042\073\006\074\016\076\013\077\035\001\002\000" +
    "\044\004\034\007\150\012\022\026\012\040\040\054\015" +
    "\056\043\061\033\062\025\063\010\066\024\067\020\072" +
    "\042\073\006\074\016\076\013\077\035\001\002\000\050" +
    "\002\ufffa\004\ufffa\012\ufffa\026\ufffa\040\ufffa\054\ufffa\055" +
    "\ufffa\056\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\066\ufffa" +
    "\067\ufffa\072\ufffa\073\ufffa\074\ufffa\076\ufffa\077\ufffa\001" +
    "\002\000\026\004\034\012\022\026\012\066\071\067\020" +
    "\072\042\073\006\074\016\076\013\077\035\001\002\000" +
    "\044\005\153\011\064\012\052\013\062\014\047\015\060" +
    "\016\066\017\054\020\063\021\061\022\055\023\056\024" +
    "\053\025\051\035\065\036\077\037\075\001\002\000\004" +
    "\006\154\001\002\000\042\004\034\012\022\026\012\040" +
    "\040\054\015\056\043\061\033\062\025\063\010\066\024" +
    "\067\020\072\042\073\006\074\016\076\013\077\035\001" +
    "\002\000\044\004\034\007\156\012\022\026\012\040\040" +
    "\054\015\056\043\061\033\062\025\063\010\066\024\067" +
    "\020\072\042\073\006\074\016\076\013\077\035\001\002" +
    "\000\054\002\uffd2\004\uffd2\007\uffd2\012\uffd2\026\uffd2\040" +
    "\uffd2\054\uffd2\055\uffd2\056\uffd2\057\160\061\uffd2\062\uffd2" +
    "\063\uffd2\064\uffd2\066\uffd2\067\uffd2\072\uffd2\073\uffd2\074" +
    "\uffd2\076\uffd2\077\uffd2\001\002\000\054\002\uffd4\004\uffd4" +
    "\007\uffd4\012\uffd4\026\uffd4\040\uffd4\054\uffd4\055\uffd4\056" +
    "\uffd4\057\174\061\uffd4\062\uffd4\063\uffd4\064\uffd4\066\uffd4" +
    "\067\uffd4\072\uffd4\073\uffd4\074\uffd4\076\uffd4\077\uffd4\001" +
    "\002\000\006\006\163\056\162\001\002\000\052\002\uffd3" +
    "\004\uffd3\007\uffd3\012\uffd3\026\uffd3\040\uffd3\054\uffd3\055" +
    "\uffd3\056\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\066\uffd3" +
    "\067\uffd3\072\uffd3\073\uffd3\074\uffd3\076\uffd3\077\uffd3\001" +
    "\002\000\004\004\166\001\002\000\042\004\034\012\022" +
    "\026\012\040\040\054\015\056\043\061\033\062\025\063" +
    "\010\066\024\067\020\072\042\073\006\074\016\076\013" +
    "\077\035\001\002\000\044\004\034\007\165\012\022\026" +
    "\012\040\040\054\015\056\043\061\033\062\025\063\010" +
    "\066\024\067\020\072\042\073\006\074\016\076\013\077" +
    "\035\001\002\000\052\002\uffd1\004\uffd1\007\uffd1\012\uffd1" +
    "\026\uffd1\040\uffd1\054\uffd1\055\uffd1\056\uffd1\061\uffd1\062" +
    "\uffd1\063\uffd1\064\uffd1\066\uffd1\067\uffd1\072\uffd1\073\uffd1" +
    "\074\uffd1\076\uffd1\077\uffd1\001\002\000\026\004\034\012" +
    "\022\026\012\066\071\067\020\072\042\073\006\074\016" +
    "\076\013\077\035\001\002\000\044\005\170\011\064\012" +
    "\052\013\062\014\047\015\060\016\066\017\054\020\063" +
    "\021\061\022\055\023\056\024\053\025\051\035\065\036" +
    "\077\037\075\001\002\000\004\006\171\001\002\000\042" +
    "\004\034\012\022\026\012\040\040\054\015\056\043\061" +
    "\033\062\025\063\010\066\024\067\020\072\042\073\006" +
    "\074\016\076\013\077\035\001\002\000\044\004\034\007" +
    "\173\012\022\026\012\040\040\054\015\056\043\061\033" +
    "\062\025\063\010\066\024\067\020\072\042\073\006\074" +
    "\016\076\013\077\035\001\002\000\054\002\uffcf\004\uffcf" +
    "\007\uffcf\012\uffcf\026\uffcf\040\uffcf\054\uffcf\055\uffcf\056" +
    "\uffcf\057\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\066\uffcf" +
    "\067\uffcf\072\uffcf\073\uffcf\074\uffcf\076\uffcf\077\uffcf\001" +
    "\002\000\006\006\163\056\176\001\002\000\052\002\uffd5" +
    "\004\uffd5\007\uffd5\012\uffd5\026\uffd5\040\uffd5\054\uffd5\055" +
    "\uffd5\056\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5\066\uffd5" +
    "\067\uffd5\072\uffd5\073\uffd5\074\uffd5\076\uffd5\077\uffd5\001" +
    "\002\000\004\004\177\001\002\000\026\004\034\012\022" +
    "\026\012\066\071\067\020\072\042\073\006\074\016\076" +
    "\013\077\035\001\002\000\044\005\201\011\064\012\052" +
    "\013\062\014\047\015\060\016\066\017\054\020\063\021" +
    "\061\022\055\023\056\024\053\025\051\035\065\036\077" +
    "\037\075\001\002\000\004\006\202\001\002\000\042\004" +
    "\034\012\022\026\012\040\040\054\015\056\043\061\033" +
    "\062\025\063\010\066\024\067\020\072\042\073\006\074" +
    "\016\076\013\077\035\001\002\000\044\004\034\007\204" +
    "\012\022\026\012\040\040\054\015\056\043\061\033\062" +
    "\025\063\010\066\024\067\020\072\042\073\006\074\016" +
    "\076\013\077\035\001\002\000\054\002\uffd0\004\uffd0\007" +
    "\uffd0\012\uffd0\026\uffd0\040\uffd0\054\uffd0\055\uffd0\056\uffd0" +
    "\057\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\066\uffd0\067" +
    "\uffd0\072\uffd0\073\uffd0\074\uffd0\076\uffd0\077\uffd0\001\002" +
    "\000\006\070\210\071\207\001\002\000\004\005\211\001" +
    "\002\000\004\005\uffc9\001\002\000\004\005\uffca\001\002" +
    "\000\004\030\212\001\002\000\050\002\ufffc\004\ufffc\012" +
    "\ufffc\026\ufffc\040\ufffc\054\ufffc\055\ufffc\056\ufffc\061\ufffc" +
    "\062\ufffc\063\ufffc\064\ufffc\066\ufffc\067\ufffc\072\ufffc\073" +
    "\ufffc\074\ufffc\076\ufffc\077\ufffc\001\002\000\010\010\uffc1" +
    "\027\uffc1\030\uffc1\001\002\000\010\010\216\027\217\030" +
    "\215\001\002\000\052\002\uffce\004\uffce\007\uffce\012\uffce" +
    "\026\uffce\040\uffce\054\uffce\055\uffce\056\uffce\061\uffce\062" +
    "\uffce\063\uffce\064\uffce\066\uffce\067\uffce\072\uffce\073\uffce" +
    "\074\uffce\076\uffce\077\uffce\001\002\000\032\004\034\006" +
    "\222\012\022\026\012\031\221\066\071\067\020\072\042" +
    "\073\006\074\016\076\013\077\035\001\002\000\004\066" +
    "\220\001\002\000\010\010\uffc2\027\uffc2\030\uffc2\001\002" +
    "\000\030\004\034\012\022\026\012\032\uffc6\066\071\067" +
    "\020\072\042\073\006\074\016\076\013\077\035\001\002" +
    "\000\004\066\226\001\002\000\044\011\064\012\052\013" +
    "\062\014\047\015\060\016\066\017\054\020\063\021\061" +
    "\022\055\023\056\024\053\025\051\030\224\035\065\036" +
    "\077\037\075\001\002\000\052\002\uffcd\004\uffcd\007\uffcd" +
    "\012\uffcd\026\uffcd\040\uffcd\054\uffcd\055\uffcd\056\uffcd\061" +
    "\uffcd\062\uffcd\063\uffcd\064\uffcd\066\uffcd\067\uffcd\072\uffcd" +
    "\073\uffcd\074\uffcd\076\uffcd\077\uffcd\001\002\000\006\007" +
    "\231\027\232\001\002\000\004\034\227\001\002\000\026" +
    "\004\034\012\022\026\012\066\071\067\020\072\042\073" +
    "\006\074\016\076\013\077\035\001\002\000\046\007\uffc7" +
    "\011\064\012\052\013\062\014\047\015\060\016\066\017" +
    "\054\020\063\021\061\022\055\023\056\024\053\025\051" +
    "\027\uffc7\035\065\036\077\037\075\001\002\000\004\030" +
    "\236\001\002\000\004\066\233\001\002\000\004\034\234" +
    "\001\002\000\026\004\034\012\022\026\012\066\071\067" +
    "\020\072\042\073\006\074\016\076\013\077\035\001\002" +
    "\000\046\007\uffc8\011\064\012\052\013\062\014\047\015" +
    "\060\016\066\017\054\020\063\021\061\022\055\023\056" +
    "\024\053\025\051\027\uffc8\035\065\036\077\037\075\001" +
    "\002\000\052\002\uffcb\004\uffcb\007\uffcb\012\uffcb\026\uffcb" +
    "\040\uffcb\054\uffcb\055\uffcb\056\uffcb\061\uffcb\062\uffcb\063" +
    "\uffcb\064\uffcb\066\uffcb\067\uffcb\072\uffcb\073\uffcb\074\uffcb" +
    "\076\uffcb\077\uffcb\001\002\000\004\032\244\001\002\000" +
    "\006\027\242\032\uffc5\001\002\000\046\011\064\012\052" +
    "\013\062\014\047\015\060\016\066\017\054\020\063\021" +
    "\061\022\055\023\056\024\053\025\051\027\uffc3\032\uffc3" +
    "\035\065\036\077\037\075\001\002\000\026\004\034\012" +
    "\022\026\012\066\071\067\020\072\042\073\006\074\016" +
    "\076\013\077\035\001\002\000\046\011\064\012\052\013" +
    "\062\014\047\015\060\016\066\017\054\020\063\021\061" +
    "\022\055\023\056\024\053\025\051\027\uffc4\032\uffc4\035" +
    "\065\036\077\037\075\001\002\000\004\030\245\001\002" +
    "\000\052\002\uffcc\004\uffcc\007\uffcc\012\uffcc\026\uffcc\040" +
    "\uffcc\054\uffcc\055\uffcc\056\uffcc\061\uffcc\062\uffcc\063\uffcc" +
    "\064\uffcc\066\uffcc\067\uffcc\072\uffcc\073\uffcc\074\uffcc\076" +
    "\uffcc\077\uffcc\001\002\000\044\005\247\011\064\012\052" +
    "\013\062\014\047\015\060\016\066\017\054\020\063\021" +
    "\061\022\055\023\056\024\053\025\051\035\065\036\077" +
    "\037\075\001\002\000\056\005\uffb1\007\uffb1\011\uffb1\012" +
    "\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1" +
    "\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\027\uffb1\030" +
    "\uffb1\032\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\001\002" +
    "\000\052\002\uffdf\004\uffdf\007\uffdf\012\uffdf\026\uffdf\040" +
    "\uffdf\054\uffdf\055\uffdf\056\uffdf\061\uffdf\062\uffdf\063\uffdf" +
    "\064\uffdf\066\uffdf\067\uffdf\072\uffdf\073\uffdf\074\uffdf\076" +
    "\uffdf\077\uffdf\001\002\000\004\002\001\001\002\000\044" +
    "\011\064\012\052\013\062\014\047\015\060\016\066\017" +
    "\054\020\063\021\061\022\055\023\056\024\053\025\051" +
    "\030\254\035\065\036\077\037\075\001\002\000\052\002" +
    "\uffe0\004\uffe0\007\uffe0\012\uffe0\026\uffe0\040\uffe0\054\uffe0" +
    "\055\uffe0\056\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\066" +
    "\uffe0\067\uffe0\072\uffe0\073\uffe0\074\uffe0\076\uffe0\077\uffe0" +
    "\001\002\000\052\002\uffe1\004\uffe1\007\uffe1\012\uffe1\026" +
    "\uffe1\040\uffe1\054\uffe1\055\uffe1\056\uffe1\061\uffe1\062\uffe1" +
    "\063\uffe1\064\uffe1\066\uffe1\067\uffe1\072\uffe1\073\uffe1\074" +
    "\uffe1\076\uffe1\077\uffe1\001\002\000\004\010\323\001\002" +
    "\000\026\004\034\012\022\026\012\066\071\067\020\072" +
    "\042\073\006\074\016\076\013\077\035\001\002\000\026" +
    "\004\034\012\022\026\012\066\071\067\020\072\042\073" +
    "\006\074\016\076\013\077\035\001\002\000\004\010\271" +
    "\001\002\000\004\010\266\001\002\000\004\010\263\001" +
    "\002\000\026\004\034\012\022\026\012\066\071\067\020" +
    "\072\042\073\006\074\016\076\013\077\035\001\002\000" +
    "\044\011\064\012\052\013\062\014\047\015\060\016\066" +
    "\017\054\020\063\021\061\022\055\023\056\024\053\025" +
    "\051\030\265\035\065\036\077\037\075\001\002\000\052" +
    "\002\uffe9\004\uffe9\007\uffe9\012\uffe9\026\uffe9\040\uffe9\054" +
    "\uffe9\055\uffe9\056\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9" +
    "\066\uffe9\067\uffe9\072\uffe9\073\uffe9\074\uffe9\076\uffe9\077" +
    "\uffe9\001\002\000\026\004\034\012\022\026\012\066\071" +
    "\067\020\072\042\073\006\074\016\076\013\077\035\001" +
    "\002\000\044\011\064\012\052\013\062\014\047\015\060" +
    "\016\066\017\054\020\063\021\061\022\055\023\056\024" +
    "\053\025\051\030\270\035\065\036\077\037\075\001\002" +
    "\000\052\002\uffeb\004\uffeb\007\uffeb\012\uffeb\026\uffeb\040" +
    "\uffeb\054\uffeb\055\uffeb\056\uffeb\061\uffeb\062\uffeb\063\uffeb" +
    "\064\uffeb\066\uffeb\067\uffeb\072\uffeb\073\uffeb\074\uffeb\076" +
    "\uffeb\077\uffeb\001\002\000\026\004\034\012\022\026\012" +
    "\066\071\067\020\072\042\073\006\074\016\076\013\077" +
    "\035\001\002\000\044\011\064\012\052\013\062\014\047" +
    "\015\060\016\066\017\054\020\063\021\061\022\055\023" +
    "\056\024\053\025\051\030\273\035\065\036\077\037\075" +
    "\001\002\000\052\002\uffec\004\uffec\007\uffec\012\uffec\026" +
    "\uffec\040\uffec\054\uffec\055\uffec\056\uffec\061\uffec\062\uffec" +
    "\063\uffec\064\uffec\066\uffec\067\uffec\072\uffec\073\uffec\074" +
    "\uffec\076\uffec\077\uffec\001\002\000\044\011\064\012\052" +
    "\013\062\014\047\015\060\016\066\017\054\020\063\021" +
    "\061\022\055\023\056\024\053\025\051\032\275\035\065" +
    "\036\077\037\075\001\002\000\044\010\277\011\300\012" +
    "\301\013\276\014\302\015\uffa4\016\uffa4\017\uffa4\020\uffa4" +
    "\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\035\uffa4\036" +
    "\uffa4\037\uffa4\001\002\000\004\010\316\001\002\000\026" +
    "\004\034\012\022\026\012\066\071\067\020\072\042\073" +
    "\006\074\016\076\013\077\035\001\002\000\004\010\311" +
    "\001\002\000\004\010\306\001\002\000\004\010\303\001" +
    "\002\000\026\004\034\012\022\026\012\066\071\067\020" +
    "\072\042\073\006\074\016\076\013\077\035\001\002\000" +
    "\044\011\064\012\052\013\062\014\047\015\060\016\066" +
    "\017\054\020\063\021\061\022\055\023\056\024\053\025" +
    "\051\030\305\035\065\036\077\037\075\001\002\000\052" +
    "\002\uffe4\004\uffe4\007\uffe4\012\uffe4\026\uffe4\040\uffe4\054" +
    "\uffe4\055\uffe4\056\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4" +
    "\066\uffe4\067\uffe4\072\uffe4\073\uffe4\074\uffe4\076\uffe4\077" +
    "\uffe4\001\002\000\026\004\034\012\022\026\012\066\071" +
    "\067\020\072\042\073\006\074\016\076\013\077\035\001" +
    "\002\000\044\011\064\012\052\013\062\014\047\015\060" +
    "\016\066\017\054\020\063\021\061\022\055\023\056\024" +
    "\053\025\051\030\310\035\065\036\077\037\075\001\002" +
    "\000\052\002\uffe6\004\uffe6\007\uffe6\012\uffe6\026\uffe6\040" +
    "\uffe6\054\uffe6\055\uffe6\056\uffe6\061\uffe6\062\uffe6\063\uffe6" +
    "\064\uffe6\066\uffe6\067\uffe6\072\uffe6\073\uffe6\074\uffe6\076" +
    "\uffe6\077\uffe6\001\002\000\026\004\034\012\022\026\012" +
    "\066\071\067\020\072\042\073\006\074\016\076\013\077" +
    "\035\001\002\000\044\011\064\012\052\013\062\014\047" +
    "\015\060\016\066\017\054\020\063\021\061\022\055\023" +
    "\056\024\053\025\051\030\313\035\065\036\077\037\075" +
    "\001\002\000\052\002\uffe7\004\uffe7\007\uffe7\012\uffe7\026" +
    "\uffe7\040\uffe7\054\uffe7\055\uffe7\056\uffe7\061\uffe7\062\uffe7" +
    "\063\uffe7\064\uffe7\066\uffe7\067\uffe7\072\uffe7\073\uffe7\074" +
    "\uffe7\076\uffe7\077\uffe7\001\002\000\044\011\064\012\052" +
    "\013\062\014\047\015\060\016\066\017\054\020\063\021" +
    "\061\022\055\023\056\024\053\025\051\030\315\035\065" +
    "\036\077\037\075\001\002\000\052\002\uffe8\004\uffe8\007" +
    "\uffe8\012\uffe8\026\uffe8\040\uffe8\054\uffe8\055\uffe8\056\uffe8" +
    "\061\uffe8\062\uffe8\063\uffe8\064\uffe8\066\uffe8\067\uffe8\072" +
    "\uffe8\073\uffe8\074\uffe8\076\uffe8\077\uffe8\001\002\000\026" +
    "\004\034\012\022\026\012\066\071\067\020\072\042\073" +
    "\006\074\016\076\013\077\035\001\002\000\044\011\064" +
    "\012\052\013\062\014\047\015\060\016\066\017\054\020" +
    "\063\021\061\022\055\023\056\024\053\025\051\030\320" +
    "\035\065\036\077\037\075\001\002\000\052\002\uffe5\004" +
    "\uffe5\007\uffe5\012\uffe5\026\uffe5\040\uffe5\054\uffe5\055\uffe5" +
    "\056\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\066\uffe5\067" +
    "\uffe5\072\uffe5\073\uffe5\074\uffe5\076\uffe5\077\uffe5\001\002" +
    "\000\044\011\064\012\052\013\062\014\047\015\060\016" +
    "\066\017\054\020\063\021\061\022\055\023\056\024\053" +
    "\025\051\030\322\035\065\036\077\037\075\001\002\000" +
    "\052\002\uffed\004\uffed\007\uffed\012\uffed\026\uffed\040\uffed" +
    "\054\uffed\055\uffed\056\uffed\061\uffed\062\uffed\063\uffed\064" +
    "\uffed\066\uffed\067\uffed\072\uffed\073\uffed\074\uffed\076\uffed" +
    "\077\uffed\001\002\000\026\004\034\012\022\026\012\066" +
    "\071\067\020\072\042\073\006\074\016\076\013\077\035" +
    "\001\002\000\044\011\064\012\052\013\062\014\047\015" +
    "\060\016\066\017\054\020\063\021\061\022\055\023\056" +
    "\024\053\025\051\030\325\035\065\036\077\037\075\001" +
    "\002\000\052\002\uffea\004\uffea\007\uffea\012\uffea\026\uffea" +
    "\040\uffea\054\uffea\055\uffea\056\uffea\061\uffea\062\uffea\063" +
    "\uffea\064\uffea\066\uffea\067\uffea\072\uffea\073\uffea\074\uffea" +
    "\076\uffea\077\uffea\001\002\000\056\005\uffc0\007\uffc0\011" +
    "\uffc0\012\uffc0\013\062\014\047\015\060\016\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\027" +
    "\uffc0\030\uffc0\032\uffc0\034\uffc0\035\uffc0\036\077\037\075" +
    "\001\002\000\052\002\uffee\004\uffee\007\uffee\012\uffee\026" +
    "\uffee\040\uffee\054\uffee\055\uffee\056\uffee\061\uffee\062\uffee" +
    "\063\uffee\064\uffee\066\uffee\067\uffee\072\uffee\073\uffee\074" +
    "\uffee\076\uffee\077\uffee\001\002\000\026\004\034\012\022" +
    "\026\012\066\071\067\020\072\042\073\006\074\016\076" +
    "\013\077\035\001\002\000\044\005\332\011\064\012\052" +
    "\013\062\014\047\015\060\016\066\017\054\020\063\021" +
    "\061\022\055\023\056\024\053\025\051\035\065\036\077" +
    "\037\075\001\002\000\004\030\333\001\002\000\052\002" +
    "\uffde\004\uffde\007\uffde\012\uffde\026\uffde\040\uffde\054\uffde" +
    "\055\uffde\056\uffde\061\uffde\062\uffde\063\uffde\064\uffde\066" +
    "\uffde\067\uffde\072\uffde\073\uffde\074\uffde\076\uffde\077\uffde" +
    "\001\002\000\056\005\uffb2\007\uffb2\011\064\012\052\013" +
    "\062\014\047\015\060\016\066\017\054\020\063\021\061" +
    "\022\055\023\056\024\uffb2\025\uffb2\027\uffb2\030\uffb2\032" +
    "\uffb2\034\uffb2\035\uffb2\036\077\037\075\001\002\000\026" +
    "\004\034\012\022\026\012\066\071\067\020\072\042\073" +
    "\006\074\016\076\013\077\035\001\002\000\044\005\337" +
    "\011\064\012\052\013\062\014\047\015\060\016\066\017" +
    "\054\020\063\021\061\022\055\023\056\024\053\025\051" +
    "\035\065\036\077\037\075\001\002\000\004\006\340\001" +
    "\002\000\004\060\341\001\002\000\026\004\034\012\022" +
    "\026\012\066\071\067\020\072\042\073\006\074\016\076" +
    "\013\077\035\001\002\000\010\007\345\060\341\065\346" +
    "\001\002\000\010\007\uffd8\060\uffd8\065\uffd8\001\002\000" +
    "\004\007\354\001\002\000\052\002\uffda\004\uffda\007\uffda" +
    "\012\uffda\026\uffda\040\uffda\054\uffda\055\uffda\056\uffda\061" +
    "\uffda\062\uffda\063\uffda\064\uffda\066\uffda\067\uffda\072\uffda" +
    "\073\uffda\074\uffda\076\uffda\077\uffda\001\002\000\004\034" +
    "\350\001\002\000\010\007\uffd9\060\uffd9\065\uffd9\001\002" +
    "\000\004\006\351\001\002\000\042\004\034\012\022\026" +
    "\012\040\040\054\015\056\043\061\033\062\025\063\010" +
    "\066\024\067\020\072\042\073\006\074\016\076\013\077" +
    "\035\001\002\000\044\004\034\007\353\012\022\026\012" +
    "\040\040\054\015\056\043\061\033\062\025\063\010\066" +
    "\024\067\020\072\042\073\006\074\016\076\013\077\035" +
    "\001\002\000\004\007\uffd6\001\002\000\052\002\uffdb\004" +
    "\uffdb\007\uffdb\012\uffdb\026\uffdb\040\uffdb\054\uffdb\055\uffdb" +
    "\056\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\066\uffdb\067" +
    "\uffdb\072\uffdb\073\uffdb\074\uffdb\076\uffdb\077\uffdb\001\002" +
    "\000\044\011\064\012\052\013\062\014\047\015\060\016" +
    "\066\017\054\020\063\021\061\022\055\023\056\024\053" +
    "\025\051\034\356\035\065\036\077\037\075\001\002\000" +
    "\004\006\357\001\002\000\042\004\034\012\022\026\012" +
    "\040\040\054\015\056\043\061\033\062\025\063\010\066" +
    "\024\067\020\072\042\073\006\074\016\076\013\077\035" +
    "\001\002\000\044\004\034\007\361\012\022\026\012\040" +
    "\040\054\015\056\043\061\033\062\025\063\010\066\024" +
    "\067\020\072\042\073\006\074\016\076\013\077\035\001" +
    "\002\000\010\007\uffd7\060\uffd7\065\uffd7\001\002\000\050" +
    "\002\uffff\004\uffff\012\uffff\026\uffff\040\uffff\054\uffff\055" +
    "\uffff\056\uffff\061\uffff\062\uffff\063\uffff\064\uffff\066\uffff" +
    "\067\uffff\072\uffff\073\uffff\074\uffff\076\uffff\077\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\044\002\025\003\003\004\013\005\006\007" +
    "\044\011\020\012\027\013\016\014\045\015\031\016\030" +
    "\021\036\026\026\027\004\031\010\033\035\042\022\001" +
    "\001\000\040\004\361\005\006\007\044\011\020\012\027" +
    "\013\016\014\045\015\031\016\030\021\036\026\026\027" +
    "\004\031\010\033\035\042\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\333\011\066\015\031\042\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\325\011\066\015\031\042" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\251\011\066\015\031\042\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\245\011" +
    "\066\015\031\042\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\125\011\066\015\031\042\022\001\001\000\002\001\001" +
    "\000\012\007\123\011\066\015\031\042\022\001\001\000" +
    "\012\007\122\011\066\015\031\042\022\001\001\000\012" +
    "\007\121\011\066\015\031\042\022\001\001\000\012\007" +
    "\120\011\066\015\031\042\022\001\001\000\012\007\117" +
    "\011\066\015\031\042\022\001\001\000\012\007\116\011" +
    "\066\015\031\042\022\001\001\000\002\001\001\000\012" +
    "\007\114\011\066\015\031\042\022\001\001\000\012\007" +
    "\113\011\066\015\031\042\022\001\001\000\012\007\112" +
    "\011\066\015\031\042\022\001\001\000\012\007\111\011" +
    "\066\015\031\042\022\001\001\000\012\007\110\011\066" +
    "\015\031\042\022\001\001\000\012\007\105\011\066\015" +
    "\031\042\022\001\001\000\012\007\067\011\066\015\031" +
    "\042\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\007\100\010\077\011\066\015\031" +
    "\034\101\042\022\001\001\000\012\007\073\011\066\015" +
    "\031\042\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\103\011\066" +
    "\015\031\042\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\107\011\066\015\031" +
    "\042\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\005\006\007\044\011\020\012\142\013" +
    "\016\014\045\015\031\016\030\021\036\026\026\027\004" +
    "\030\141\031\010\042\022\001\001\000\034\005\006\007" +
    "\044\011\020\012\143\013\016\014\045\015\031\016\030" +
    "\021\036\026\026\027\004\031\010\042\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\005\006\007\044\011\020\012\142\013\016\014\045\015" +
    "\031\016\030\021\036\026\026\027\004\030\146\031\010" +
    "\042\022\001\001\000\034\005\006\007\044\011\020\012" +
    "\143\013\016\014\045\015\031\016\030\021\036\026\026" +
    "\027\004\031\010\042\022\001\001\000\002\001\001\000" +
    "\012\007\151\011\066\015\031\042\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\005\006\007\044\011" +
    "\020\012\142\013\016\014\045\015\031\016\030\021\036" +
    "\026\026\027\004\030\154\031\010\042\022\001\001\000" +
    "\034\005\006\007\044\011\020\012\143\013\016\014\045" +
    "\015\031\016\030\021\036\026\026\027\004\031\010\042" +
    "\022\001\001\000\006\017\156\020\160\001\001\000\004" +
    "\020\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\005\006\007\044\011\020\012\142" +
    "\013\016\014\045\015\031\016\030\021\036\026\026\027" +
    "\004\030\163\031\010\042\022\001\001\000\034\005\006" +
    "\007\044\011\020\012\143\013\016\014\045\015\031\016" +
    "\030\021\036\026\026\027\004\031\010\042\022\001\001" +
    "\000\002\001\001\000\012\007\166\011\066\015\031\042" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\005\006\007\044\011\020\012\142\013\016\014\045\015" +
    "\031\016\030\021\036\026\026\027\004\030\171\031\010" +
    "\042\022\001\001\000\034\005\006\007\044\011\020\012" +
    "\143\013\016\014\045\015\031\016\030\021\036\026\026" +
    "\027\004\031\010\042\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\177\011\066\015\031\042\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\005\006\007\044\011\020" +
    "\012\142\013\016\014\045\015\031\016\030\021\036\026" +
    "\026\027\004\030\202\031\010\042\022\001\001\000\034" +
    "\005\006\007\044\011\020\012\143\013\016\014\045\015" +
    "\031\016\030\021\036\026\026\027\004\031\010\042\022" +
    "\001\001\000\002\001\001\000\004\041\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\222\011\066\015\031" +
    "\042\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\007\240\011\066\015\031\035\237\036\236\042\022" +
    "\001\001\000\004\040\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\227\011\066\015\031\042\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\234\011\066\015\031\042\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\242\011\066\015" +
    "\031\042\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\320\011\066\015\031\042\022\001\001\000\012\007\273" +
    "\011\066\015\031\042\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\263\011\066" +
    "\015\031\042\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\266\011\066\015\031\042\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\271\011" +
    "\066\015\031\042\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\313\011\066\015\031\042\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\303\011\066\015\031\042\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\306\011\066\015" +
    "\031\042\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\311\011\066\015\031\042\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\007\316\011\066\015\031\042\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\323\011\066\015\031\042" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\330\011\066\015" +
    "\031\042\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\335\011" +
    "\066\015\031\042\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\341\023\342\001\001\000\012\007" +
    "\354\011\066\015\031\042\022\001\001\000\006\023\346" +
    "\024\343\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\005\006\007\044\011\020\012\142\013" +
    "\016\014\045\015\031\016\030\021\036\026\026\027\004" +
    "\030\351\031\010\042\022\001\001\000\034\005\006\007" +
    "\044\011\020\012\143\013\016\014\045\015\031\016\030" +
    "\021\036\026\026\027\004\031\010\042\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\005\006\007\044\011\020\012\142\013" +
    "\016\014\045\015\031\016\030\021\036\026\026\027\004" +
    "\030\357\031\010\042\022\001\001\000\034\005\006\007" +
    "\044\011\020\012\143\013\016\014\045\015\031\016\030" +
    "\021\036\026\026\027\004\031\010\042\022\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintacticoFS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintacticoFS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintacticoFS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public AST root;
    public static int index=0;
    public void syntax_error(Symbol s){
        System.out.println("Error sintactico en la linea "+(s.left+1)+" Columna "+s.right+". Identificador "+s.value+" no reconocido"); 
    }
    /**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        javax.swing.JOptionPane.showMessageDialog(null,"Error Sintactico en la linea "+(s.right+1)+"Columna "+s.left+". Identificador"+s.value+" no reconocido.");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintacticoFS$actions {

  

  private final sintacticoFS parser;

  /** Constructor */
  CUP$sintacticoFS$actions(sintacticoFS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintacticoFS$do_action(
    int                        CUP$sintacticoFS$act_num,
    java_cup.runtime.lr_parser CUP$sintacticoFS$parser,
    java.util.Stack            CUP$sintacticoFS$stack,
    int                        CUP$sintacticoFS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintacticoFS$result;

      /* select the action based on the action number */
      switch (CUP$sintacticoFS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LISTA_PARAMETRO ::= EXPRESION 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                RESULT=new LinkedList<>();
                                RESULT.add(a);
                               
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETRO",26, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LISTA_PARAMETRO ::= LISTA_PARAMETRO coma EXPRESION 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                        RESULT=a;
                                                        RESULT.add(b);
                                                     
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETRO",26, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LISTA_PARAMETROS ::= LISTA_PARAMETRO 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                        RESULT=a;
                                     
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // LISTA_PARAMETROS ::= 
            {
              LinkedList<NodoAST> RESULT =null;
		
                        RESULT=new LinkedList<>();
                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LLAMADA_FUNCION ::= valor_id parena LISTA_PARAMETROS parenc 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                RESULT=new Llamada_Funcion(Type.PrimitiveType.FUNCION,a,b);
                                                              
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",7, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FUNCIONES_LENGUAJE ::= alguno parena LISTA_PARAMETRO parenc 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FUNCIONES_LENGUAJE ::= todos parena LISTA_PARAMETRO parenc 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FUNCIONES_LENGUAJE ::= reduce parena LISTA_PARAMETRO parenc 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FUNCIONES_LENGUAJE ::= map parena LISTA_PARAMETRO parenc 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FUNCIONES_LENGUAJE ::= buscar parena LISTA_PARAMETRO parenc 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FUNCIONES_LENGUAJE ::= filtrar parena LISTA_PARAMETROS parenc 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FUNCIONES_LENGUAJE ::= minimo parena parenc 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FUNCIONES_LENGUAJE ::= maximo parena parenc 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FUNCIONES_LENGUAJE ::= invertir parena parenc 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // FUNCIONES_LENGUAJE ::= ascendente parena parenc 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FUNCIONES_LENGUAJE ::= descendente parena parenc 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TERNARIO ::= EXPRESION signoi EXPRESION dospuntos EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=new Ternario(a,b,c);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TERNARIO",11, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LLAMADA_ARREGLO ::= valor_id corchea EXPRESION corchec 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                        RESULT=new AccesoArreglo(a,b);
                                                     
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LLAMADA_ARREGLO",32, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= EXPRESION incremental 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                        RESULT=new Aritmetica(a,true,Operador.AUMENTO);
                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= EXPRESION decremental 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                        RESULT=new Aritmetica(a,true,Operador.AUMENTO);
                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= LLAMADA_ARREGLO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= valor_nulo 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                            RESULT=new Aritmetica(a.toString(),Type.PrimitiveType.NULL);
                         
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= TERNARIO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= LLAMADA_FUNCION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= valor_falso 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                            RESULT=new Aritmetica(a.toString(),Type.PrimitiveType.BOOLEAN);
                          
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= valor_verdadero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                RESULT=new Aritmetica(a.toString(),Type.PrimitiveType.BOOLEAN);
                              
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= valor_cadena 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                            RESULT=new Aritmetica(a.toString(),Type.PrimitiveType.STRING);
                           
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= valor_numero_decimal 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                    RESULT=new Aritmetica(a.toString(),Type.PrimitiveType.DOUBLE);
                                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= valor_numero_completo 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                        RESULT=new Aritmetica(a.toString(),Type.PrimitiveType.INTEGER);
                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= valor_id 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                        RESULT=new Aritmetica(a.toString(),Type.PrimitiveType.ID);
                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= parena EXPRESION parenc 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                        RESULT=a;
                                      
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= not EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                RESULT=new Logica(a,true,Operador.NOT);
                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= EXPRESION or EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Logica(a,b,Operador.OR);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= EXPRESION and EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Logica(a,b,Operador.AND);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION ::= EXPRESION diferente EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Relacional(a,b,Operador.DIFERENTE);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= EXPRESION igualigual EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Relacional(a,b,Operador.IGUALIGUAL);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= EXPRESION menorigualq EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Relacional(a,b,Operador.MENORIGUALQ);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= EXPRESION mayorigualq EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Relacional(a,b,Operador.MAYORIGUALQ);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= EXPRESION menorq EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Relacional(a,b,Operador.MENORQ);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= EXPRESION mayorq EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Relacional(a,b,Operador.MAYORQ);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= EXPRESION pot EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Aritmetica(a,b,Operador.POTENCIA);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= EXPRESION div EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Aritmetica(a,b,Operador.DIVISION);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= EXPRESION por EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Aritmetica(a,b,Operador.MULTIPLICACION);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= EXPRESION menos EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Aritmetica(a,b,Operador.RESTA);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= EXPRESION mas EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Aritmetica(a,b,Operador.SUMA);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= menos EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Aritmetica(a,true,Operador.UNARIO);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LISTA_ID ::= valor_id 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                        RESULT=new LinkedList<NodoAST>();
                        Declaracion declaracion=new Declaracion(Type.PrimitiveType.NULL,a.toString(),null,false,aleft);
                        RESULT.add(declaracion);
                      
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_ID",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LISTA_ID ::= LISTA_ID coma valor_id 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                       RESULT=a;
                                       Declaracion declaracion=new Declaracion(Type.PrimitiveType.NULL,b.toString(),null,false,bleft);
                                       RESULT.add(declaracion);
                                      
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_ID",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LISTA_ARRAY ::= EXPRESION 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                            RESULT=new LinkedList<>();
                            RESULT.add(a);
                          
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_ARRAY",27, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LISTA_ARRAY ::= LISTA_ARRAY coma EXPRESION 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                RESULT=a;
                                                RESULT.add(b);
                                             
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_ARRAY",27, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ELEMENTOS_ARRAY ::= LISTA_ARRAY 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_ARRAY",28, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ELEMENTOS_ARRAY ::= 
            {
              LinkedList<Expresion> RESULT =null;
		RESULT=new LinkedList<>();
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_ARRAY",28, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ELEMENTOS_OBJETO ::= valor_id dospuntos EXPRESION 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_OBJETO",30, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ELEMENTOS_OBJETO ::= ELEMENTOS_OBJETO coma valor_id dospuntos EXPRESION 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_OBJETO",30, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ELEMENTO_PATH ::= valor_path2 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ELEMENTO_PATH",31, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ELEMENTO_PATH ::= valor_path 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ELEMENTO_PATH",31, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION_VARIABLES ::= var LISTA_ID igual llavea ELEMENTOS_OBJETO llavec pyc 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION_VARIABLES ::= var LISTA_ID igual corchea ELEMENTOS_ARRAY corchec pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		
                                                                                int indice=a.size()-1;
                                                                                Declaracion ultima=(Declaracion)a.get(indice);
                                                                                a.remove(indice);
                                                                                Declaracion_Arreglo declaracion_arreglo=new Declaracion_Arreglo(Type.PrimitiveType.NULL,ultima.getId(),null,true,ultima.getLine(),b);
                                                                                a.add(declaracion_arreglo);
                                                                                RESULT=a;
                                                                               
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION_VARIABLES ::= var LISTA_ID igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                int indice=a.size()-1;
                                                                Declaracion ultima=(Declaracion)a.get(indice);
                                                                a.remove(indice);
                                                                ultima.setIntValue(b);
                                                                ultima.setInicializado(true);
                                                                a.add(ultima);
                                                                RESULT=a;
                                                             
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION_VARIABLES ::= var LISTA_ID pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                            RESULT=a;
                                           
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_SINOSI ::= sino si parena EXPRESION parenc llavea SENTENCIAS_INTERNAS llavec 
            {
              LinkedList<SubIf> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                            RESULT=new LinkedList<SubIf>();
                                                                                            RESULT.add(new SubIf(a,b,false));
                                                                                         
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SINOSI",13, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_SINOSI ::= SENTENCIA_SINOSI sino si parena EXPRESION parenc llavea SENTENCIAS_INTERNAS llavec 
            {
              LinkedList<SubIf> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)).right;
		LinkedList<SubIf> a = (LinkedList<SubIf>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                                                RESULT=a;
                                                                                                                RESULT.add(new SubIf(b,c,false));
                                                                                                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SINOSI",13, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_SINO ::= sino llavea SENTENCIAS_INTERNAS llavec 
            {
              SubIf RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                            RESULT=new SubIf(null,a,true);
                                                          
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SINO",14, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_SI ::= si parena EXPRESION parenc llavea SENTENCIAS_INTERNAS llavec 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                 RESULT=new If(a,b,new LinkedList<>(),new SubIf());
                                                                                
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",12, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_SI ::= si parena EXPRESION parenc llavea SENTENCIAS_INTERNAS llavec SENTENCIA_SINO 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		SubIf c = (SubIf)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                                                                    RESULT=new If(a,b,new LinkedList<>(),c);
                                                                                                 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",12, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_SI ::= si parena EXPRESION parenc llavea SENTENCIAS_INTERNAS llavec SENTENCIA_SINOSI 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<SubIf> c = (LinkedList<SubIf>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                                                                    RESULT=new If(a,b,c,new SubIf());
                                                                                                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",12, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_SI ::= si parena EXPRESION parenc llavea SENTENCIAS_INTERNAS llavec SENTENCIA_SINOSI SENTENCIA_SINO 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<SubIf> c = (LinkedList<SubIf>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		SubIf d = (SubIf)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                                                                                        RESULT=new If(a,b,c,d);
                                                                                                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",12, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CASO_DEFECTO ::= defecto dospuntos llavea SENTENCIAS_INTERNAS llavec 
            {
              Caso RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                    RESULT=new Caso(a);
                                                                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("CASO_DEFECTO",18, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LISTA_CASO ::= caso EXPRESION dospuntos llavea SENTENCIAS_INTERNAS llavec 
            {
              Caso RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                             RESULT=new Caso(a,b);
                                                                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_CASO",17, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LISTAS_CASOS ::= LISTA_CASO 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Caso a = (Caso)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                RESULT=new LinkedList<>();
                                RESULT.add(a);
                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTAS_CASOS",16, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LISTAS_CASOS ::= LISTAS_CASOS LISTA_CASO 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<Caso> a = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Caso b = (Caso)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=a;
                                            RESULT.add(b);
                                           
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTAS_CASOS",16, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_SELECCIONA ::= selecciona parena EXPRESION parenc llavea LISTAS_CASOS llavec 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                            RESULT=new Switch(a,b,null);
                                                                                         
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCIONA",15, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_SELECCIONA ::= selecciona parena EXPRESION parenc llavea LISTAS_CASOS CASO_DEFECTO llavec 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Caso c = (Caso)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                                        RESULT=new Switch(a,b,c);
                                                                                                        
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCIONA",15, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIAS_SELECCION ::= SENTENCIA_SELECCIONA 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                RESULT=new LinkedList<NodoAST>();
                                                RESULT.add(a);
                                              
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_SELECCION",10, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIAS_SELECCION ::= SENTENCIA_SI 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                        RESULT=new LinkedList<NodoAST>();
                                        RESULT.add(a);
                                      
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_SELECCION",10, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA_IMPRIMIR ::= imprimir parena EXPRESION parenc pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		
                                                                RESULT=new LinkedList<NodoAST>();
                                                                RESULT.add(new Imprimir(b));
                                                             
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IMPRIMIR",9, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA_DETENER ::= detener pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		
                                    RESULT=new LinkedList<>();
                                    RESULT.add(new Detener());
                                
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DETENER",21, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA_RETORNAR ::= retornar pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		
                                    RESULT=new LinkedList<>();
                                    RESULT.add(new Retornar());
                                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETORNAR",20, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA_RETORNAR ::= retornar EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                RESULT=new LinkedList<>();
                                                RESULT.add(new Retornar(a));
                                              
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETORNAR",20, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA_ASIGNACION ::= EXPRESION incremental pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		
                                                    RESULT=new LinkedList<>();
                                                    RESULT.add(new Aritmetica(a,true,Operador.DECREMENTO));
                                                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA_ASIGNACION ::= EXPRESION decremental pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		
                                                        RESULT=new LinkedList<>();
                                                        RESULT.add(new Aritmetica(a,true,Operador.AUMENTO));
                                                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA_ASIGNACION ::= valor_id corchea EXPRESION corchec div igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                            RESULT=new LinkedList<>();
                                                                                            RESULT.add(new AsignacionArreglo(a.toString(),c,b,Operador.A_DIV));
                                                                                        
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA_ASIGNACION ::= valor_id corchea EXPRESION corchec por igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                            RESULT=new LinkedList<>();
                                                                                            RESULT.add(new AsignacionArreglo(a.toString(),c,b,Operador.A_MULT));
                                                                                        
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA_ASIGNACION ::= valor_id corchea EXPRESION corchec menos igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                            RESULT=new LinkedList<>();
                                                                                            RESULT.add(new AsignacionArreglo(a.toString(),c,b,Operador.A_RESTA));
                                                                                          
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA_ASIGNACION ::= valor_id corchea EXPRESION corchec mas igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                            RESULT=new LinkedList<>();
                                                                                            RESULT.add(new AsignacionArreglo(a.toString(),c,b,Operador.A_SUMA));
                                                                                        
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA_ASIGNACION ::= valor_id corchea EXPRESION corchec igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                        RESULT=new LinkedList<>();
                                                                                        RESULT.add(new AsignacionArreglo(a.toString(),c,b,Operador.IGUAL));
                                                                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA_ASIGNACION ::= valor_id div igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                RESULT=new LinkedList<>();
                                                                RESULT.add(new Asignacion(a.toString(),b,Operador.A_DIV,aright,aleft));
                                                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA_ASIGNACION ::= valor_id por igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                RESULT=new LinkedList<>();
                                                                RESULT.add(new Asignacion(a.toString(),b,Operador.A_MULT,aright,aleft));
                                                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA_ASIGNACION ::= valor_id menos igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                RESULT=new LinkedList<>();
                                                                RESULT.add(new Asignacion(a.toString(),b,Operador.A_RESTA,aright,aleft));
                                                              
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA_ASIGNACION ::= valor_id mas igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                RESULT=new LinkedList<>();
                                                                RESULT.add(new Asignacion(a.toString(),b,Operador.A_SUMA,aright,aleft));
                                                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA_ASIGNACION ::= valor_id igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                            RESULT=new LinkedList<>();
                                                            RESULT.add(new Asignacion(a.toString(),b,Operador.IGUAL,aright,aleft));
                                                        
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIAS_GENERALES ::= LLAMADA_FUNCION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                RESULT=new LinkedList<>();
                                                RESULT.add(a);
                                             
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GENERALES",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIAS_GENERALES ::= SENTENCIA_ASIGNACION 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GENERALES",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIAS_GENERALES ::= SENTENCIA_DETENER 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GENERALES",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIAS_GENERALES ::= SENTENCIA_RETORNAR 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GENERALES",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIAS_GENERALES ::= SENTENCIAS_SELECCION 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GENERALES",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIAS_GENERALES ::= DECLARACION_VARIABLES 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                RESULT=a;
                                               
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GENERALES",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIAS_GENERALES ::= SENTENCIA_IMPRIMIR 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=a;
                                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GENERALES",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIAS_INTERNAS ::= SENTENCIAS_GENERALES 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                RESULT=a;
                                             
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_INTERNAS",22, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIAS_INTERNAS ::= SENTENCIAS_INTERNAS SENTENCIAS_GENERALES 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                                    RESULT=a;
                                                                    RESULT.addAll(b);
                                                                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_INTERNAS",22, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEFINICIONES_PARAMETROS ::= var valor_id 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new LinkedList<>();
                                            RESULT.add(new Declaracion(Type.PrimitiveType.ID,a.toString(),null,false,aright));
                                         
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DEFINICIONES_PARAMETROS",24, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DEFINICIONES_PARAMETROS ::= DEFINICIONES_PARAMETROS coma var valor_id 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                                        RESULT=a;
                                                                        RESULT.add(new Declaracion(Type.PrimitiveType.ID,b.toString(),null,false,bright));
                                                                        
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DEFINICIONES_PARAMETROS",24, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARAR_FUNCIONES ::= funcion valor_id parena DEFINICIONES_PARAMETROS parenc llavea SENTENCIAS_INTERNAS llavec 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                                                        RESULT=new LinkedList<>();
                                                                                                                        RESULT.add(new Funcion(a.toString(),b,c));
                                                                                                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARAR_FUNCIONES",25, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARAR_FUNCIONES ::= funcion valor_id parena parenc llavea SENTENCIAS_INTERNAS llavec 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                            RESULT=new LinkedList<>();
                                                                                            RESULT.add(new Funcion(a.toString(),b));
                                                                                          
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARAR_FUNCIONES",25, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA_GLOBAL ::= DECLARAR_FUNCIONES 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_GLOBAL",2, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA_GLOBAL ::= importar parena ELEMENTO_PATH parenc pyc 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_GLOBAL",2, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA_GLOBAL ::= SENTENCIAS_GENERALES 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_GLOBAL",2, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIAS_GLOBALES ::= SENTENCIA_GLOBAL 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=a;
                                         
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GLOBALES",1, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIAS_GLOBALES ::= SENTENCIAS_GLOBALES SENTENCIA_GLOBAL 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                                RESULT=a;
                                                                RESULT.addAll(b);
                                                               
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GLOBALES",1, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIAL ::= SENTENCIAS_GLOBALES 
            {
              AST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                this.parser.root=new AST(a);
                               
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INICIAL",0, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		AST start_val = (AST)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = start_val;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintacticoFS$parser.done_parsing();
          return CUP$sintacticoFS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

