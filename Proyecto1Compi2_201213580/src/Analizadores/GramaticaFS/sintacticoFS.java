
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 06 18:48:54 CST 2019
//----------------------------------------------------

package Analizadores.GramaticaFS;

import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.lang.*;
import javax.swing.JOptionPane;
import java.io.*;
import java.util.LinkedList;
import java.awt.Color;
import ArbolAST.AST;
import ArbolAST.NodoAST;
import ArbolAST.Entorno.Type;
import ArbolAST.Expresiones.Expresion;
import ArbolAST.Expresiones.operacion.Logica;
import ArbolAST.Expresiones.operacion.Aritmetica;
import ArbolAST.Expresiones.operacion.Relacional;
import ArbolAST.Expresiones.operacion.Operacion.Operador;
import ArbolAST.Expresiones.operacion.Ternario;
import ArbolAST.Expresiones.operacion.Retornar;
import ArbolAST.Expresiones.Llamada_Funcion;
import ArbolAST.Instrucciones.Imprimir;
import ArbolAST.Instrucciones.Detener;
import ArbolAST.Instrucciones.Seleccion.If;
import ArbolAST.Instrucciones.Seleccion.SubIf;
import ArbolAST.Instrucciones.Seleccion.Caso;
import ArbolAST.Instrucciones.Seleccion.Switch;
import ArbolAST.Instrucciones.Asignacion;
import ArbolAST.Instrucciones.Funcion;
import ArbolAST.Instrucciones.Declaracion;
import ArbolAST.Instrucciones.AsignacionArreglo;
import ArbolAST.Instrucciones.Declaracion_Arreglo;
import ArbolAST.Expresiones.AccesoArreglo;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 06 18:48:54 CST 2019
  */
public class sintacticoFS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintacticoFS() {super();}

  /** Constructor which sets the default scanner. */
  public sintacticoFS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintacticoFS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\007" +
    "\000\002\004\003\000\002\033\011\000\002\033\012\000" +
    "\002\032\006\000\002\032\004\000\002\030\004\000\002" +
    "\030\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\004\000\002\012\003\000\002\043\006\000" +
    "\002\044\005\000\002\044\003\000\002\031\006\000\002" +
    "\031\007\000\002\031\007\000\002\031\007\000\002\031" +
    "\007\000\002\031\011\000\002\031\012\000\002\031\012" +
    "\000\002\031\012\000\002\031\012\000\002\031\005\000" +
    "\002\031\005\000\002\026\005\000\002\026\004\000\002" +
    "\027\004\000\002\013\007\000\002\014\003\000\002\014" +
    "\003\000\002\021\012\000\002\021\011\000\002\022\004" +
    "\000\002\022\003\000\002\023\010\000\002\024\007\000" +
    "\002\016\013\000\002\016\012\000\002\016\012\000\002" +
    "\016\011\000\002\020\006\000\002\017\013\000\002\017" +
    "\012\000\002\005\005\000\002\005\007\000\002\005\011" +
    "\000\002\005\011\000\002\041\003\000\002\041\003\000" +
    "\002\040\007\000\002\040\005\000\002\036\002\000\002" +
    "\036\003\000\002\035\005\000\002\035\003\000\002\006" +
    "\005\000\002\006\003\000\002\007\004\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\004" +
    "\000\002\007\005\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\004\000\002\007\004" +
    "\000\002\042\006\000\002\015\007\000\002\037\005\000" +
    "\002\037\005\000\002\037\005\000\002\037\005\000\002" +
    "\037\005\000\002\037\006\000\002\037\006\000\002\037" +
    "\006\000\002\037\006\000\002\037\006\000\002\037\006" +
    "\000\002\011\006\000\002\010\002\000\002\010\003\000" +
    "\002\034\005\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011d\000\024\040\027\054\013\055\030\056\031\061" +
    "\024\062\017\063\007\064\032\066\016\001\002\000\026" +
    "\002\000\040\027\054\013\055\030\056\031\061\024\062" +
    "\017\063\007\064\032\066\016\001\002\000\030\002\ufff0" +
    "\007\ufff0\040\ufff0\054\ufff0\055\ufff0\056\ufff0\061\ufff0\062" +
    "\ufff0\063\ufff0\064\ufff0\066\ufff0\001\002\000\030\002\uffef" +
    "\007\uffef\040\uffef\054\uffef\055\uffef\056\uffef\061\uffef\062" +
    "\uffef\063\uffef\064\uffef\066\uffef\001\002\000\004\004\u010a" +
    "\001\002\000\030\002\ufff3\007\ufff3\040\ufff3\054\ufff3\055" +
    "\ufff3\056\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\066\ufff3" +
    "\001\002\000\026\002\ufffe\040\ufffe\054\ufffe\055\ufffe\056" +
    "\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\066\ufffe\001\002" +
    "\000\030\002\uffed\007\uffed\040\uffed\054\uffed\055\uffed\056" +
    "\uffed\061\uffed\062\uffed\063\uffed\064\uffed\066\uffed\001\002" +
    "\000\004\004\u0106\001\002\000\030\002\ufff4\007\ufff4\040" +
    "\ufff4\054\ufff4\055\ufff4\056\ufff4\061\ufff4\062\ufff4\063\ufff4" +
    "\064\ufff4\066\ufff4\001\002\000\004\030\u0105\001\002\000" +
    "\026\004\075\010\263\011\262\012\257\013\261\014\253" +
    "\031\256\033\254\036\260\037\255\001\002\000\030\004" +
    "\066\012\063\026\060\030\251\066\074\067\062\072\071" +
    "\073\065\074\057\076\073\077\061\001\002\000\004\002" +
    "\247\001\002\000\030\002\ufff1\007\ufff1\040\ufff1\054\ufff1" +
    "\055\ufff1\056\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\066" +
    "\ufff1\001\002\000\026\002\ufffd\040\ufffd\054\ufffd\055\ufffd" +
    "\056\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\066\ufffd\001" +
    "\002\000\030\002\uffd9\007\uffd9\040\uffd9\054\uffd9\055\uffd9" +
    "\056\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\066\uffd9\001" +
    "\002\000\004\030\246\001\002\000\026\002\ufffb\040\ufffb" +
    "\054\ufffb\055\ufffb\056\ufffb\061\ufffb\062\ufffb\063\ufffb\064" +
    "\ufffb\066\ufffb\001\002\000\030\002\uffd8\007\uffd8\040\uffd8" +
    "\054\uffd8\055\uffd8\056\uffd8\061\uffd8\062\uffd8\063\uffd8\064" +
    "\uffd8\066\uffd8\001\002\000\004\066\213\001\002\000\004" +
    "\004\205\001\002\000\004\004\056\001\002\000\004\066" +
    "\034\001\002\000\030\002\ufff2\007\ufff2\040\ufff2\054\ufff2" +
    "\055\ufff2\056\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2\066" +
    "\ufff2\001\002\000\004\004\035\001\002\000\006\005\036" +
    "\040\040\001\002\000\004\006\053\001\002\000\006\005" +
    "\042\027\043\001\002\000\004\066\041\001\002\000\006" +
    "\005\ufff7\027\ufff7\001\002\000\004\006\046\001\002\000" +
    "\004\040\044\001\002\000\004\066\045\001\002\000\006" +
    "\005\ufff8\027\ufff8\001\002\000\020\040\027\054\013\056" +
    "\031\061\024\062\017\063\007\066\016\001\002\000\022" +
    "\007\052\040\027\054\013\056\031\061\024\062\017\063" +
    "\007\066\016\001\002\000\022\007\ufff5\040\ufff5\054\ufff5" +
    "\056\ufff5\061\ufff5\062\ufff5\063\ufff5\066\ufff5\001\002\000" +
    "\022\007\ufff6\040\ufff6\054\ufff6\056\ufff6\061\ufff6\062\ufff6" +
    "\063\ufff6\066\ufff6\001\002\000\026\002\ufff9\040\ufff9\054" +
    "\ufff9\055\ufff9\056\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9" +
    "\066\ufff9\001\002\000\020\040\027\054\013\056\031\061" +
    "\024\062\017\063\007\066\016\001\002\000\022\007\055" +
    "\040\027\054\013\056\031\061\024\062\017\063\007\066" +
    "\016\001\002\000\026\002\ufffa\040\ufffa\054\ufffa\055\ufffa" +
    "\056\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\066\ufffa\001" +
    "\002\000\026\004\066\012\063\026\060\066\074\067\062" +
    "\072\071\073\065\074\057\076\073\077\061\001\002\000" +
    "\056\005\uffa7\007\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7" +
    "\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023" +
    "\uffa7\024\uffa7\025\uffa7\027\uffa7\030\uffa7\032\uffa7\034\uffa7" +
    "\035\uffa7\036\uffa7\037\uffa7\001\002\000\026\004\066\012" +
    "\063\026\060\066\074\067\062\072\071\073\065\074\057" +
    "\076\073\077\061\001\002\000\056\005\uffa4\007\uffa4\011" +
    "\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4" +
    "\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\027" +
    "\uffa4\030\uffa4\032\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4" +
    "\001\002\000\056\005\uffab\007\uffab\011\uffab\012\uffab\013" +
    "\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab" +
    "\022\uffab\023\uffab\024\uffab\025\uffab\027\uffab\030\uffab\032" +
    "\uffab\034\uffab\035\uffab\036\uffab\037\uffab\001\002\000\026" +
    "\004\066\012\063\026\060\066\074\067\062\072\071\073" +
    "\065\074\057\076\073\077\061\001\002\000\056\005\uffa3" +
    "\007\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016" +
    "\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3" +
    "\025\uffa3\027\uffa3\030\uffa3\032\uffa3\034\uffa3\035\uffa3\036" +
    "\uffa3\037\uffa3\001\002\000\056\005\uffa8\007\uffa8\011\uffa8" +
    "\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020" +
    "\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\027\uffa8" +
    "\030\uffa8\032\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\001" +
    "\002\000\026\004\066\012\063\026\060\066\074\067\062" +
    "\072\071\073\065\074\057\076\073\077\061\001\002\000" +
    "\056\005\uffa5\007\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5" +
    "\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023" +
    "\uffa5\024\uffa5\025\uffa5\027\uffa5\030\uffa5\032\uffa5\034\uffa5" +
    "\035\uffa5\036\uffa5\037\uffa5\001\002\000\056\005\uffa6\007" +
    "\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6" +
    "\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025" +
    "\uffa6\027\uffa6\030\uffa6\032\uffa6\034\uffa6\035\uffa6\036\uffa6" +
    "\037\uffa6\001\002\000\056\005\uffa9\007\uffa9\011\uffa9\012" +
    "\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9" +
    "\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\027\uffa9\030" +
    "\uffa9\032\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\001\002" +
    "\000\044\005\147\011\116\012\105\013\113\014\100\015" +
    "\112\016\117\017\106\020\115\021\114\022\107\023\111" +
    "\024\104\025\103\035\120\036\110\037\101\001\002\000" +
    "\056\005\uffaa\007\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa" +
    "\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023" +
    "\uffaa\024\uffaa\025\uffaa\027\uffaa\030\uffaa\032\uffaa\034\uffaa" +
    "\035\uffaa\036\uffaa\037\uffaa\001\002\000\062\004\075\005" +
    "\uffac\007\uffac\011\uffac\012\uffac\013\uffac\014\uffac\015\uffac" +
    "\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024" +
    "\uffac\025\uffac\027\uffac\030\uffac\031\076\032\uffac\034\uffac" +
    "\035\uffac\036\uffac\037\uffac\001\002\000\030\004\066\005" +
    "\uff92\012\063\026\060\066\074\067\062\072\071\073\065" +
    "\074\057\076\073\077\061\001\002\000\026\004\066\012" +
    "\063\026\060\066\074\067\062\072\071\073\065\074\057" +
    "\076\073\077\061\001\002\000\044\011\116\012\105\013" +
    "\113\014\100\015\112\016\117\017\106\020\115\021\114" +
    "\022\107\023\111\024\104\025\103\032\102\035\120\036" +
    "\110\037\101\001\002\000\026\004\066\012\063\026\060" +
    "\066\074\067\062\072\071\073\065\074\057\076\073\077" +
    "\061\001\002\000\056\005\uffa2\007\uffa2\011\uffa2\012\uffa2" +
    "\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021" +
    "\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\027\uffa2\030\uffa2" +
    "\032\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\001\002\000" +
    "\056\005\uffa0\007\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0" +
    "\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023" +
    "\uffa0\024\uffa0\025\uffa0\027\uffa0\030\uffa0\032\uffa0\034\uffa0" +
    "\035\uffa0\036\uffa0\037\uffa0\001\002\000\026\004\066\012" +
    "\063\026\060\066\074\067\062\072\071\073\065\074\057" +
    "\076\073\077\061\001\002\000\026\004\066\012\063\026" +
    "\060\066\074\067\062\072\071\073\065\074\057\076\073" +
    "\077\061\001\002\000\026\004\066\012\063\026\060\066" +
    "\074\067\062\072\071\073\065\074\057\076\073\077\061" +
    "\001\002\000\026\004\066\012\063\026\060\066\074\067" +
    "\062\072\071\073\065\074\057\076\073\077\061\001\002" +
    "\000\026\004\066\012\063\026\060\066\074\067\062\072" +
    "\071\073\065\074\057\076\073\077\061\001\002\000\056" +
    "\005\uffa1\007\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015" +
    "\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1" +
    "\024\uffa1\025\uffa1\027\uffa1\030\uffa1\032\uffa1\034\uffa1\035" +
    "\uffa1\036\uffa1\037\uffa1\001\002\000\026\004\066\012\063" +
    "\026\060\066\074\067\062\072\071\073\065\074\057\076" +
    "\073\077\061\001\002\000\026\004\066\012\063\026\060" +
    "\066\074\067\062\072\071\073\065\074\057\076\073\077" +
    "\061\001\002\000\026\004\066\012\063\026\060\066\074" +
    "\067\062\072\071\073\065\074\057\076\073\077\061\001" +
    "\002\000\026\004\066\012\063\026\060\066\074\067\062" +
    "\072\071\073\065\074\057\076\073\077\061\001\002\000" +
    "\026\004\066\012\063\026\060\066\074\067\062\072\071" +
    "\073\065\074\057\076\073\077\061\001\002\000\026\004" +
    "\066\012\063\026\060\066\074\067\062\072\071\073\065" +
    "\074\057\076\073\077\061\001\002\000\026\004\066\012" +
    "\063\026\060\066\074\067\062\072\071\073\065\074\057" +
    "\076\073\077\061\001\002\000\026\004\066\012\063\026" +
    "\060\066\074\067\062\072\071\073\065\074\057\076\073" +
    "\077\061\001\002\000\044\011\116\012\105\013\113\014" +
    "\100\015\112\016\117\017\106\020\115\021\114\022\107" +
    "\023\111\024\104\025\103\034\122\035\120\036\110\037" +
    "\101\001\002\000\026\004\066\012\063\026\060\066\074" +
    "\067\062\072\071\073\065\074\057\076\073\077\061\001" +
    "\002\000\056\005\uff9f\007\uff9f\011\116\012\105\013\113" +
    "\014\100\015\112\016\117\017\106\020\115\021\114\022" +
    "\107\023\111\024\104\025\103\027\uff9f\030\uff9f\032\uff9f" +
    "\034\uff9f\035\120\036\110\037\101\001\002\000\056\005" +
    "\uffb6\007\uffb6\011\116\012\105\013\113\014\100\015\112" +
    "\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024" +
    "\uffb6\025\uffb6\027\uffb6\030\uffb6\032\uffb6\034\uffb6\035\uffb6" +
    "\036\110\037\101\001\002\000\056\005\uffbb\007\uffbb\011" +
    "\uffbb\012\uffbb\013\113\014\100\015\112\016\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\027" +
    "\uffbb\030\uffbb\032\uffbb\034\uffbb\035\uffbb\036\110\037\101" +
    "\001\002\000\056\005\uffb4\007\uffb4\011\116\012\105\013" +
    "\113\014\100\015\112\016\uffb4\017\uffb4\020\uffb4\021\uffb4" +
    "\022\uffb4\023\uffb4\024\uffb4\025\uffb4\027\uffb4\030\uffb4\032" +
    "\uffb4\034\uffb4\035\uffb4\036\110\037\101\001\002\000\056" +
    "\005\uffb3\007\uffb3\011\116\012\105\013\113\014\100\015" +
    "\112\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3" +
    "\024\uffb3\025\uffb3\027\uffb3\030\uffb3\032\uffb3\034\uffb3\035" +
    "\uffb3\036\110\037\101\001\002\000\056\005\uffb9\007\uffb9" +
    "\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\112\016\uffb9\017" +
    "\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9" +
    "\027\uffb9\030\uffb9\032\uffb9\034\uffb9\035\uffb9\036\110\037" +
    "\101\001\002\000\056\005\uffb7\007\uffb7\011\uffb7\012\uffb7" +
    "\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\027\uffb7\030\uffb7" +
    "\032\uffb7\034\uffb7\035\uffb7\036\110\037\101\001\002\000" +
    "\056\005\uffb1\007\uffb1\011\116\012\105\013\113\014\100" +
    "\015\112\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023" +
    "\uffb1\024\uffb1\025\uffb1\027\uffb1\030\uffb1\032\uffb1\034\uffb1" +
    "\035\uffb1\036\110\037\101\001\002\000\056\005\uffb2\007" +
    "\uffb2\011\116\012\105\013\113\014\100\015\112\016\uffb2" +
    "\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025" +
    "\uffb2\027\uffb2\030\uffb2\032\uffb2\034\uffb2\035\uffb2\036\110" +
    "\037\101\001\002\000\056\005\uffb5\007\uffb5\011\116\012" +
    "\105\013\113\014\100\015\112\016\uffb5\017\uffb5\020\uffb5" +
    "\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\027\uffb5\030" +
    "\uffb5\032\uffb5\034\uffb5\035\uffb5\036\110\037\101\001\002" +
    "\000\056\005\uffba\007\uffba\011\uffba\012\uffba\013\113\014" +
    "\100\015\112\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba" +
    "\023\uffba\024\uffba\025\uffba\027\uffba\030\uffba\032\uffba\034" +
    "\uffba\035\uffba\036\110\037\101\001\002\000\056\005\uffb0" +
    "\007\uffb0\011\116\012\105\013\113\014\100\015\112\016" +
    "\117\017\106\020\115\021\114\022\107\023\111\024\uffb0" +
    "\025\uffb0\027\uffb0\030\uffb0\032\uffb0\034\uffb0\035\uffb0\036" +
    "\110\037\101\001\002\000\056\005\uffaf\007\uffaf\011\116" +
    "\012\105\013\113\014\100\015\112\016\117\017\106\020" +
    "\115\021\114\022\107\023\111\024\104\025\uffaf\027\uffaf" +
    "\030\uffaf\032\uffaf\034\uffaf\035\uffaf\036\110\037\101\001" +
    "\002\000\056\005\uffb8\007\uffb8\011\uffb8\012\uffb8\013\uffb8" +
    "\014\uffb8\015\112\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022" +
    "\uffb8\023\uffb8\024\uffb8\025\uffb8\027\uffb8\030\uffb8\032\uffb8" +
    "\034\uffb8\035\uffb8\036\110\037\101\001\002\000\004\005" +
    "\146\001\002\000\046\005\uff8f\011\116\012\105\013\113" +
    "\014\100\015\112\016\117\017\106\020\115\021\114\022" +
    "\107\023\111\024\104\025\103\027\uff8f\035\120\036\110" +
    "\037\101\001\002\000\006\005\uff91\027\144\001\002\000" +
    "\026\004\066\012\063\026\060\066\074\067\062\072\071" +
    "\073\065\074\057\076\073\077\061\001\002\000\046\005" +
    "\uff90\011\116\012\105\013\113\014\100\015\112\016\117" +
    "\017\106\020\115\021\114\022\107\023\111\024\104\025" +
    "\103\027\uff90\035\120\036\110\037\101\001\002\000\056" +
    "\005\uff93\007\uff93\011\uff93\012\uff93\013\uff93\014\uff93\015" +
    "\uff93\016\uff93\017\uff93\020\uff93\021\uff93\022\uff93\023\uff93" +
    "\024\uff93\025\uff93\027\uff93\030\uff93\032\uff93\034\uff93\035" +
    "\uff93\036\uff93\037\uff93\001\002\000\004\006\150\001\002" +
    "\000\020\040\027\054\013\056\031\061\024\062\017\063" +
    "\007\066\016\001\002\000\022\007\152\040\027\054\013" +
    "\056\031\061\024\062\017\063\007\066\016\001\002\000" +
    "\032\002\uffce\007\uffce\040\uffce\054\uffce\055\uffce\056\uffce" +
    "\057\154\061\uffce\062\uffce\063\uffce\064\uffce\066\uffce\001" +
    "\002\000\032\002\uffd0\007\uffd0\040\uffd0\054\uffd0\055\uffd0" +
    "\056\uffd0\057\170\061\uffd0\062\uffd0\063\uffd0\064\uffd0\066" +
    "\uffd0\001\002\000\006\006\157\056\156\001\002\000\030" +
    "\002\uffcf\007\uffcf\040\uffcf\054\uffcf\055\uffcf\056\uffcf\061" +
    "\uffcf\062\uffcf\063\uffcf\064\uffcf\066\uffcf\001\002\000\004" +
    "\004\162\001\002\000\020\040\027\054\013\056\031\061" +
    "\024\062\017\063\007\066\016\001\002\000\022\007\161" +
    "\040\027\054\013\056\031\061\024\062\017\063\007\066" +
    "\016\001\002\000\030\002\uffcd\007\uffcd\040\uffcd\054\uffcd" +
    "\055\uffcd\056\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\066" +
    "\uffcd\001\002\000\026\004\066\012\063\026\060\066\074" +
    "\067\062\072\071\073\065\074\057\076\073\077\061\001" +
    "\002\000\044\005\164\011\116\012\105\013\113\014\100" +
    "\015\112\016\117\017\106\020\115\021\114\022\107\023" +
    "\111\024\104\025\103\035\120\036\110\037\101\001\002" +
    "\000\004\006\165\001\002\000\020\040\027\054\013\056" +
    "\031\061\024\062\017\063\007\066\016\001\002\000\022" +
    "\007\167\040\027\054\013\056\031\061\024\062\017\063" +
    "\007\066\016\001\002\000\032\002\uffcb\007\uffcb\040\uffcb" +
    "\054\uffcb\055\uffcb\056\uffcb\057\uffcb\061\uffcb\062\uffcb\063" +
    "\uffcb\064\uffcb\066\uffcb\001\002\000\006\006\157\056\172" +
    "\001\002\000\030\002\uffd1\007\uffd1\040\uffd1\054\uffd1\055" +
    "\uffd1\056\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\066\uffd1" +
    "\001\002\000\004\004\173\001\002\000\026\004\066\012" +
    "\063\026\060\066\074\067\062\072\071\073\065\074\057" +
    "\076\073\077\061\001\002\000\044\005\175\011\116\012" +
    "\105\013\113\014\100\015\112\016\117\017\106\020\115" +
    "\021\114\022\107\023\111\024\104\025\103\035\120\036" +
    "\110\037\101\001\002\000\004\006\176\001\002\000\020" +
    "\040\027\054\013\056\031\061\024\062\017\063\007\066" +
    "\016\001\002\000\022\007\200\040\027\054\013\056\031" +
    "\061\024\062\017\063\007\066\016\001\002\000\032\002" +
    "\uffcc\007\uffcc\040\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc" +
    "\061\uffcc\062\uffcc\063\uffcc\064\uffcc\066\uffcc\001\002\000" +
    "\044\005\202\011\116\012\105\013\113\014\100\015\112" +
    "\016\117\017\106\020\115\021\114\022\107\023\111\024" +
    "\104\025\103\035\120\036\110\037\101\001\002\000\056" +
    "\005\uffad\007\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015" +
    "\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad" +
    "\024\uffad\025\uffad\027\uffad\030\uffad\032\uffad\034\uffad\035" +
    "\uffad\036\uffad\037\uffad\001\002\000\056\005\uffbc\007\uffbc" +
    "\011\uffbc\012\uffbc\013\113\014\100\015\112\016\uffbc\017" +
    "\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc" +
    "\027\uffbc\030\uffbc\032\uffbc\034\uffbc\035\uffbc\036\110\037" +
    "\101\001\002\000\056\005\uffae\007\uffae\011\116\012\105" +
    "\013\113\014\100\015\112\016\117\017\106\020\115\021" +
    "\114\022\107\023\111\024\uffae\025\uffae\027\uffae\030\uffae" +
    "\032\uffae\034\uffae\035\uffae\036\110\037\101\001\002\000" +
    "\006\070\210\071\207\001\002\000\004\005\211\001\002" +
    "\000\004\005\uffc5\001\002\000\004\005\uffc6\001\002\000" +
    "\004\030\212\001\002\000\026\002\ufffc\040\ufffc\054\ufffc" +
    "\055\ufffc\056\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\066" +
    "\ufffc\001\002\000\010\010\uffbd\027\uffbd\030\uffbd\001\002" +
    "\000\010\010\216\027\217\030\215\001\002\000\030\002" +
    "\uffca\007\uffca\040\uffca\054\uffca\055\uffca\056\uffca\061\uffca" +
    "\062\uffca\063\uffca\064\uffca\066\uffca\001\002\000\032\004" +
    "\066\006\222\012\063\026\060\031\221\066\074\067\062" +
    "\072\071\073\065\074\057\076\073\077\061\001\002\000" +
    "\004\066\220\001\002\000\010\010\uffbe\027\uffbe\030\uffbe" +
    "\001\002\000\030\004\066\012\063\026\060\032\uffc2\066" +
    "\074\067\062\072\071\073\065\074\057\076\073\077\061" +
    "\001\002\000\004\066\226\001\002\000\044\011\116\012" +
    "\105\013\113\014\100\015\112\016\117\017\106\020\115" +
    "\021\114\022\107\023\111\024\104\025\103\030\224\035" +
    "\120\036\110\037\101\001\002\000\030\002\uffc9\007\uffc9" +
    "\040\uffc9\054\uffc9\055\uffc9\056\uffc9\061\uffc9\062\uffc9\063" +
    "\uffc9\064\uffc9\066\uffc9\001\002\000\006\007\231\027\232" +
    "\001\002\000\004\034\227\001\002\000\026\004\066\012" +
    "\063\026\060\066\074\067\062\072\071\073\065\074\057" +
    "\076\073\077\061\001\002\000\046\007\uffc3\011\116\012" +
    "\105\013\113\014\100\015\112\016\117\017\106\020\115" +
    "\021\114\022\107\023\111\024\104\025\103\027\uffc3\035" +
    "\120\036\110\037\101\001\002\000\004\030\236\001\002" +
    "\000\004\066\233\001\002\000\004\034\234\001\002\000" +
    "\026\004\066\012\063\026\060\066\074\067\062\072\071" +
    "\073\065\074\057\076\073\077\061\001\002\000\046\007" +
    "\uffc4\011\116\012\105\013\113\014\100\015\112\016\117" +
    "\017\106\020\115\021\114\022\107\023\111\024\104\025" +
    "\103\027\uffc4\035\120\036\110\037\101\001\002\000\030" +
    "\002\uffc7\007\uffc7\040\uffc7\054\uffc7\055\uffc7\056\uffc7\061" +
    "\uffc7\062\uffc7\063\uffc7\064\uffc7\066\uffc7\001\002\000\004" +
    "\032\244\001\002\000\006\027\242\032\uffc1\001\002\000" +
    "\046\011\116\012\105\013\113\014\100\015\112\016\117" +
    "\017\106\020\115\021\114\022\107\023\111\024\104\025" +
    "\103\027\uffbf\032\uffbf\035\120\036\110\037\101\001\002" +
    "\000\026\004\066\012\063\026\060\066\074\067\062\072" +
    "\071\073\065\074\057\076\073\077\061\001\002\000\046" +
    "\011\116\012\105\013\113\014\100\015\112\016\117\017" +
    "\106\020\115\021\114\022\107\023\111\024\104\025\103" +
    "\027\uffc0\032\uffc0\035\120\036\110\037\101\001\002\000" +
    "\004\030\245\001\002\000\030\002\uffc8\007\uffc8\040\uffc8" +
    "\054\uffc8\055\uffc8\056\uffc8\061\uffc8\062\uffc8\063\uffc8\064" +
    "\uffc8\066\uffc8\001\002\000\030\002\uffdb\007\uffdb\040\uffdb" +
    "\054\uffdb\055\uffdb\056\uffdb\061\uffdb\062\uffdb\063\uffdb\064" +
    "\uffdb\066\uffdb\001\002\000\004\002\001\001\002\000\044" +
    "\011\116\012\105\013\113\014\100\015\112\016\117\017" +
    "\106\020\115\021\114\022\107\023\111\024\104\025\103" +
    "\030\252\035\120\036\110\037\101\001\002\000\030\002" +
    "\uffdc\007\uffdc\040\uffdc\054\uffdc\055\uffdc\056\uffdc\061\uffdc" +
    "\062\uffdc\063\uffdc\064\uffdc\066\uffdc\001\002\000\030\002" +
    "\uffdd\007\uffdd\040\uffdd\054\uffdd\055\uffdd\056\uffdd\061\uffdd" +
    "\062\uffdd\063\uffdd\064\uffdd\066\uffdd\001\002\000\004\010" +
    "\u0102\001\002\000\030\041\340\042\331\043\330\044\337" +
    "\045\335\046\342\047\336\050\326\051\334\052\327\053" +
    "\341\001\002\000\004\030\325\001\002\000\026\004\066" +
    "\012\063\026\060\066\074\067\062\072\071\073\065\074" +
    "\057\076\073\077\061\001\002\000\004\010\275\001\002" +
    "\000\004\030\274\001\002\000\004\010\271\001\002\000" +
    "\004\010\266\001\002\000\026\004\066\012\063\026\060" +
    "\066\074\067\062\072\071\073\065\074\057\076\073\077" +
    "\061\001\002\000\044\011\116\012\105\013\113\014\100" +
    "\015\112\016\117\017\106\020\115\021\114\022\107\023" +
    "\111\024\104\025\103\030\265\035\120\036\110\037\101" +
    "\001\002\000\030\002\uffe9\007\uffe9\040\uffe9\054\uffe9\055" +
    "\uffe9\056\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9\066\uffe9" +
    "\001\002\000\026\004\066\012\063\026\060\066\074\067" +
    "\062\072\071\073\065\074\057\076\073\077\061\001\002" +
    "\000\044\011\116\012\105\013\113\014\100\015\112\016" +
    "\117\017\106\020\115\021\114\022\107\023\111\024\104" +
    "\025\103\030\270\035\120\036\110\037\101\001\002\000" +
    "\030\002\uffe8\007\uffe8\040\uffe8\054\uffe8\055\uffe8\056\uffe8" +
    "\061\uffe8\062\uffe8\063\uffe8\064\uffe8\066\uffe8\001\002\000" +
    "\026\004\066\012\063\026\060\066\074\067\062\072\071" +
    "\073\065\074\057\076\073\077\061\001\002\000\044\011" +
    "\116\012\105\013\113\014\100\015\112\016\117\017\106" +
    "\020\115\021\114\022\107\023\111\024\104\025\103\030" +
    "\273\035\120\036\110\037\101\001\002\000\030\002\uffe6" +
    "\007\uffe6\040\uffe6\054\uffe6\055\uffe6\056\uffe6\061\uffe6\062" +
    "\uffe6\063\uffe6\064\uffe6\066\uffe6\001\002\000\030\002\uffde" +
    "\007\uffde\040\uffde\054\uffde\055\uffde\056\uffde\061\uffde\062" +
    "\uffde\063\uffde\064\uffde\066\uffde\001\002\000\026\004\066" +
    "\012\063\026\060\066\074\067\062\072\071\073\065\074" +
    "\057\076\073\077\061\001\002\000\044\011\116\012\105" +
    "\013\113\014\100\015\112\016\117\017\106\020\115\021" +
    "\114\022\107\023\111\024\104\025\103\030\277\035\120" +
    "\036\110\037\101\001\002\000\030\002\uffe7\007\uffe7\040" +
    "\uffe7\054\uffe7\055\uffe7\056\uffe7\061\uffe7\062\uffe7\063\uffe7" +
    "\064\uffe7\066\uffe7\001\002\000\044\011\116\012\105\013" +
    "\113\014\100\015\112\016\117\017\106\020\115\021\114" +
    "\022\107\023\111\024\104\025\103\032\301\035\120\036" +
    "\110\037\101\001\002\000\014\010\303\011\304\012\305" +
    "\013\302\014\306\001\002\000\004\010\322\001\002\000" +
    "\026\004\066\012\063\026\060\066\074\067\062\072\071" +
    "\073\065\074\057\076\073\077\061\001\002\000\004\010" +
    "\315\001\002\000\004\010\312\001\002\000\004\010\307" +
    "\001\002\000\026\004\066\012\063\026\060\066\074\067" +
    "\062\072\071\073\065\074\057\076\073\077\061\001\002" +
    "\000\044\011\116\012\105\013\113\014\100\015\112\016" +
    "\117\017\106\020\115\021\114\022\107\023\111\024\104" +
    "\025\103\030\311\035\120\036\110\037\101\001\002\000" +
    "\030\002\uffe0\007\uffe0\040\uffe0\054\uffe0\055\uffe0\056\uffe0" +
    "\061\uffe0\062\uffe0\063\uffe0\064\uffe0\066\uffe0\001\002\000" +
    "\026\004\066\012\063\026\060\066\074\067\062\072\071" +
    "\073\065\074\057\076\073\077\061\001\002\000\044\011" +
    "\116\012\105\013\113\014\100\015\112\016\117\017\106" +
    "\020\115\021\114\022\107\023\111\024\104\025\103\030" +
    "\314\035\120\036\110\037\101\001\002\000\030\002\uffe2" +
    "\007\uffe2\040\uffe2\054\uffe2\055\uffe2\056\uffe2\061\uffe2\062" +
    "\uffe2\063\uffe2\064\uffe2\066\uffe2\001\002\000\026\004\066" +
    "\012\063\026\060\066\074\067\062\072\071\073\065\074" +
    "\057\076\073\077\061\001\002\000\044\011\116\012\105" +
    "\013\113\014\100\015\112\016\117\017\106\020\115\021" +
    "\114\022\107\023\111\024\104\025\103\030\317\035\120" +
    "\036\110\037\101\001\002\000\030\002\uffe3\007\uffe3\040" +
    "\uffe3\054\uffe3\055\uffe3\056\uffe3\061\uffe3\062\uffe3\063\uffe3" +
    "\064\uffe3\066\uffe3\001\002\000\044\011\116\012\105\013" +
    "\113\014\100\015\112\016\117\017\106\020\115\021\114" +
    "\022\107\023\111\024\104\025\103\030\321\035\120\036" +
    "\110\037\101\001\002\000\030\002\uffe4\007\uffe4\040\uffe4" +
    "\054\uffe4\055\uffe4\056\uffe4\061\uffe4\062\uffe4\063\uffe4\064" +
    "\uffe4\066\uffe4\001\002\000\026\004\066\012\063\026\060" +
    "\066\074\067\062\072\071\073\065\074\057\076\073\077" +
    "\061\001\002\000\044\011\116\012\105\013\113\014\100" +
    "\015\112\016\117\017\106\020\115\021\114\022\107\023" +
    "\111\024\104\025\103\030\324\035\120\036\110\037\101" +
    "\001\002\000\030\002\uffe1\007\uffe1\040\uffe1\054\uffe1\055" +
    "\uffe1\056\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\066\uffe1" +
    "\001\002\000\030\002\uffdf\007\uffdf\040\uffdf\054\uffdf\055" +
    "\uffdf\056\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\066\uffdf" +
    "\001\002\000\004\004\377\001\002\000\004\004\374\001" +
    "\002\000\004\004\372\001\002\000\004\004\370\001\002" +
    "\000\006\030\366\033\365\001\002\000\006\030\uffea\033" +
    "\uffea\001\002\000\004\004\362\001\002\000\004\004\360" +
    "\001\002\000\004\004\355\001\002\000\004\004\353\001" +
    "\002\000\004\004\351\001\002\000\004\004\346\001\002" +
    "\000\004\004\343\001\002\000\030\004\066\005\uff92\012" +
    "\063\026\060\066\074\067\062\072\071\073\065\074\057" +
    "\076\073\077\061\001\002\000\004\005\345\001\002\000" +
    "\006\030\uff99\033\uff99\001\002\000\026\004\066\012\063" +
    "\026\060\066\074\067\062\072\071\073\065\074\057\076" +
    "\073\077\061\001\002\000\006\005\350\027\144\001\002" +
    "\000\006\030\uff94\033\uff94\001\002\000\004\005\352\001" +
    "\002\000\006\030\uff9e\033\uff9e\001\002\000\004\005\354" +
    "\001\002\000\006\030\uff9b\033\uff9b\001\002\000\026\004" +
    "\066\012\063\026\060\066\074\067\062\072\071\073\065" +
    "\074\057\076\073\077\061\001\002\000\006\005\357\027" +
    "\144\001\002\000\006\030\uff98\033\uff98\001\002\000\004" +
    "\005\361\001\002\000\006\030\uff9a\033\uff9a\001\002\000" +
    "\026\004\066\012\063\026\060\066\074\067\062\072\071" +
    "\073\065\074\057\076\073\077\061\001\002\000\006\005" +
    "\364\027\144\001\002\000\006\030\uff96\033\uff96\001\002" +
    "\000\030\041\340\042\331\043\330\044\337\045\335\046" +
    "\342\047\336\050\326\051\334\052\327\053\341\001\002" +
    "\000\030\002\uffec\007\uffec\040\uffec\054\uffec\055\uffec\056" +
    "\uffec\061\uffec\062\uffec\063\uffec\064\uffec\066\uffec\001\002" +
    "\000\006\030\uffeb\033\uffeb\001\002\000\004\005\371\001" +
    "\002\000\006\030\uff9d\033\uff9d\001\002\000\004\005\373" +
    "\001\002\000\006\030\uff9c\033\uff9c\001\002\000\026\004" +
    "\066\012\063\026\060\066\074\067\062\072\071\073\065" +
    "\074\057\076\073\077\061\001\002\000\006\005\376\027" +
    "\144\001\002\000\006\030\uff95\033\uff95\001\002\000\026" +
    "\004\066\012\063\026\060\066\074\067\062\072\071\073" +
    "\065\074\057\076\073\077\061\001\002\000\006\005\u0101" +
    "\027\144\001\002\000\006\030\uff97\033\uff97\001\002\000" +
    "\026\004\066\012\063\026\060\066\074\067\062\072\071" +
    "\073\065\074\057\076\073\077\061\001\002\000\044\011" +
    "\116\012\105\013\113\014\100\015\112\016\117\017\106" +
    "\020\115\021\114\022\107\023\111\024\104\025\103\030" +
    "\u0104\035\120\036\110\037\101\001\002\000\030\002\uffe5" +
    "\007\uffe5\040\uffe5\054\uffe5\055\uffe5\056\uffe5\061\uffe5\062" +
    "\uffe5\063\uffe5\064\uffe5\066\uffe5\001\002\000\030\002\uffee" +
    "\007\uffee\040\uffee\054\uffee\055\uffee\056\uffee\061\uffee\062" +
    "\uffee\063\uffee\064\uffee\066\uffee\001\002\000\026\004\066" +
    "\012\063\026\060\066\074\067\062\072\071\073\065\074" +
    "\057\076\073\077\061\001\002\000\044\005\u0108\011\116" +
    "\012\105\013\113\014\100\015\112\016\117\017\106\020" +
    "\115\021\114\022\107\023\111\024\104\025\103\035\120" +
    "\036\110\037\101\001\002\000\004\030\u0109\001\002\000" +
    "\030\002\uffda\007\uffda\040\uffda\054\uffda\055\uffda\056\uffda" +
    "\061\uffda\062\uffda\063\uffda\064\uffda\066\uffda\001\002\000" +
    "\026\004\066\012\063\026\060\066\074\067\062\072\071" +
    "\073\065\074\057\076\073\077\061\001\002\000\044\005" +
    "\u010c\011\116\012\105\013\113\014\100\015\112\016\117" +
    "\017\106\020\115\021\114\022\107\023\111\024\104\025" +
    "\103\035\120\036\110\037\101\001\002\000\004\006\u010d" +
    "\001\002\000\004\060\u010f\001\002\000\010\007\u0117\060" +
    "\u010f\065\u0118\001\002\000\026\004\066\012\063\026\060" +
    "\066\074\067\062\072\071\073\065\074\057\076\073\077" +
    "\061\001\002\000\010\007\uffd4\060\uffd4\065\uffd4\001\002" +
    "\000\044\011\116\012\105\013\113\014\100\015\112\016" +
    "\117\017\106\020\115\021\114\022\107\023\111\024\104" +
    "\025\103\034\u0112\035\120\036\110\037\101\001\002\000" +
    "\004\006\u0113\001\002\000\020\040\027\054\013\056\031" +
    "\061\024\062\017\063\007\066\016\001\002\000\022\007" +
    "\u0115\040\027\054\013\056\031\061\024\062\017\063\007" +
    "\066\016\001\002\000\010\007\uffd3\060\uffd3\065\uffd3\001" +
    "\002\000\004\007\u011e\001\002\000\030\002\uffd6\007\uffd6" +
    "\040\uffd6\054\uffd6\055\uffd6\056\uffd6\061\uffd6\062\uffd6\063" +
    "\uffd6\064\uffd6\066\uffd6\001\002\000\004\034\u011a\001\002" +
    "\000\010\007\uffd5\060\uffd5\065\uffd5\001\002\000\004\006" +
    "\u011b\001\002\000\020\040\027\054\013\056\031\061\024" +
    "\062\017\063\007\066\016\001\002\000\022\007\u011d\040" +
    "\027\054\013\056\031\061\024\062\017\063\007\066\016" +
    "\001\002\000\004\007\uffd2\001\002\000\030\002\uffd7\007" +
    "\uffd7\040\uffd7\054\uffd7\055\uffd7\056\uffd7\061\uffd7\062\uffd7" +
    "\063\uffd7\064\uffd7\066\uffd7\001\002\000\026\002\uffff\040" +
    "\uffff\054\uffff\055\uffff\056\uffff\061\uffff\062\uffff\063\uffff" +
    "\064\uffff\066\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011d\000\040\002\017\003\003\004\010\005\007\011" +
    "\014\012\021\013\013\014\032\016\022\021\025\026\020" +
    "\027\004\031\005\033\024\043\011\001\001\000\034\004" +
    "\u011e\005\007\011\014\012\021\013\013\014\032\016\022" +
    "\021\025\026\020\027\004\031\005\033\024\043\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\007\247\011\067\015\066\042\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\005\007\011\014\012\047\013\013\014" +
    "\032\016\022\021\025\026\020\027\004\030\046\031\005" +
    "\043\011\001\001\000\030\005\007\011\014\012\050\013" +
    "\013\014\032\016\022\021\025\026\020\027\004\031\005" +
    "\043\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\005\007\011\014\012\047\013\013" +
    "\014\032\016\022\021\025\026\020\027\004\030\053\031" +
    "\005\043\011\001\001\000\030\005\007\011\014\012\050" +
    "\013\013\014\032\016\022\021\025\026\020\027\004\031" +
    "\005\043\011\001\001\000\002\001\001\000\012\007\071" +
    "\011\067\015\066\042\063\001\001\000\002\001\001\000" +
    "\012\007\203\011\067\015\066\042\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\202\011\067\015" +
    "\066\042\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\200\011\067\015\066\042\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\007" +
    "\141\010\140\011\067\015\066\034\142\042\063\001\001" +
    "\000\012\007\076\011\067\015\066\042\063\001\001\000" +
    "\002\001\001\000\012\007\137\011\067\015\066\042\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\136\011\067\015\066\042\063\001\001\000\012\007\135" +
    "\011\067\015\066\042\063\001\001\000\012\007\134\011" +
    "\067\015\066\042\063\001\001\000\012\007\133\011\067" +
    "\015\066\042\063\001\001\000\012\007\132\011\067\015" +
    "\066\042\063\001\001\000\002\001\001\000\012\007\131" +
    "\011\067\015\066\042\063\001\001\000\012\007\130\011" +
    "\067\015\066\042\063\001\001\000\012\007\127\011\067" +
    "\015\066\042\063\001\001\000\012\007\126\011\067\015" +
    "\066\042\063\001\001\000\012\007\125\011\067\015\066" +
    "\042\063\001\001\000\012\007\124\011\067\015\066\042" +
    "\063\001\001\000\012\007\123\011\067\015\066\042\063" +
    "\001\001\000\012\007\120\011\067\015\066\042\063\001" +
    "\001\000\002\001\001\000\012\007\122\011\067\015\066" +
    "\042\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\144\011\067" +
    "\015\066\042\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\005\007\011\014\012\047" +
    "\013\013\014\032\016\022\021\025\026\020\027\004\030" +
    "\150\031\005\043\011\001\001\000\030\005\007\011\014" +
    "\012\050\013\013\014\032\016\022\021\025\026\020\027" +
    "\004\031\005\043\011\001\001\000\006\017\152\020\154" +
    "\001\001\000\004\020\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\005\007\011\014" +
    "\012\047\013\013\014\032\016\022\021\025\026\020\027" +
    "\004\030\157\031\005\043\011\001\001\000\030\005\007" +
    "\011\014\012\050\013\013\014\032\016\022\021\025\026" +
    "\020\027\004\031\005\043\011\001\001\000\002\001\001" +
    "\000\012\007\162\011\067\015\066\042\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\005\007\011\014" +
    "\012\047\013\013\014\032\016\022\021\025\026\020\027" +
    "\004\030\165\031\005\043\011\001\001\000\030\005\007" +
    "\011\014\012\050\013\013\014\032\016\022\021\025\026" +
    "\020\027\004\031\005\043\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\173\011\067\015\066\042\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\005\007\011\014\012" +
    "\047\013\013\014\032\016\022\021\025\026\020\027\004" +
    "\030\176\031\005\043\011\001\001\000\030\005\007\011" +
    "\014\012\050\013\013\014\032\016\022\021\025\026\020" +
    "\027\004\031\005\043\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\205\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\222\011\067\015\066\042\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\007\240\011" +
    "\067\015\066\035\237\036\236\042\063\001\001\000\004" +
    "\040\224\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\227\011\067" +
    "\015\066\042\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\234" +
    "\011\067\015\066\042\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\007\242\011\067\015\066\042\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\037\332\044\331\001\001\000\002\001\001\000\012\007" +
    "\277\011\067\015\066\042\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\263\011\067\015\066\042\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\266\011\067\015" +
    "\066\042\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\271\011\067\015\066\042\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\275\011\067\015\066\042\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\317\011\067\015\066\042" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\007\307\011\067\015\066\042\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\312" +
    "\011\067\015\066\042\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\315\011\067\015\066\042\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\322\011\067\015\066" +
    "\042\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\007\141\010\343\011\067\015\066" +
    "\034\142\042\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\141\011\067\015\066\034\346\042\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\141\011\067\015\066\034\355\042\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\141\011\067\015\066\034" +
    "\362\042\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\366\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\141\011\067\015\066\034" +
    "\374\042\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\141\011\067\015\066\034\377\042\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\u0102" +
    "\011\067\015\066\042\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\u0106\011\067" +
    "\015\066\042\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\u010a\011\067\015\066" +
    "\042\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\u010d\023\u010f\001\001\000\006\023\u0118\024\u0115" +
    "\001\001\000\012\007\u0110\011\067\015\066\042\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\005\007\011\014\012\047\013\013\014\032\016" +
    "\022\021\025\026\020\027\004\030\u0113\031\005\043\011" +
    "\001\001\000\030\005\007\011\014\012\050\013\013\014" +
    "\032\016\022\021\025\026\020\027\004\031\005\043\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\005\007\011\014\012\047\013\013\014\032\016" +
    "\022\021\025\026\020\027\004\030\u011b\031\005\043\011" +
    "\001\001\000\030\005\007\011\014\012\050\013\013\014" +
    "\032\016\022\021\025\026\020\027\004\031\005\043\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintacticoFS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintacticoFS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintacticoFS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public AST root;
    public static int index=0;
    public void syntax_error(Symbol s){
        System.out.println("Error sintactico en la linea "+(s.left+1)+" Columna "+s.right+". Identificador "+s.value+" no reconocido"); 
    }
    /**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        javax.swing.JOptionPane.showMessageDialog(null,"Error Sintactico en la linea "+(s.right+1)+"Columna "+s.left+". Identificador"+s.value+" no reconocido.");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintacticoFS$actions {

  

  private final sintacticoFS parser;

  /** Constructor */
  CUP$sintacticoFS$actions(sintacticoFS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintacticoFS$do_action(
    int                        CUP$sintacticoFS$act_num,
    java_cup.runtime.lr_parser CUP$sintacticoFS$parser,
    java.util.Stack            CUP$sintacticoFS$stack,
    int                        CUP$sintacticoFS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintacticoFS$result;

      /* select the action based on the action number */
      switch (CUP$sintacticoFS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // LISTA_PARAMETRO ::= EXPRESION 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                RESULT=new LinkedList<>();
                                RESULT.add(a);
                               
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETRO",26, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // LISTA_PARAMETRO ::= LISTA_PARAMETRO coma EXPRESION 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                        RESULT=a;
                                                        RESULT.add(b);
                                                     
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETRO",26, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // LISTA_PARAMETROS ::= LISTA_PARAMETRO 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                        RESULT=a;
                                     
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LISTA_PARAMETROS ::= 
            {
              LinkedList<NodoAST> RESULT =null;
		
                        RESULT=new LinkedList<>();
                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",6, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LLAMADA_FUNCION ::= valor_id parena LISTA_PARAMETROS parenc 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                RESULT=new Llamada_Funcion(Type.PrimitiveType.FUNCION,a.toString().toLowerCase(),b);
                                                              
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",7, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FUNCIONES_LENGUAJE ::= alguno parena LISTA_PARAMETRO parenc 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FUNCIONES_LENGUAJE ::= todos parena LISTA_PARAMETRO parenc 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FUNCIONES_LENGUAJE ::= reduce parena LISTA_PARAMETRO parenc 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FUNCIONES_LENGUAJE ::= map parena LISTA_PARAMETRO parenc 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FUNCIONES_LENGUAJE ::= buscar parena LISTA_PARAMETRO parenc 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FUNCIONES_LENGUAJE ::= filtrar parena LISTA_PARAMETROS parenc 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FUNCIONES_LENGUAJE ::= minimo parena parenc 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FUNCIONES_LENGUAJE ::= maximo parena parenc 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FUNCIONES_LENGUAJE ::= invertir parena parenc 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // FUNCIONES_LENGUAJE ::= ascendente parena parenc 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FUNCIONES_LENGUAJE ::= descendente parena parenc 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJE",29, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TERNARIO ::= EXPRESION signoi EXPRESION dospuntos EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=new Ternario(a,b,c);
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("TERNARIO",11, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LLAMADA_ARREGLO ::= valor_id corchea EXPRESION corchec 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                        RESULT=new AccesoArreglo(a.toString().toLowerCase(),b);
                                                     
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LLAMADA_ARREGLO",32, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= EXPRESION incremental 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                        RESULT=new Aritmetica(a,true,Operador.AUMENTO);
                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= EXPRESION decremental 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                        RESULT=new Aritmetica(a,true,Operador.AUMENTO);
                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= LLAMADA_ARREGLO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= valor_nulo 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                            RESULT=new Aritmetica(a.toString().toLowerCase(),Type.PrimitiveType.NULL);
                         
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= TERNARIO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= LLAMADA_FUNCION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= valor_falso 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                            RESULT=new Aritmetica("false",Type.PrimitiveType.BOOLEAN);
                          
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= valor_verdadero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                RESULT=new Aritmetica("true",Type.PrimitiveType.BOOLEAN);
                              
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= valor_cadena 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                            RESULT=new Aritmetica(a.toString().toLowerCase(),Type.PrimitiveType.STRING);
                           
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= valor_numero_decimal 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                    RESULT=new Aritmetica(a.toString().toLowerCase(),Type.PrimitiveType.DOUBLE);
                                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= valor_numero_completo 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                        RESULT=new Aritmetica(a.toString().toLowerCase(),Type.PrimitiveType.INTEGER);
                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= valor_id 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                        RESULT=new Aritmetica(a.toString().toLowerCase(),Type.PrimitiveType.ID);
                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= parena EXPRESION parenc 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                        RESULT=a;
                                      
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= not EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                RESULT=new Logica(a,true,Operador.NOT);
                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= EXPRESION or EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Logica(a,b,Operador.OR);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= EXPRESION and EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Logica(a,b,Operador.AND);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= EXPRESION diferente EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Relacional(a,b,Operador.DIFERENTE);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= EXPRESION igualigual EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Relacional(a,b,Operador.IGUALIGUAL);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= EXPRESION menorigualq EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Relacional(a,b,Operador.MENORIGUALQ);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= EXPRESION mayorigualq EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Relacional(a,b,Operador.MAYORIGUALQ);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION ::= EXPRESION menorq EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Relacional(a,b,Operador.MENORQ);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= EXPRESION mayorq EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Relacional(a,b,Operador.MAYORQ);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= EXPRESION pot EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Aritmetica(a,b,Operador.POTENCIA);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= EXPRESION div EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Aritmetica(a,b,Operador.DIVISION);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= EXPRESION por EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Aritmetica(a,b,Operador.MULTIPLICACION);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= EXPRESION menos EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Aritmetica(a,b,Operador.RESTA);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= EXPRESION mas EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Aritmetica(a,b,Operador.SUMA);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= menos EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new Aritmetica(a,true,Operador.UNARIO);
                                       
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LISTA_ID ::= valor_id 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                        RESULT=new LinkedList<NodoAST>();
                        Declaracion declaracion=new Declaracion(Type.PrimitiveType.NULL,a.toString().toLowerCase(),null,false,aleft);
                        RESULT.add(declaracion);
                      
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_ID",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LISTA_ID ::= LISTA_ID coma valor_id 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                       RESULT=a;
                                       Declaracion declaracion=new Declaracion(Type.PrimitiveType.NULL,b.toString().toLowerCase(),null,false,bleft);
                                       RESULT.add(declaracion);
                                      
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_ID",4, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LISTA_ARRAY ::= EXPRESION 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                            RESULT=new LinkedList<>();
                            RESULT.add(a);
                          
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_ARRAY",27, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LISTA_ARRAY ::= LISTA_ARRAY coma EXPRESION 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                RESULT=a;
                                                RESULT.add(b);
                                             
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_ARRAY",27, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ELEMENTOS_ARRAY ::= LISTA_ARRAY 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_ARRAY",28, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ELEMENTOS_ARRAY ::= 
            {
              LinkedList<Expresion> RESULT =null;
		RESULT=new LinkedList<>();
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_ARRAY",28, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ELEMENTOS_OBJETO ::= valor_id dospuntos EXPRESION 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_OBJETO",30, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ELEMENTOS_OBJETO ::= ELEMENTOS_OBJETO coma valor_id dospuntos EXPRESION 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_OBJETO",30, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ELEMENTO_PATH ::= valor_path2 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ELEMENTO_PATH",31, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ELEMENTO_PATH ::= valor_path 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("ELEMENTO_PATH",31, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION_VARIABLES ::= var LISTA_ID igual llavea ELEMENTOS_OBJETO llavec pyc 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION_VARIABLES ::= var LISTA_ID igual corchea ELEMENTOS_ARRAY corchec pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		
                                                                                int indice=a.size()-1;
                                                                                Declaracion ultima=(Declaracion)a.get(indice);
                                                                                a.remove(indice);
                                                                                Declaracion_Arreglo declaracion_arreglo=new Declaracion_Arreglo(Type.PrimitiveType.NULL,ultima.getId(),null,true,ultima.getLine(),b);
                                                                                a.add(declaracion_arreglo);
                                                                                RESULT=a;
                                                                               
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION_VARIABLES ::= var LISTA_ID igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                int indice=a.size()-1;
                                                                Declaracion ultima=(Declaracion)a.get(indice);
                                                                a.remove(indice);
                                                                ultima.setIntValue(b);
                                                                ultima.setInicializado(true);
                                                                a.add(ultima);
                                                                RESULT=a;
                                                             
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION_VARIABLES ::= var LISTA_ID pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                            RESULT=a;
                                           
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARACION_VARIABLES",3, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_SINOSI ::= sino si parena EXPRESION parenc llavea SENTENCIAS_INTERNAS llavec 
            {
              LinkedList<SubIf> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                            RESULT=new LinkedList<SubIf>();
                                                                                            RESULT.add(new SubIf(a,b,false));
                                                                                         
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SINOSI",13, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_SINOSI ::= SENTENCIA_SINOSI sino si parena EXPRESION parenc llavea SENTENCIAS_INTERNAS llavec 
            {
              LinkedList<SubIf> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)).right;
		LinkedList<SubIf> a = (LinkedList<SubIf>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                                                RESULT=a;
                                                                                                                RESULT.add(new SubIf(b,c,false));
                                                                                                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SINOSI",13, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_SINO ::= sino llavea SENTENCIAS_INTERNAS llavec 
            {
              SubIf RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                            RESULT=new SubIf(null,a,true);
                                                          
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SINO",14, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_SI ::= si parena EXPRESION parenc llavea SENTENCIAS_INTERNAS llavec 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                 RESULT=new If(a,b,new LinkedList<>(),new SubIf());
                                                                                
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",12, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_SI ::= si parena EXPRESION parenc llavea SENTENCIAS_INTERNAS llavec SENTENCIA_SINO 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		SubIf c = (SubIf)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                                                                    RESULT=new If(a,b,new LinkedList<>(),c);
                                                                                                 
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",12, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_SI ::= si parena EXPRESION parenc llavea SENTENCIAS_INTERNAS llavec SENTENCIA_SINOSI 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<SubIf> c = (LinkedList<SubIf>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                                                                    RESULT=new If(a,b,c,new SubIf());
                                                                                                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",12, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_SI ::= si parena EXPRESION parenc llavea SENTENCIAS_INTERNAS llavec SENTENCIA_SINOSI SENTENCIA_SINO 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<SubIf> c = (LinkedList<SubIf>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		SubIf d = (SubIf)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                                                                                        RESULT=new If(a,b,c,d);
                                                                                                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SI",12, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CASO_DEFECTO ::= defecto dospuntos llavea SENTENCIAS_INTERNAS llavec 
            {
              Caso RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                    RESULT=new Caso(a);
                                                                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("CASO_DEFECTO",18, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LISTA_CASO ::= caso EXPRESION dospuntos llavea SENTENCIAS_INTERNAS llavec 
            {
              Caso RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                             RESULT=new Caso(a,b);
                                                                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTA_CASO",17, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LISTAS_CASOS ::= LISTA_CASO 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Caso a = (Caso)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                RESULT=new LinkedList<>();
                                RESULT.add(a);
                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTAS_CASOS",16, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LISTAS_CASOS ::= LISTAS_CASOS LISTA_CASO 
            {
              LinkedList<Caso> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<Caso> a = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		Caso b = (Caso)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=a;
                                            RESULT.add(b);
                                           
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("LISTAS_CASOS",16, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_SELECCIONA ::= selecciona parena EXPRESION parenc llavea LISTAS_CASOS llavec 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                            RESULT=new Switch(a,b,null);
                                                                                         
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCIONA",15, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_SELECCIONA ::= selecciona parena EXPRESION parenc llavea LISTAS_CASOS CASO_DEFECTO llavec 
            {
              NodoAST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		LinkedList<Caso> b = (LinkedList<Caso>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Caso c = (Caso)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                                        RESULT=new Switch(a,b,c);
                                                                                                        
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SELECCIONA",15, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIAS_SELECCION ::= SENTENCIA_SELECCIONA 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                RESULT=new LinkedList<NodoAST>();
                                                RESULT.add(a);
                                              
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_SELECCION",10, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIAS_SELECCION ::= SENTENCIA_SI 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		NodoAST a = (NodoAST)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                        RESULT=new LinkedList<NodoAST>();
                                        RESULT.add(a);
                                      
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_SELECCION",10, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_IMPRIMIR ::= imprimir parena EXPRESION parenc pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		
                                                                RESULT=new LinkedList<NodoAST>();
                                                                RESULT.add(new Imprimir(b));
                                                             
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IMPRIMIR",9, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_DETENER ::= detener pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		
                                    RESULT=new LinkedList<>();
                                    RESULT.add(new Detener());
                                
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DETENER",21, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA_RETORNAR ::= retornar pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		
                                    RESULT=new LinkedList<>();
                                    RESULT.add(new Retornar());
                                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETORNAR",20, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA_RETORNAR ::= retornar EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                RESULT=new LinkedList<>();
                                                RESULT.add(new Retornar(a));
                                              
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETORNAR",20, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA_ASIGNACION ::= valor_id incremental pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		
                                                    RESULT=new LinkedList<>();
                                                    Aritmetica aritmetica=new Aritmetica(a.toString().toLowerCase(),Type.PrimitiveType.ID);
                                                    RESULT.add(new Asignacion(a.toString().toLowerCase(),aritmetica,Operador.AUMENTO,aleft,aright));
                                                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA_ASIGNACION ::= valor_id decremental pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)).value;
		
                                                        RESULT=new LinkedList<>();
                                                        Aritmetica aritmetica =new Aritmetica(a.toString().toLowerCase(),Type.PrimitiveType.ID);
                                                        RESULT.add(new Asignacion(a.toString().toLowerCase(),aritmetica,Operador.DECREMENTO,aleft,aright));
                                                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA_ASIGNACION ::= valor_id corchea EXPRESION corchec div igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                            RESULT=new LinkedList<>();
                                                                                            RESULT.add(new AsignacionArreglo(a.toString().toLowerCase(),c,b,Operador.A_DIV));
                                                                                        
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA_ASIGNACION ::= valor_id corchea EXPRESION corchec por igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                            RESULT=new LinkedList<>();
                                                                                            RESULT.add(new AsignacionArreglo(a.toString().toLowerCase(),c,b,Operador.A_MULT));
                                                                                        
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA_ASIGNACION ::= valor_id corchea EXPRESION corchec menos igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                            RESULT=new LinkedList<>();
                                                                                            RESULT.add(new AsignacionArreglo(a.toString().toLowerCase(),c,b,Operador.A_RESTA));
                                                                                          
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA_ASIGNACION ::= valor_id corchea EXPRESION corchec mas igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                            RESULT=new LinkedList<>();
                                                                                            RESULT.add(new AsignacionArreglo(a.toString().toLowerCase(),c,b,Operador.A_SUMA));
                                                                                        
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA_ASIGNACION ::= valor_id corchea EXPRESION corchec igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                        RESULT=new LinkedList<>();
                                                                                        RESULT.add(new AsignacionArreglo(a.toString().toLowerCase(),c,b,Operador.IGUAL));
                                                                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA_ASIGNACION ::= valor_id div igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                RESULT=new LinkedList<>();
                                                                RESULT.add(new Asignacion(a.toString().toLowerCase(),b,Operador.A_DIV,aright,aleft));
                                                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA_ASIGNACION ::= valor_id por igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                RESULT=new LinkedList<>();
                                                                RESULT.add(new Asignacion(a.toString().toLowerCase(),b,Operador.A_MULT,aright,aleft));
                                                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA_ASIGNACION ::= valor_id menos igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                RESULT=new LinkedList<>();
                                                                RESULT.add(new Asignacion(a.toString().toLowerCase(),b,Operador.A_RESTA,aright,aleft));
                                                              
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA_ASIGNACION ::= valor_id mas igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                RESULT=new LinkedList<>();
                                                                RESULT.add(new Asignacion(a.toString().toLowerCase(),b,Operador.A_SUMA,aright,aleft));
                                                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA_ASIGNACION ::= valor_id igual EXPRESION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                            RESULT=new LinkedList<>();
                                                            RESULT.add(new Asignacion(a.toString().toLowerCase(),b,Operador.IGUAL,aright,aleft));
                                                        
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_ASIGNACION",23, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNCIONES_LENGUAJES ::= FUNCIONES_LENGUAJE 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJES",34, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNCIONES_LENGUAJES ::= FUNCIONES_LENGUAJES pto FUNCIONES_LENGUAJE 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("FUNCIONES_LENGUAJES",34, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIAS_ARREGLOS ::= valor_id pto FUNCIONES_LENGUAJES pyc 
            {
              String RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_ARREGLOS",33, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIAS_GENERALES ::= SENTENCIAS_ARREGLOS 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GENERALES",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIAS_GENERALES ::= LLAMADA_FUNCION pyc 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                RESULT=new LinkedList<>();
                                                RESULT.add(a);
                                             
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GENERALES",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIAS_GENERALES ::= SENTENCIA_ASIGNACION 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GENERALES",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIAS_GENERALES ::= SENTENCIA_DETENER 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GENERALES",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIAS_GENERALES ::= SENTENCIA_RETORNAR 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GENERALES",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIAS_GENERALES ::= SENTENCIAS_SELECCION 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GENERALES",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIAS_GENERALES ::= DECLARACION_VARIABLES 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                RESULT=a;
                                               
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GENERALES",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIAS_GENERALES ::= SENTENCIA_IMPRIMIR 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=a;
                                            
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GENERALES",8, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIAS_INTERNAS ::= SENTENCIAS_GENERALES 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                RESULT=a;
                                             
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_INTERNAS",22, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIAS_INTERNAS ::= SENTENCIAS_INTERNAS SENTENCIAS_GENERALES 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                                    RESULT=a;
                                                                    RESULT.addAll(b);
                                                                   
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_INTERNAS",22, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEFINICIONES_PARAMETROS ::= var valor_id 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=new LinkedList<>();
                                            RESULT.add(new Declaracion(Type.PrimitiveType.ID,a.toString().toLowerCase(),null,false,aright));
                                         
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DEFINICIONES_PARAMETROS",24, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DEFINICIONES_PARAMETROS ::= DEFINICIONES_PARAMETROS coma var valor_id 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                                        RESULT=a;
                                                                        RESULT.add(new Declaracion(Type.PrimitiveType.ID,b.toString().toLowerCase(),null,false,bright));
                                                                        
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DEFINICIONES_PARAMETROS",24, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARAR_FUNCIONES ::= funcion valor_id parena DEFINICIONES_PARAMETROS parenc llavea SENTENCIAS_INTERNAS llavec 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> c = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                                                        RESULT=new LinkedList<>();
                                                                                                                        RESULT.add(new Funcion(a.toString().toLowerCase(),b,c));
                                                                                                                    
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARAR_FUNCIONES",25, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARAR_FUNCIONES ::= funcion valor_id parena parenc llavea SENTENCIAS_INTERNAS llavec 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		
                                                                                            RESULT=new LinkedList<>();
                                                                                            RESULT.add(new Funcion(a.toString().toLowerCase(),b));
                                                                                          
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("DECLARAR_FUNCIONES",25, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA_GLOBAL ::= DECLARAR_FUNCIONES 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_GLOBAL",2, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA_GLOBAL ::= importar parena ELEMENTO_PATH parenc pyc 
            {
              LinkedList<NodoAST> RESULT =null;

              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_GLOBAL",2, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA_GLOBAL ::= SENTENCIAS_GENERALES 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIA_GLOBAL",2, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIAS_GLOBALES ::= SENTENCIA_GLOBAL 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                            RESULT=a;
                                         
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GLOBALES",1, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIAS_GLOBALES ::= SENTENCIAS_GLOBALES SENTENCIA_GLOBAL 
            {
              LinkedList<NodoAST> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> b = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                                                RESULT=a;
                                                                RESULT.addAll(b);
                                                               
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GLOBALES",1, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIAL ::= SENTENCIAS_GLOBALES 
            {
              AST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()).right;
		LinkedList<NodoAST> a = (LinkedList<NodoAST>)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.peek()).value;
		
                                this.parser.root=new AST(a);
                               
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("INICIAL",0, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          return CUP$sintacticoFS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).right;
		AST start_val = (AST)((java_cup.runtime.Symbol) CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)).value;
		RESULT = start_val;
              CUP$sintacticoFS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.elementAt(CUP$sintacticoFS$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoFS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintacticoFS$parser.done_parsing();
          return CUP$sintacticoFS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

