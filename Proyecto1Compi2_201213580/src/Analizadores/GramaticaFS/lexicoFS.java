/* The following code was generated by JFlex 1.6.0 */

package Analizadores.GramaticaFS;
import java.util.LinkedList;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>lexicoFS.jflex</tt>
 */
public class lexicoFS implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  private static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\70\1\7\1\11\1\12\1\10\22\0\1\70\1\33\1\14"+
    "\1\2\1\2\1\2\1\34\1\0\1\21\1\22\1\13\1\26\1\36"+
    "\1\27\1\1\1\6\12\3\1\15\1\37\1\32\1\25\1\31\1\67"+
    "\1\2\1\43\1\63\1\51\1\45\1\46\1\61\1\66\1\4\1\55"+
    "\2\4\1\62\1\56\1\52\1\60\1\65\1\4\1\44\1\50\1\53"+
    "\1\64\1\42\1\4\1\57\2\4\1\40\1\16\1\41\1\30\1\5"+
    "\1\0\1\43\1\63\1\51\1\45\1\46\1\17\1\66\1\4\1\55"+
    "\2\4\1\62\1\56\1\52\1\60\1\65\1\4\1\44\1\20\1\53"+
    "\1\64\1\42\1\4\1\57\2\4\1\23\1\35\1\24\7\0\1\11"+
    "\252\0\2\54\115\0\1\47\u1ea8\0\1\11\1\11\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\1\1\11\2\5\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\2\1"+
    "\1\25\1\26\1\27\1\30\4\5\1\1\3\5\1\1"+
    "\3\5\1\31\6\0\1\32\1\5\1\0\2\5\2\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\3\5\1\0"+
    "\3\5\1\0\3\5\2\0\3\5\1\0\2\5\1\42"+
    "\2\43\4\0\1\5\1\0\2\5\1\0\1\5\1\44"+
    "\2\5\1\0\5\5\1\0\1\5\1\0\1\5\1\0"+
    "\2\5\2\0\3\5\1\45\1\0\2\5\5\0\1\5"+
    "\2\0\2\5\2\46\2\5\1\0\5\5\1\0\1\5"+
    "\1\0\2\47\1\50\1\5\3\0\3\5\1\0\1\5"+
    "\1\0\2\5\2\0\1\43\3\0\2\51\1\0\4\5"+
    "\1\0\5\5\1\0\1\5\1\0\2\52\3\0\3\5"+
    "\1\0\1\5\1\0\2\5\2\0\1\53\1\0\4\5"+
    "\1\0\1\54\1\55\3\5\1\0\1\5\4\0\3\5"+
    "\2\56\2\57\2\60\1\0\2\61\1\0\3\5\1\0"+
    "\1\5\1\62\1\5\1\0\1\63\3\0\3\5\1\64"+
    "\1\0\3\5\1\0\1\65\1\5\1\0\1\66\1\67"+
    "\1\70\1\66\1\67\1\70\1\0\1\5\1\71\1\5"+
    "\1\0\1\5\1\0\2\72\2\73\1\5\1\0\2\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\71\0\71\0\162\0\253\0\344\0\71"+
    "\0\71\0\u011d\0\71\0\u0156\0\u018f\0\71\0\71\0\71"+
    "\0\71\0\u01c8\0\71\0\71\0\71\0\u0201\0\u023a\0\u0273"+
    "\0\u02ac\0\u02e5\0\71\0\71\0\71\0\71\0\u031e\0\u0357"+
    "\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f"+
    "\0\u0558\0\u0591\0\71\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae"+
    "\0\u06e7\0\71\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804\0\u083d"+
    "\0\71\0\71\0\71\0\71\0\71\0\71\0\u0876\0\u08af"+
    "\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77"+
    "\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f"+
    "\0\u0c78\0\u05ca\0\71\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95"+
    "\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\253\0\u0f24"+
    "\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec"+
    "\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4"+
    "\0\u12ed\0\u1326\0\u135f\0\253\0\u1398\0\u13d1\0\u140a\0\u1443"+
    "\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b"+
    "\0\u1644\0\71\0\253\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761"+
    "\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\253\0\71"+
    "\0\253\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d\0\u1a46"+
    "\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1bd5"+
    "\0\u1c0e\0\u1c47\0\u1c80\0\253\0\71\0\u1cb9\0\u1cf2\0\u1d2b"+
    "\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3"+
    "\0\u1f2c\0\u1f65\0\u1f9e\0\253\0\71\0\u1fd7\0\u2010\0\u2049"+
    "\0\u2082\0\u20bb\0\u20f4\0\u212d\0\u2166\0\u219f\0\u21d8\0\u2211"+
    "\0\u224a\0\u2283\0\71\0\u22bc\0\u22f5\0\u232e\0\u2367\0\u23a0"+
    "\0\u23d9\0\253\0\253\0\u2412\0\u244b\0\u2484\0\u24bd\0\u24f6"+
    "\0\u252f\0\u2568\0\u25a1\0\u25da\0\u2613\0\u264c\0\u2685\0\71"+
    "\0\253\0\71\0\253\0\253\0\71\0\u26be\0\71\0\253"+
    "\0\u26f7\0\u2730\0\u2769\0\u27a2\0\u27db\0\u2814\0\253\0\u284d"+
    "\0\u2886\0\253\0\u28bf\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc"+
    "\0\71\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9\0\253\0\u2b32"+
    "\0\u2b6b\0\71\0\71\0\71\0\253\0\253\0\253\0\u2ba4"+
    "\0\u2bdd\0\253\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1\0\71\0\253"+
    "\0\253\0\71\0\u2cfa\0\u2d33\0\253\0\71";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\6\1\7\2\10\1\0"+
    "\1\10\1\11\1\12\1\13\1\2\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\6\1\43\1\15\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\2\6\1\14\1\6"+
    "\1\52\3\6\1\53\1\10\72\0\1\54\1\0\1\5"+
    "\70\0\3\6\11\0\2\6\21\0\5\6\1\0\4\6"+
    "\1\0\12\6\10\0\1\55\4\0\1\56\55\0\4\57"+
    "\1\60\1\57\1\61\5\57\1\62\2\57\2\60\21\57"+
    "\5\60\1\57\4\60\1\57\12\60\2\57\3\0\3\6"+
    "\11\0\2\6\21\0\1\6\1\63\3\6\1\0\4\6"+
    "\1\64\1\65\11\6\5\0\3\6\11\0\2\6\21\0"+
    "\4\6\1\66\1\0\4\6\1\67\1\70\11\6\27\0"+
    "\1\71\70\0\1\72\70\0\1\73\70\0\1\74\77\0"+
    "\1\75\71\0\1\76\36\0\3\6\11\0\2\6\21\0"+
    "\1\6\1\77\2\6\1\100\1\0\4\6\1\0\12\6"+
    "\5\0\3\6\11\0\1\6\1\101\21\0\5\6\1\102"+
    "\1\101\3\6\1\0\5\6\1\103\4\6\5\0\3\6"+
    "\11\0\2\6\21\0\4\6\1\104\1\0\4\6\1\0"+
    "\12\6\5\0\3\6\11\0\2\6\21\0\4\6\1\105"+
    "\1\0\4\6\1\0\12\6\50\0\1\106\5\0\2\67"+
    "\16\0\3\6\11\0\2\6\21\0\1\6\1\107\3\6"+
    "\1\0\4\6\1\0\12\6\5\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\4\6\1\0\7\6\1\110\2\6"+
    "\5\0\3\6\11\0\2\6\21\0\5\6\1\0\4\6"+
    "\1\0\3\6\1\111\6\6\54\0\1\112\3\0\1\113"+
    "\15\0\3\6\11\0\2\6\21\0\5\6\1\0\2\6"+
    "\1\114\1\6\1\0\1\6\1\115\10\6\5\0\3\6"+
    "\11\0\2\6\21\0\1\6\1\116\3\6\1\0\4\6"+
    "\1\117\1\120\11\6\5\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\4\6\1\0\7\6\1\121\2\6\5\0"+
    "\1\122\65\0\7\55\1\123\1\124\2\0\56\55\13\56"+
    "\1\125\55\56\14\57\1\62\70\57\1\62\1\126\54\57"+
    "\1\127\2\57\2\130\6\57\1\62\1\57\1\61\2\130"+
    "\21\57\5\130\1\57\4\130\1\57\12\130\2\57\3\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\4\6\1\0"+
    "\5\6\1\131\4\6\64\0\1\132\11\0\3\6\11\0"+
    "\2\6\21\0\5\6\1\0\4\6\1\0\5\6\1\133"+
    "\4\6\5\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\4\6\1\0\5\6\1\134\4\6\54\0\1\135\21\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\2\6\1\136"+
    "\1\6\1\0\12\6\5\0\3\6\11\0\2\6\21\0"+
    "\2\6\1\137\2\6\1\0\4\6\1\0\12\6\5\0"+
    "\3\6\11\0\2\6\21\0\2\6\1\140\2\6\1\0"+
    "\4\6\1\0\12\6\5\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\1\6\1\141\2\6\1\0\12\6\53\0"+
    "\1\142\22\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\4\6\1\0\11\6\1\143\5\0\3\6\11\0\2\6"+
    "\21\0\3\6\1\144\1\6\1\0\3\6\1\145\1\0"+
    "\12\6\5\0\3\6\11\0\1\146\1\147\21\0\5\6"+
    "\1\150\1\147\2\6\1\151\1\0\4\6\1\146\5\6"+
    "\64\0\1\152\11\0\3\6\11\0\1\6\1\153\21\0"+
    "\5\6\1\154\1\153\3\6\1\0\12\6\5\0\3\6"+
    "\11\0\2\6\21\0\5\6\1\0\4\6\1\0\5\6"+
    "\1\155\4\6\5\0\3\6\11\0\2\6\21\0\3\6"+
    "\1\156\1\6\1\0\4\6\1\0\12\6\44\0\1\157"+
    "\113\0\1\160\6\0\3\6\11\0\2\6\21\0\1\161"+
    "\4\6\1\0\4\6\1\0\12\6\5\0\3\6\11\0"+
    "\2\6\21\0\5\6\1\0\4\6\1\0\10\6\1\162"+
    "\1\6\5\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\4\6\1\0\2\6\1\163\5\6\1\164\1\6\54\0"+
    "\1\165\21\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\2\6\1\166\1\6\1\0\12\6\5\0\3\6\11\0"+
    "\1\6\1\167\21\0\5\6\1\170\1\167\3\6\1\0"+
    "\12\6\11\0\1\123\61\0\6\171\1\123\4\171\1\172"+
    "\55\171\14\57\1\62\1\57\1\173\66\57\1\62\2\57"+
    "\1\174\52\57\1\127\1\57\3\130\6\57\1\62\1\57"+
    "\1\61\2\130\21\57\5\130\1\57\4\130\1\57\12\130"+
    "\2\57\3\0\3\6\11\0\1\6\1\175\21\0\5\6"+
    "\1\176\1\175\3\6\1\0\12\6\55\0\1\177\20\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\3\6\1\200"+
    "\1\0\12\6\5\0\3\6\11\0\2\6\21\0\4\6"+
    "\1\201\1\0\4\6\1\0\12\6\62\0\1\202\13\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\4\6\1\0"+
    "\3\6\1\203\6\6\5\0\3\6\11\0\2\6\21\0"+
    "\3\6\1\204\1\6\1\0\4\6\1\0\12\6\5\0"+
    "\3\6\11\0\2\6\21\0\4\6\1\205\1\0\4\6"+
    "\1\0\12\6\50\0\1\206\25\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\4\6\1\0\7\6\1\207\2\6"+
    "\5\0\3\6\11\0\2\6\21\0\5\6\1\0\4\6"+
    "\1\0\7\6\1\210\2\6\5\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\4\6\1\0\3\6\1\211\6\6"+
    "\5\0\3\6\11\0\2\6\21\0\4\6\1\212\1\0"+
    "\4\6\1\0\12\6\5\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\1\6\1\213\2\6\1\0\12\6\53\0"+
    "\1\214\22\0\3\6\11\0\2\6\21\0\4\6\1\215"+
    "\1\0\4\6\1\0\12\6\50\0\1\216\25\0\3\6"+
    "\11\0\2\6\21\0\5\6\1\0\4\6\1\0\3\6"+
    "\1\217\6\6\62\0\1\220\13\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\4\6\1\0\3\6\1\221\6\6"+
    "\5\0\3\6\11\0\2\6\21\0\5\6\1\0\4\6"+
    "\1\0\3\6\1\222\6\6\50\0\1\223\66\0\1\224"+
    "\13\0\1\225\13\0\3\6\11\0\2\6\21\0\4\6"+
    "\1\226\1\0\4\6\1\0\12\6\5\0\3\6\11\0"+
    "\2\6\21\0\2\6\1\227\2\6\1\0\4\6\1\0"+
    "\3\6\1\230\6\6\5\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\4\6\1\231\1\232\11\6\56\0\2\233"+
    "\16\0\3\6\11\0\2\6\21\0\5\6\1\0\4\6"+
    "\1\233\1\234\11\6\5\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\1\6\1\235\2\6\1\0\12\6\53\0"+
    "\1\236\17\0\6\56\1\237\4\56\1\125\63\56\1\240"+
    "\4\56\1\125\55\56\1\57\1\241\2\57\2\242\6\57"+
    "\1\62\1\57\1\173\2\242\21\57\5\242\1\57\4\242"+
    "\1\57\12\242\16\57\1\62\3\57\1\243\50\57\3\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\4\6\1\0"+
    "\3\6\1\244\6\6\62\0\1\245\54\0\1\246\27\0"+
    "\3\6\11\0\2\6\21\0\2\6\1\247\2\6\1\0"+
    "\4\6\1\0\12\6\5\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\1\6\1\250\2\6\1\0\12\6\5\0"+
    "\3\6\11\0\2\6\21\0\1\6\1\251\3\6\1\0"+
    "\4\6\1\0\12\6\5\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\2\6\1\252\1\6\1\0\12\6\54\0"+
    "\1\253\21\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\2\6\1\254\1\6\1\0\12\6\5\0\3\6\11\0"+
    "\2\6\21\0\5\6\1\0\1\6\1\255\2\6\1\0"+
    "\12\6\5\0\3\6\11\0\2\6\21\0\2\6\1\256"+
    "\2\6\1\0\4\6\1\0\12\6\5\0\3\6\11\0"+
    "\2\6\21\0\5\6\1\0\1\6\1\257\2\6\1\0"+
    "\12\6\5\0\3\6\11\0\2\6\21\0\4\6\1\260"+
    "\1\0\4\6\1\0\12\6\50\0\1\261\25\0\3\6"+
    "\11\0\2\6\21\0\5\6\1\0\2\6\1\262\1\6"+
    "\1\0\12\6\53\0\1\263\22\0\3\6\11\0\1\6"+
    "\1\264\21\0\5\6\1\265\1\264\3\6\1\0\12\6"+
    "\46\0\1\266\100\0\2\267\57\0\1\270\27\0\3\6"+
    "\11\0\2\6\21\0\2\6\1\271\2\6\1\0\4\6"+
    "\1\0\12\6\5\0\3\6\11\0\2\6\21\0\5\6"+
    "\1\0\4\6\1\267\1\272\11\6\5\0\3\6\11\0"+
    "\2\6\21\0\2\6\1\273\2\6\1\0\4\6\1\0"+
    "\12\6\60\0\1\274\15\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\4\6\1\0\1\6\1\275\10\6\60\0"+
    "\1\276\15\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\4\6\1\0\1\6\1\277\10\6\5\0\3\6\11\0"+
    "\2\6\21\0\1\6\1\300\3\6\1\0\4\6\1\0"+
    "\12\6\45\0\1\301\33\0\1\171\62\0\14\57\1\62"+
    "\2\57\1\302\52\57\1\241\1\57\3\242\6\57\1\62"+
    "\1\57\1\173\2\242\21\57\5\242\1\57\4\242\1\57"+
    "\12\242\16\57\1\303\54\57\43\0\1\304\30\0\3\6"+
    "\11\0\2\6\21\0\1\6\1\305\3\6\1\0\4\6"+
    "\1\0\12\6\5\0\3\6\11\0\2\6\21\0\5\6"+
    "\1\0\1\6\1\306\2\6\1\0\12\6\5\0\3\6"+
    "\11\0\2\6\21\0\3\6\1\307\1\6\1\0\4\6"+
    "\1\0\12\6\5\0\3\6\11\0\2\6\21\0\3\6"+
    "\1\310\1\6\1\0\4\6\1\0\12\6\47\0\1\311"+
    "\26\0\3\6\11\0\2\6\21\0\5\6\1\0\4\6"+
    "\1\0\3\6\1\312\6\6\5\0\3\6\11\0\2\6"+
    "\21\0\4\6\1\313\1\0\4\6\1\0\12\6\5\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\2\6\1\314"+
    "\1\6\1\0\12\6\5\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\3\6\1\315\1\0\12\6\5\0\3\6"+
    "\11\0\2\6\21\0\5\6\1\0\2\6\1\316\1\6"+
    "\1\0\12\6\54\0\1\317\21\0\3\6\11\0\2\6"+
    "\21\0\4\6\1\320\1\0\4\6\1\0\12\6\53\0"+
    "\1\321\72\0\1\322\73\0\1\323\65\0\1\324\20\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\3\6\1\325"+
    "\1\0\12\6\5\0\3\6\11\0\2\6\21\0\5\6"+
    "\1\0\4\6\1\0\1\6\1\326\10\6\5\0\3\6"+
    "\11\0\2\6\21\0\5\6\1\0\3\6\1\327\1\0"+
    "\12\6\62\0\1\330\13\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\4\6\1\0\3\6\1\331\6\6\62\0"+
    "\1\332\13\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\4\6\1\0\3\6\1\333\6\6\5\0\3\6\11\0"+
    "\2\6\21\0\2\6\1\334\2\6\1\0\4\6\1\0"+
    "\12\6\46\0\1\335\24\0\14\57\1\62\3\57\1\336"+
    "\50\57\44\0\1\337\27\0\3\6\11\0\2\6\21\0"+
    "\2\6\1\340\2\6\1\0\4\6\1\0\12\6\5\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\4\6\1\341"+
    "\1\342\11\6\5\0\3\6\11\0\2\6\21\0\4\6"+
    "\1\343\1\0\4\6\1\0\12\6\5\0\3\6\11\0"+
    "\2\6\21\0\4\6\1\344\1\0\4\6\1\0\12\6"+
    "\50\0\1\345\25\0\3\6\11\0\2\6\21\0\1\6"+
    "\1\346\3\6\1\0\4\6\1\0\12\6\5\0\3\6"+
    "\11\0\2\6\21\0\5\6\1\0\4\6\1\0\3\6"+
    "\1\347\6\6\5\0\3\6\11\0\2\6\21\0\3\6"+
    "\1\350\1\6\1\0\4\6\1\0\12\6\47\0\1\351"+
    "\26\0\3\6\11\0\2\6\21\0\2\6\1\352\2\6"+
    "\1\0\4\6\1\0\12\6\56\0\2\341\67\0\2\353"+
    "\67\0\2\354\56\0\1\355\30\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\4\6\1\353\1\356\11\6\5\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\4\6\1\354"+
    "\1\357\11\6\5\0\3\6\11\0\2\6\21\0\1\6"+
    "\1\360\3\6\1\0\4\6\1\0\12\6\2\0\14\57"+
    "\1\361\54\57\60\0\1\362\13\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\4\6\1\0\3\6\1\363\6\6"+
    "\5\0\3\6\11\0\2\6\21\0\2\6\1\364\2\6"+
    "\1\0\4\6\1\0\12\6\5\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\2\6\1\365\1\6\1\0\12\6"+
    "\54\0\1\366\21\0\3\6\11\0\2\6\21\0\2\6"+
    "\1\367\2\6\1\0\4\6\1\0\12\6\5\0\3\6"+
    "\11\0\2\6\21\0\4\6\1\370\1\0\4\6\1\0"+
    "\12\6\50\0\1\371\66\0\1\372\70\0\1\373\70\0"+
    "\1\374\27\0\3\6\11\0\2\6\21\0\2\6\1\375"+
    "\2\6\1\0\4\6\1\0\12\6\5\0\3\6\11\0"+
    "\2\6\21\0\2\6\1\376\2\6\1\0\4\6\1\0"+
    "\12\6\5\0\3\6\11\0\2\6\21\0\2\6\1\377"+
    "\2\6\1\0\4\6\1\0\12\6\54\0\1\u0100\21\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\2\6\1\u0101"+
    "\1\6\1\0\12\6\5\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\4\6\1\0\3\6\1\u0102\6\6\5\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\3\6\1\u0103"+
    "\1\0\12\6\55\0\1\u0104\20\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\2\6\1\u0105\1\6\1\0\12\6"+
    "\54\0\1\u0106\61\0\1\u0107\30\0\3\6\11\0\2\6"+
    "\21\0\1\6\1\u0108\3\6\1\0\4\6\1\0\12\6"+
    "\5\0\3\6\11\0\2\6\21\0\4\6\1\u0109\1\0"+
    "\4\6\1\0\12\6\50\0\1\u010a\25\0\3\6\11\0"+
    "\2\6\21\0\5\6\1\0\3\6\1\u010b\1\0\12\6"+
    "\55\0\1\u010c\20\0\3\6\11\0\2\6\21\0\4\6"+
    "\1\u010d\1\0\4\6\1\0\12\6\50\0\1\u010e\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11628];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\3\1\2\11\1\1\1\11\2\1\4\11"+
    "\1\1\3\11\5\1\4\11\14\1\1\11\6\0\1\11"+
    "\1\1\1\0\4\1\6\11\3\1\1\0\3\1\1\0"+
    "\3\1\2\0\3\1\1\0\3\1\1\11\1\1\4\0"+
    "\1\1\1\0\2\1\1\0\4\1\1\0\5\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\2\0\4\1\1\0"+
    "\2\1\5\0\1\1\2\0\2\1\1\11\3\1\1\0"+
    "\5\1\1\0\1\1\1\0\1\1\1\11\2\1\3\0"+
    "\3\1\1\0\1\1\1\0\2\1\2\0\1\1\3\0"+
    "\1\1\1\11\1\0\4\1\1\0\5\1\1\0\1\1"+
    "\1\0\1\1\1\11\3\0\3\1\1\0\1\1\1\0"+
    "\2\1\2\0\1\11\1\0\4\1\1\0\5\1\1\0"+
    "\1\1\4\0\3\1\1\11\1\1\1\11\2\1\1\11"+
    "\1\0\1\11\1\1\1\0\3\1\1\0\3\1\1\0"+
    "\1\1\3\0\3\1\1\11\1\0\3\1\1\0\2\1"+
    "\1\0\3\11\3\1\1\0\3\1\1\0\1\1\1\0"+
    "\1\11\2\1\1\11\1\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexicoFS(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 228) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  private final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.out.println("Linea: " + (yyline+1) + " Columna: " + (yycolumn+1) + " - Error Lexico en: " + yytext());
          }
        case 61: break;
        case 2: 
          { return new Symbol(simbolofs.punto, yyline, yycolumn,yytext());
          }
        case 62: break;
        case 3: 
          { return new Symbol(simbolofs.valor_simbolo, yyline, yycolumn,yytext());
          }
        case 63: break;
        case 4: 
          { return new Symbol(simbolofs.valor_numero_completo, yyline, yycolumn,yytext());
          }
        case 64: break;
        case 5: 
          { return new Symbol(simbolofs.valor_id, yyline, yycolumn,yytext());
          }
        case 65: break;
        case 6: 
          { return new Symbol(simbolofs.div, yyline, yycolumn,yytext());
          }
        case 66: break;
        case 7: 
          { /* ignore white space. */
          }
        case 67: break;
        case 8: 
          { return new Symbol(simbolofs.por, yyline, yycolumn,yytext());
          }
        case 68: break;
        case 9: 
          { return new Symbol(simbolofs.dospuntos, yyline, yycolumn,yytext());
          }
        case 69: break;
        case 10: 
          { return new Symbol(simbolofs.parena, yyline, yycolumn,yytext());
          }
        case 70: break;
        case 11: 
          { return new Symbol(simbolofs.parenc, yyline, yycolumn,yytext());
          }
        case 71: break;
        case 12: 
          { return new Symbol(simbolofs.llavea, yyline, yycolumn,yytext());
          }
        case 72: break;
        case 13: 
          { return new Symbol(simbolofs.llavec, yyline, yycolumn,yytext());
          }
        case 73: break;
        case 14: 
          { return new Symbol(simbolofs.igual, yyline, yycolumn,yytext());
          }
        case 74: break;
        case 15: 
          { return new Symbol(simbolofs.mas, yyline, yycolumn,yytext());
          }
        case 75: break;
        case 16: 
          { return new Symbol(simbolofs.menos, yyline, yycolumn,yytext());
          }
        case 76: break;
        case 17: 
          { return new Symbol(simbolofs.pot, yyline, yycolumn,yytext());
          }
        case 77: break;
        case 18: 
          { return new Symbol(simbolofs.mayorq, yyline, yycolumn,yytext());
          }
        case 78: break;
        case 19: 
          { return new Symbol(simbolofs.menorq, yyline, yycolumn,yytext());
          }
        case 79: break;
        case 20: 
          { return new Symbol(simbolofs.not, yyline, yycolumn,yytext());
          }
        case 80: break;
        case 21: 
          { return new Symbol(simbolofs.coma, yyline, yycolumn,yytext());
          }
        case 81: break;
        case 22: 
          { return new Symbol(simbolofs.pyc, yyline, yycolumn,yytext());
          }
        case 82: break;
        case 23: 
          { return new Symbol(simbolofs.corchea, yyline, yycolumn,yytext());
          }
        case 83: break;
        case 24: 
          { return new Symbol(simbolofs.corchec, yyline, yycolumn,yytext());
          }
        case 84: break;
        case 25: 
          { return new Symbol(simbolofs.signoi, yyline, yycolumn,yytext());
          }
        case 85: break;
        case 26: 
          { return new Symbol(simbolofs.valor_cadena, yyline, yycolumn,yytext());
          }
        case 86: break;
        case 27: 
          { return new Symbol(simbolofs.si, yyline, yycolumn,yytext());
          }
        case 87: break;
        case 28: 
          { return new Symbol(simbolofs.igualigual, yyline, yycolumn,yytext());
          }
        case 88: break;
        case 29: 
          { return new Symbol(simbolofs.mayorigualq, yyline, yycolumn,yytext());
          }
        case 89: break;
        case 30: 
          { return new Symbol(simbolofs.menorigualq, yyline, yycolumn,yytext());
          }
        case 90: break;
        case 31: 
          { return new Symbol(simbolofs.diferente, yyline, yycolumn,yytext());
          }
        case 91: break;
        case 32: 
          { return new Symbol(simbolofs.and, yyline, yycolumn,yytext());
          }
        case 92: break;
        case 33: 
          { return new Symbol(simbolofs.or, yyline, yycolumn,yytext());
          }
        case 93: break;
        case 34: 
          { return new Symbol(simbolofs.valor_numero_decimal, yyline, yycolumn,yytext());
          }
        case 94: break;
        case 35: 
          { 
          }
        case 95: break;
        case 36: 
          { return new Symbol(simbolofs.var, yyline, yycolumn,yytext());
          }
        case 96: break;
        case 37: 
          { return new Symbol(simbolofs.map, yyline, yycolumn,yytext());
          }
        case 97: break;
        case 38: 
          { return new Symbol(simbolofs.sino, yyline, yycolumn,yytext());
          }
        case 98: break;
        case 39: 
          { return new Symbol(simbolofs.caso, yyline, yycolumn,yytext());
          }
        case 99: break;
        case 40: 
          { return new Symbol(simbolofs.valor_nulo, yyline, yycolumn,yytext());
          }
        case 100: break;
        case 41: 
          { return new Symbol(simbolofs.valor_falso, yyline, yycolumn,yytext());
          }
        case 101: break;
        case 42: 
          { return new Symbol(simbolofs.todos, yyline, yycolumn,yytext());
          }
        case 102: break;
        case 43: 
          { return new Symbol(simbolofs.valor_path2, yyline, yycolumn,yytext());
          }
        case 103: break;
        case 44: 
          { return new Symbol(simbolofs.alguno, yyline, yycolumn,yytext());
          }
        case 104: break;
        case 45: 
          { return new Symbol(simbolofs.reduce, yyline, yycolumn,yytext());
          }
        case 105: break;
        case 46: 
          { return new Symbol(simbolofs.maximo, yyline, yycolumn,yytext());
          }
        case 106: break;
        case 47: 
          { return new Symbol(simbolofs.minimo, yyline, yycolumn,yytext());
          }
        case 107: break;
        case 48: 
          { return new Symbol(simbolofs.buscar, yyline, yycolumn,yytext());
          }
        case 108: break;
        case 49: 
          { return new Symbol(simbolofs.filtrar, yyline, yycolumn,yytext());
          }
        case 109: break;
        case 50: 
          { return new Symbol(simbolofs.defecto, yyline, yycolumn,yytext());
          }
        case 110: break;
        case 51: 
          { return new Symbol(simbolofs.detener, yyline, yycolumn,yytext());
          }
        case 111: break;
        case 52: 
          { return new Symbol(simbolofs.valor_path, yyline, yycolumn,yytext());
          }
        case 112: break;
        case 53: 
          { return new Symbol(simbolofs.retornar, yyline, yycolumn,yytext());
          }
        case 113: break;
        case 54: 
          { return new Symbol(simbolofs.invertir, yyline, yycolumn,yytext());
          }
        case 114: break;
        case 55: 
          { return new Symbol(simbolofs.imprimir, yyline, yycolumn,yytext());
          }
        case 115: break;
        case 56: 
          { return new Symbol(simbolofs.importar, yyline, yycolumn,yytext());
          }
        case 116: break;
        case 57: 
          { return new Symbol(simbolofs.valor_verdadero, yyline, yycolumn,yytext());
          }
        case 117: break;
        case 58: 
          { return new Symbol(simbolofs.selecciona, yyline, yycolumn,yytext());
          }
        case 118: break;
        case 59: 
          { return new Symbol(simbolofs.ascendente, yyline, yycolumn,yytext());
          }
        case 119: break;
        case 60: 
          { return new Symbol(simbolofs.descendente, yyline, yycolumn,yytext());
          }
        case 120: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	return null;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
