/* The following code was generated by JFlex 1.6.0 */

package Analizadores.GramaticaFS;
import java.util.LinkedList;
import java_cup.runtime.*;
import Auxiliares.Errores;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>lexicoFS.jflex</tt>
 */
public class lexicoFS implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  private static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\104\1\7\1\11\1\12\1\10\22\0\1\104\1\43\1\14"+
    "\1\2\1\2\1\2\1\44\1\0\1\31\1\32\1\13\1\36\1\46"+
    "\1\37\1\1\1\6\12\3\1\15\1\47\1\42\1\35\1\41\1\77"+
    "\1\2\1\53\1\73\1\61\1\55\1\56\1\71\1\76\1\102\1\65"+
    "\1\100\1\4\1\72\1\66\1\62\1\70\1\75\1\103\1\54\1\60"+
    "\1\63\1\74\1\52\1\4\1\67\1\101\1\4\1\50\1\16\1\51"+
    "\1\40\1\5\1\0\1\26\1\73\1\61\1\25\1\56\1\17\1\21"+
    "\1\102\1\65\1\100\1\4\1\24\1\23\1\62\1\30\1\75\1\103"+
    "\1\54\1\20\1\27\1\74\1\52\1\4\1\22\1\101\1\4\1\33"+
    "\1\45\1\34\7\0\1\11\252\0\2\64\115\0\1\57\u1ea8\0\1\11"+
    "\1\11\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\1\1\11\10\5\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\2\1"+
    "\1\25\1\26\1\27\1\30\2\5\1\1\2\5\1\1"+
    "\2\5\1\31\10\0\1\32\1\5\1\0\3\5\2\33"+
    "\1\5\1\0\5\5\1\0\2\5\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\3\5\1\0\3\5"+
    "\2\0\3\5\1\44\2\45\4\0\1\5\1\0\3\5"+
    "\1\0\2\5\1\46\1\0\5\5\1\0\3\5\1\0"+
    "\2\5\1\47\3\5\1\0\1\5\1\0\2\5\2\0"+
    "\3\5\7\0\1\5\2\0\3\5\2\50\1\0\1\5"+
    "\1\0\5\5\1\0\5\5\1\0\5\5\1\0\2\51"+
    "\1\5\1\52\3\0\4\5\2\0\1\45\1\53\4\0"+
    "\2\54\1\0\1\5\1\0\2\5\1\0\1\5\1\0"+
    "\5\5\1\0\2\5\1\0\3\5\1\0\2\55\4\5"+
    "\1\0\1\5\3\0\4\5\6\0\1\5\1\0\2\5"+
    "\2\56\2\57\4\5\1\0\1\5\1\60\2\61\2\5"+
    "\1\0\2\5\1\62\1\5\1\0\6\5\1\0\2\5"+
    "\3\0\3\5\2\63\1\64\3\0\2\65\2\66\1\0"+
    "\2\5\1\67\1\5\1\70\1\0\3\5\1\0\7\5"+
    "\1\0\4\5\1\0\2\5\3\0\3\5\1\71\1\72"+
    "\2\0\1\5\1\73\1\5\1\0\1\5\1\74\1\75"+
    "\1\0\2\5\1\76\1\5\1\0\4\5\1\0\4\5"+
    "\1\0\2\5\1\77\1\100\1\101\1\77\1\100\1\101"+
    "\2\0\2\5\1\0\1\5\1\0\1\5\1\102\1\5"+
    "\1\0\4\5\1\0\4\5\1\0\2\5\1\0\2\103"+
    "\1\5\1\0\2\104\2\5\1\0\2\5\1\105\1\5"+
    "\2\106\4\5\1\0\1\5\1\107\1\110\2\111\2\5"+
    "\1\0\2\5\1\0\7\5\2\112\2\5\2\113\1\5"+
    "\1\0\2\5\1\114\4\5\1\0\3\5\1\0\1\5"+
    "\1\0\5\5\1\0\3\5\1\0\1\5\1\0\1\115"+
    "\1\5\1\116\2\5\1\0\3\5\1\0\1\5\1\0"+
    "\2\5\1\117\1\0\1\5\1\120\2\121\1\5\1\0"+
    "\1\122\1\5\1\0\2\5\1\0\1\5\2\123\1\5"+
    "\2\0\2\5\2\0\1\5\1\0\1\5\2\124\1\0"+
    "\1\5\2\125";

  private static int [] zzUnpackAction() {
    int [] result = new int[493];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\105\0\105\0\212\0\317\0\u0114\0\105"+
    "\0\105\0\u0159\0\105\0\u019e\0\u01e3\0\u0228\0\u026d\0\u02b2"+
    "\0\u02f7\0\u033c\0\u0381\0\105\0\105\0\105\0\105\0\u03c6"+
    "\0\u040b\0\u0450\0\105\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9"+
    "\0\105\0\105\0\105\0\105\0\u05ee\0\u0633\0\u0678\0\u06bd"+
    "\0\u0702\0\u0747\0\u078c\0\u07d1\0\105\0\u0816\0\u085b\0\u08a0"+
    "\0\u08e5\0\u092a\0\u096f\0\u09b4\0\u09f9\0\105\0\u0a3e\0\u0a83"+
    "\0\u0ac8\0\u0b0d\0\u0b52\0\u0b97\0\u0bdc\0\u0c21\0\u0c66\0\u0cab"+
    "\0\u0cf0\0\u0d35\0\u0d7a\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\105"+
    "\0\105\0\105\0\105\0\105\0\105\0\105\0\105\0\u0ed3"+
    "\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u10b6\0\u10fb"+
    "\0\u1140\0\u1185\0\u11ca\0\u0816\0\105\0\u120f\0\u1254\0\u1299"+
    "\0\u12de\0\u1323\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c\0\u14c1"+
    "\0\u1506\0\u154b\0\317\0\u1590\0\u15d5\0\u161a\0\u165f\0\u16a4"+
    "\0\u16e9\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc"+
    "\0\317\0\u1911\0\u1956\0\u199b\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf"+
    "\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7"+
    "\0\u1d1c\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u1eba\0\u1eff"+
    "\0\u1f44\0\u1f89\0\u1fce\0\105\0\317\0\u2013\0\u2058\0\u209d"+
    "\0\u20e2\0\u2127\0\u216c\0\u21b1\0\u21f6\0\u223b\0\u2280\0\u22c5"+
    "\0\u230a\0\u234f\0\u2394\0\u23d9\0\u241e\0\u2463\0\u24a8\0\u24ed"+
    "\0\u2532\0\u2577\0\317\0\105\0\u25bc\0\317\0\u2601\0\u2646"+
    "\0\u268b\0\u26d0\0\u2715\0\u275a\0\u279f\0\u27e4\0\u2829\0\u2829"+
    "\0\105\0\u286e\0\u28b3\0\u28f8\0\u293d\0\317\0\105\0\u2982"+
    "\0\u29c7\0\u2a0c\0\u2a51\0\u2a96\0\u2adb\0\u2b20\0\u2b65\0\u2baa"+
    "\0\u2bef\0\u2c34\0\u2c79\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d\0\u2dd2"+
    "\0\u2e17\0\u2e5c\0\u2ea1\0\u2ee6\0\317\0\105\0\u2f2b\0\u2f70"+
    "\0\u2fb5\0\u2ffa\0\u303f\0\u3084\0\u30c9\0\u310e\0\u3153\0\u3198"+
    "\0\u31dd\0\u3222\0\u3267\0\u32ac\0\u32f1\0\u3336\0\u337b\0\u33c0"+
    "\0\u3405\0\u344a\0\u348f\0\u34d4\0\u3519\0\105\0\317\0\105"+
    "\0\317\0\u355e\0\u35a3\0\u35e8\0\u362d\0\u3672\0\u36b7\0\317"+
    "\0\105\0\317\0\u36fc\0\u3741\0\u3786\0\u37cb\0\u3810\0\317"+
    "\0\u3855\0\u389a\0\u38df\0\u3924\0\u3969\0\u39ae\0\u39f3\0\u3a38"+
    "\0\u3a7d\0\u3ac2\0\u3b07\0\u3b4c\0\u3b91\0\u3bd6\0\u3c1b\0\u3c60"+
    "\0\u3ca5\0\317\0\105\0\105\0\u3cea\0\u3d2f\0\u3d74\0\105"+
    "\0\317\0\105\0\317\0\u3db9\0\u3dfe\0\u3e43\0\317\0\u3e88"+
    "\0\317\0\u3ecd\0\u3f12\0\u3f57\0\u3f9c\0\u3fe1\0\u4026\0\u406b"+
    "\0\u40b0\0\u40f5\0\u413a\0\u417f\0\u41c4\0\u4209\0\u424e\0\u4293"+
    "\0\u42d8\0\u431d\0\u4362\0\u43a7\0\u43ec\0\u4431\0\u4476\0\u44bb"+
    "\0\u4500\0\u4545\0\u458a\0\105\0\105\0\u45cf\0\u4614\0\u4659"+
    "\0\317\0\u469e\0\u46e3\0\u4728\0\317\0\317\0\u476d\0\u47b2"+
    "\0\u47f7\0\317\0\u483c\0\u4881\0\u48c6\0\u490b\0\u4950\0\u4995"+
    "\0\u49da\0\u4a1f\0\u4a64\0\u4aa9\0\u4aee\0\u4b33\0\u4b78\0\u4bbd"+
    "\0\105\0\105\0\105\0\317\0\317\0\317\0\u4c02\0\u4c47"+
    "\0\u4c8c\0\u4cd1\0\u4d16\0\u4d5b\0\u4da0\0\u4de5\0\317\0\u4e2a"+
    "\0\u4e6f\0\u4eb4\0\u4ef9\0\u4f3e\0\u4f83\0\u4fc8\0\u500d\0\u5052"+
    "\0\u5097\0\u50dc\0\u5121\0\u5166\0\u51ab\0\u51f0\0\105\0\317"+
    "\0\u5235\0\u527a\0\317\0\105\0\u52bf\0\u5304\0\u5349\0\u538e"+
    "\0\u53d3\0\317\0\u5418\0\105\0\317\0\u545d\0\u54a2\0\u54e7"+
    "\0\u552c\0\u5571\0\u55b6\0\317\0\105\0\317\0\105\0\u55fb"+
    "\0\u5640\0\u5685\0\u56ca\0\u570f\0\u5754\0\u5799\0\u57de\0\u5823"+
    "\0\u5868\0\u58ad\0\u58f2\0\u5937\0\105\0\317\0\u597c\0\u59c1"+
    "\0\105\0\317\0\u5a06\0\u5a4b\0\u5a90\0\u5ad5\0\317\0\u5b1a"+
    "\0\u5b5f\0\u5ba4\0\u5be9\0\u5c2e\0\u5c73\0\u5cb8\0\u5cfd\0\u5d42"+
    "\0\u5d87\0\u5dcc\0\u5e11\0\u5e56\0\u5e9b\0\u5ee0\0\u5f25\0\u5f6a"+
    "\0\u5faf\0\u5ff4\0\u6039\0\u607e\0\u60c3\0\u6108\0\317\0\u614d"+
    "\0\317\0\u6192\0\u61d7\0\u621c\0\u6261\0\u62a6\0\u62eb\0\u6330"+
    "\0\u6375\0\u63ba\0\u63ff\0\u6444\0\317\0\u6489\0\u64ce\0\317"+
    "\0\317\0\105\0\u6513\0\u6558\0\317\0\u659d\0\u65e2\0\u6627"+
    "\0\u666c\0\u66b1\0\u66f6\0\105\0\317\0\u673b\0\u6780\0\u67c5"+
    "\0\u680a\0\u684f\0\u6894\0\u68d9\0\u691e\0\u6963\0\u69a8\0\105"+
    "\0\317\0\u69ed\0\u6a32\0\105\0\317";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[493];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\6\1\7\2\10\1\0"+
    "\1\10\1\11\1\12\1\13\1\2\1\14\1\15\2\6"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\21\1\46\1\20\1\6\1\47\1\15\1\50\1\51"+
    "\1\22\1\52\1\53\1\16\1\6\1\23\1\14\1\17"+
    "\1\54\3\6\1\55\4\6\1\10\106\0\1\56\1\0"+
    "\1\5\104\0\3\6\11\0\12\6\21\0\5\6\1\0"+
    "\4\6\1\0\12\6\1\0\4\6\7\0\1\57\4\0"+
    "\1\60\71\0\1\61\1\62\2\61\1\63\1\64\1\65"+
    "\5\61\1\66\1\61\1\65\12\63\21\61\5\63\1\61"+
    "\4\63\1\61\12\63\1\61\4\63\1\61\3\0\3\6"+
    "\11\0\7\6\1\67\2\6\21\0\1\6\1\67\3\6"+
    "\1\0\4\6\1\70\1\71\6\6\1\72\2\6\1\0"+
    "\4\6\4\0\3\6\11\0\12\6\21\0\4\6\1\73"+
    "\1\0\4\6\1\74\1\75\11\6\1\0\4\6\4\0"+
    "\3\6\11\0\7\6\1\76\2\6\21\0\1\6\1\76"+
    "\3\6\1\0\4\6\1\77\1\100\11\6\1\0\4\6"+
    "\4\0\3\6\11\0\12\6\21\0\4\6\1\101\1\0"+
    "\4\6\1\0\12\6\1\0\4\6\4\0\3\6\11\0"+
    "\12\6\21\0\4\6\1\102\1\0\4\6\1\0\12\6"+
    "\1\0\4\6\4\0\3\6\11\0\1\6\1\103\3\6"+
    "\1\104\4\6\21\0\5\6\1\105\1\103\3\6\1\0"+
    "\5\6\1\104\4\6\1\0\4\6\4\0\3\6\11\0"+
    "\11\6\1\106\21\0\5\6\1\0\4\6\1\0\3\6"+
    "\1\106\6\6\1\0\4\6\4\0\3\6\11\0\12\6"+
    "\21\0\5\6\1\0\4\6\1\0\6\6\1\107\3\6"+
    "\1\0\4\6\36\0\1\110\105\0\1\111\105\0\1\112"+
    "\102\0\1\113\104\0\1\114\104\0\1\115\113\0\1\116"+
    "\105\0\1\117\42\0\3\6\11\0\7\6\1\120\2\6"+
    "\21\0\1\6\1\120\2\6\1\121\1\0\4\6\1\0"+
    "\12\6\1\0\4\6\4\0\3\6\11\0\12\6\21\0"+
    "\4\6\1\122\1\0\4\6\1\0\12\6\1\0\4\6"+
    "\57\0\1\123\5\0\2\74\22\0\3\6\11\0\7\6"+
    "\1\124\2\6\21\0\1\6\1\124\1\125\2\6\1\0"+
    "\4\6\1\0\12\6\1\0\4\6\4\0\3\6\11\0"+
    "\12\6\21\0\5\6\1\0\4\6\1\0\7\6\1\126"+
    "\2\6\1\0\4\6\24\0\1\127\36\0\1\130\3\0"+
    "\1\127\21\0\3\6\11\0\4\6\1\131\5\6\21\0"+
    "\5\6\1\0\2\6\1\132\1\6\1\0\1\6\1\131"+
    "\10\6\1\0\4\6\4\0\3\6\11\0\12\6\21\0"+
    "\5\6\1\0\4\6\1\0\7\6\1\133\2\6\1\0"+
    "\4\6\4\0\1\134\101\0\7\57\1\135\1\136\2\0"+
    "\72\57\13\60\1\137\71\60\14\61\1\66\104\61\1\66"+
    "\2\61\1\140\1\61\1\141\64\61\1\62\1\61\3\64"+
    "\6\61\1\66\1\142\1\65\12\64\21\61\5\64\1\61"+
    "\4\64\1\61\12\64\1\61\4\64\2\61\1\62\1\61"+
    "\3\64\6\61\1\66\1\61\1\65\12\64\21\61\5\64"+
    "\1\61\4\64\1\61\12\64\1\61\4\64\2\61\1\62"+
    "\2\61\2\64\6\61\1\66\1\61\1\65\12\64\21\61"+
    "\5\64\1\61\4\64\1\61\12\64\1\61\4\64\1\61"+
    "\3\0\3\6\11\0\5\6\1\143\4\6\21\0\5\6"+
    "\1\0\4\6\1\0\5\6\1\143\4\6\1\0\4\6"+
    "\25\0\1\144\45\0\1\144\15\0\3\6\11\0\5\6"+
    "\1\145\4\6\21\0\5\6\1\0\4\6\1\0\5\6"+
    "\1\145\4\6\1\0\4\6\4\0\3\6\11\0\12\6"+
    "\21\0\5\6\1\0\2\6\1\146\1\6\1\0\12\6"+
    "\1\0\4\6\4\0\3\6\11\0\5\6\1\147\4\6"+
    "\21\0\5\6\1\0\4\6\1\0\5\6\1\147\4\6"+
    "\1\0\4\6\63\0\1\150\25\0\3\6\11\0\12\6"+
    "\21\0\5\6\1\0\2\6\1\151\1\6\1\0\12\6"+
    "\1\0\4\6\4\0\3\6\11\0\3\6\1\152\6\6"+
    "\21\0\5\6\1\0\4\6\1\0\2\6\1\152\5\6"+
    "\1\153\1\6\1\0\4\6\63\0\1\154\25\0\3\6"+
    "\11\0\12\6\21\0\5\6\1\0\2\6\1\155\1\6"+
    "\1\0\12\6\1\0\4\6\4\0\3\6\11\0\12\6"+
    "\21\0\4\6\1\156\1\0\4\6\1\0\12\6\1\0"+
    "\4\6\4\0\3\6\11\0\1\157\1\160\6\6\1\161"+
    "\1\6\21\0\5\6\1\162\1\160\2\6\1\161\1\0"+
    "\4\6\1\157\5\6\1\0\4\6\4\0\3\6\11\0"+
    "\12\6\21\0\5\6\1\0\1\6\1\163\2\6\1\0"+
    "\12\6\1\0\4\6\4\0\3\6\11\0\2\6\1\164"+
    "\7\6\21\0\5\6\1\0\1\6\1\165\2\6\1\0"+
    "\11\6\1\164\1\0\4\6\62\0\1\166\26\0\3\6"+
    "\11\0\6\6\1\167\3\6\21\0\3\6\1\167\1\6"+
    "\1\0\4\6\1\0\12\6\1\0\4\6\4\0\3\6"+
    "\11\0\10\6\1\170\1\6\21\0\5\6\1\0\3\6"+
    "\1\170\1\0\12\6\1\0\4\6\4\0\3\6\11\0"+
    "\12\6\21\0\2\6\1\171\2\6\1\0\4\6\1\0"+
    "\12\6\1\0\4\6\4\0\3\6\11\0\12\6\21\0"+
    "\2\6\1\172\2\6\1\0\4\6\1\0\12\6\1\0"+
    "\4\6\4\0\3\6\11\0\6\6\1\173\1\6\1\174"+
    "\1\6\21\0\3\6\1\173\1\6\1\0\3\6\1\174"+
    "\1\0\12\6\1\0\4\6\25\0\1\175\45\0\1\175"+
    "\15\0\3\6\11\0\1\6\1\176\10\6\21\0\5\6"+
    "\1\177\1\176\3\6\1\0\12\6\1\0\4\6\4\0"+
    "\3\6\11\0\12\6\21\0\4\6\1\200\1\0\4\6"+
    "\1\0\12\6\1\0\4\6\4\0\3\6\11\0\5\6"+
    "\1\201\4\6\21\0\5\6\1\0\4\6\1\0\5\6"+
    "\1\201\4\6\1\0\4\6\76\0\1\202\61\0\1\203"+
    "\35\0\3\6\11\0\12\6\21\0\5\6\1\0\4\6"+
    "\1\0\10\6\1\204\1\6\1\0\4\6\4\0\3\6"+
    "\11\0\12\6\21\0\1\205\4\6\1\0\4\6\1\0"+
    "\12\6\1\0\4\6\4\0\3\6\11\0\1\6\1\206"+
    "\10\6\21\0\5\6\1\207\1\206\3\6\1\0\12\6"+
    "\1\0\4\6\10\0\1\135\75\0\6\210\1\135\4\210"+
    "\1\211\71\210\14\61\1\66\3\61\1\212\100\61\1\66"+
    "\5\61\1\213\2\61\1\214\73\61\1\66\1\61\1\215"+
    "\66\61\3\0\3\6\11\0\1\6\1\216\10\6\21\0"+
    "\5\6\1\217\1\216\3\6\1\0\12\6\1\0\4\6"+
    "\30\0\1\220\33\0\1\220\24\0\3\6\11\0\10\6"+
    "\1\221\1\6\21\0\5\6\1\0\3\6\1\221\1\0"+
    "\12\6\1\0\4\6\4\0\3\6\11\0\12\6\21\0"+
    "\5\6\1\0\1\6\1\222\2\6\1\0\12\6\1\0"+
    "\4\6\4\0\3\6\11\0\12\6\21\0\4\6\1\223"+
    "\1\0\4\6\1\0\12\6\1\0\4\6\31\0\1\224"+
    "\37\0\1\224\17\0\3\6\11\0\11\6\1\225\21\0"+
    "\5\6\1\0\4\6\1\0\3\6\1\225\6\6\1\0"+
    "\4\6\4\0\3\6\11\0\12\6\21\0\5\6\1\0"+
    "\4\6\1\226\1\227\11\6\1\0\4\6\65\0\2\230"+
    "\22\0\3\6\11\0\12\6\21\0\5\6\1\0\4\6"+
    "\1\230\1\231\11\6\1\0\4\6\4\0\3\6\11\0"+
    "\12\6\21\0\2\6\1\232\2\6\1\0\4\6\1\0"+
    "\12\6\1\0\4\6\4\0\3\6\11\0\12\6\21\0"+
    "\4\6\1\233\1\0\4\6\1\0\12\6\1\0\4\6"+
    "\4\0\3\6\11\0\12\6\21\0\5\6\1\0\1\6"+
    "\1\234\2\6\1\0\12\6\1\0\4\6\4\0\3\6"+
    "\11\0\12\6\21\0\4\6\1\235\1\0\4\6\1\0"+
    "\12\6\1\0\4\6\62\0\1\236\26\0\3\6\11\0"+
    "\12\6\21\0\4\6\1\237\1\0\4\6\1\0\12\6"+
    "\1\0\4\6\4\0\3\6\11\0\12\6\21\0\5\6"+
    "\1\0\4\6\1\0\7\6\1\240\2\6\1\0\4\6"+
    "\4\0\3\6\11\0\5\6\1\241\1\6\1\242\2\6"+
    "\21\0\1\6\1\242\2\6\1\243\1\0\4\6\1\0"+
    "\5\6\1\241\4\6\1\0\4\6\57\0\1\244\31\0"+
    "\3\6\11\0\11\6\1\245\21\0\5\6\1\0\4\6"+
    "\1\0\3\6\1\245\6\6\1\0\4\6\4\0\3\6"+
    "\11\0\12\6\21\0\4\6\1\246\1\0\4\6\1\0"+
    "\12\6\1\0\4\6\4\0\3\6\11\0\6\6\1\247"+
    "\3\6\21\0\3\6\1\247\1\6\1\0\4\6\1\0"+
    "\12\6\1\0\4\6\4\0\3\6\11\0\12\6\21\0"+
    "\5\6\1\0\4\6\1\0\7\6\1\250\2\6\1\0"+
    "\4\6\4\0\3\6\11\0\11\6\1\251\21\0\5\6"+
    "\1\0\4\6\1\0\3\6\1\251\6\6\1\0\4\6"+
    "\57\0\1\252\31\0\3\6\11\0\11\6\1\253\21\0"+
    "\5\6\1\0\4\6\1\0\3\6\1\253\6\6\1\0"+
    "\4\6\31\0\1\254\37\0\1\254\17\0\3\6\11\0"+
    "\7\6\1\255\2\6\21\0\1\6\1\255\3\6\1\0"+
    "\4\6\1\0\12\6\1\0\4\6\4\0\3\6\11\0"+
    "\11\6\1\256\21\0\5\6\1\0\4\6\1\0\3\6"+
    "\1\256\6\6\1\0\4\6\31\0\1\257\23\0\1\260"+
    "\13\0\1\257\72\0\1\261\31\0\3\6\11\0\11\6"+
    "\1\262\21\0\2\6\1\263\2\6\1\0\4\6\1\0"+
    "\3\6\1\262\6\6\1\0\4\6\4\0\3\6\11\0"+
    "\12\6\21\0\4\6\1\264\1\0\4\6\1\0\12\6"+
    "\1\0\4\6\4\0\3\6\11\0\12\6\21\0\5\6"+
    "\1\0\1\6\1\265\2\6\1\0\12\6\1\0\4\6"+
    "\62\0\1\266\23\0\6\60\1\267\4\60\1\137\77\60"+
    "\1\270\4\60\1\137\71\60\14\61\1\271\104\61\1\66"+
    "\6\61\1\272\75\61\1\66\11\61\1\273\57\61\1\274"+
    "\2\61\2\275\6\61\1\66\1\61\1\215\12\275\21\61"+
    "\5\275\1\61\4\275\1\61\12\275\1\61\4\275\1\61"+
    "\3\0\3\6\11\0\11\6\1\276\21\0\5\6\1\0"+
    "\4\6\1\0\3\6\1\276\6\6\1\0\4\6\31\0"+
    "\1\277\37\0\1\277\70\0\1\300\33\0\3\6\11\0"+
    "\12\6\21\0\2\6\1\301\2\6\1\0\4\6\1\0"+
    "\12\6\1\0\4\6\4\0\3\6\11\0\12\6\21\0"+
    "\5\6\1\0\4\6\1\302\1\303\11\6\1\0\4\6"+
    "\4\0\3\6\11\0\12\6\21\0\5\6\1\0\1\6"+
    "\1\304\2\6\1\0\12\6\1\0\4\6\24\0\1\305"+
    "\42\0\1\305\21\0\3\6\11\0\4\6\1\306\5\6"+
    "\21\0\5\6\1\0\4\6\1\0\1\6\1\306\10\6"+
    "\1\0\4\6\24\0\1\307\42\0\1\307\21\0\3\6"+
    "\11\0\4\6\1\310\5\6\21\0\5\6\1\0\4\6"+
    "\1\0\1\6\1\310\10\6\1\0\4\6\4\0\3\6"+
    "\11\0\2\6\1\311\7\6\21\0\5\6\1\0\4\6"+
    "\1\0\11\6\1\311\1\0\4\6\4\0\3\6\11\0"+
    "\12\6\21\0\5\6\1\0\1\6\1\312\2\6\1\0"+
    "\12\6\1\0\4\6\4\0\3\6\11\0\12\6\21\0"+
    "\4\6\1\313\1\0\4\6\1\0\12\6\1\0\4\6"+
    "\4\0\3\6\11\0\12\6\21\0\5\6\1\0\2\6"+
    "\1\314\1\6\1\0\12\6\1\0\4\6\57\0\1\315"+
    "\31\0\3\6\11\0\12\6\21\0\5\6\1\0\2\6"+
    "\1\316\1\6\1\0\12\6\1\0\4\6\4\0\3\6"+
    "\11\0\12\6\21\0\5\6\1\0\2\6\1\317\1\6"+
    "\1\0\12\6\1\0\4\6\4\0\3\6\11\0\12\6"+
    "\21\0\5\6\1\0\4\6\1\320\1\321\11\6\1\0"+
    "\4\6\4\0\3\6\11\0\12\6\21\0\2\6\1\322"+
    "\2\6\1\0\4\6\1\0\12\6\1\0\4\6\4\0"+
    "\3\6\11\0\12\6\21\0\2\6\1\323\2\6\1\0"+
    "\4\6\1\0\12\6\1\0\4\6\63\0\1\324\25\0"+
    "\3\6\11\0\1\6\1\325\10\6\21\0\5\6\1\326"+
    "\1\325\3\6\1\0\12\6\1\0\4\6\4\0\3\6"+
    "\11\0\12\6\21\0\5\6\1\0\2\6\1\327\1\6"+
    "\1\0\12\6\1\0\4\6\4\0\3\6\11\0\7\6"+
    "\1\330\2\6\21\0\1\6\1\330\3\6\1\0\4\6"+
    "\1\0\12\6\1\0\4\6\4\0\3\6\11\0\12\6"+
    "\21\0\5\6\1\0\1\6\1\331\2\6\1\0\12\6"+
    "\1\0\4\6\4\0\3\6\11\0\12\6\21\0\2\6"+
    "\1\332\2\6\1\0\4\6\1\0\12\6\1\0\4\6"+
    "\62\0\1\333\26\0\3\6\11\0\12\6\21\0\2\6"+
    "\1\334\2\6\1\0\4\6\1\0\12\6\1\0\4\6"+
    "\55\0\1\335\114\0\2\336\73\0\1\337\33\0\3\6"+
    "\11\0\12\6\21\0\2\6\1\340\2\6\1\0\4\6"+
    "\1\0\12\6\1\0\4\6\4\0\3\6\11\0\12\6"+
    "\21\0\5\6\1\0\4\6\1\336\1\341\11\6\1\0"+
    "\4\6\4\0\3\6\11\0\12\6\21\0\2\6\1\342"+
    "\2\6\1\0\4\6\1\0\12\6\1\0\4\6\4\0"+
    "\3\6\11\0\7\6\1\343\2\6\21\0\1\6\1\343"+
    "\3\6\1\0\4\6\1\0\12\6\1\0\4\6\27\0"+
    "\1\344\24\0\1\344\37\0\1\210\76\0\14\61\1\66"+
    "\7\61\1\345\74\61\1\66\12\61\1\346\71\61\1\66"+
    "\2\61\1\347\1\61\1\350\64\61\1\274\1\61\3\275"+
    "\6\61\1\66\1\61\1\215\12\275\21\61\5\275\1\61"+
    "\4\275\1\61\12\275\1\61\4\275\1\61\26\0\1\351"+
    "\24\0\1\351\34\0\3\6\11\0\7\6\1\352\2\6"+
    "\21\0\1\6\1\352\3\6\1\0\4\6\1\0\12\6"+
    "\1\0\4\6\31\0\1\353\37\0\1\353\17\0\3\6"+
    "\11\0\11\6\1\354\21\0\5\6\1\0\4\6\1\0"+
    "\3\6\1\354\6\6\1\0\4\6\4\0\3\6\11\0"+
    "\12\6\21\0\5\6\1\0\1\6\1\355\2\6\1\0"+
    "\12\6\1\0\4\6\31\0\1\356\37\0\1\356\17\0"+
    "\3\6\11\0\11\6\1\357\21\0\5\6\1\0\4\6"+
    "\1\0\3\6\1\357\6\6\1\0\4\6\31\0\1\360"+
    "\37\0\1\360\17\0\3\6\11\0\11\6\1\361\21\0"+
    "\5\6\1\0\4\6\1\0\3\6\1\361\6\6\1\0"+
    "\4\6\4\0\3\6\11\0\3\6\1\362\6\6\21\0"+
    "\5\6\1\0\4\6\1\0\2\6\1\362\7\6\1\0"+
    "\4\6\4\0\3\6\11\0\10\6\1\363\1\6\21\0"+
    "\5\6\1\0\3\6\1\363\1\0\12\6\1\0\4\6"+
    "\4\0\3\6\11\0\12\6\21\0\5\6\1\0\2\6"+
    "\1\364\1\6\1\0\12\6\1\0\4\6\4\0\3\6"+
    "\11\0\12\6\21\0\4\6\1\365\1\0\4\6\1\0"+
    "\12\6\1\0\4\6\63\0\1\366\25\0\3\6\11\0"+
    "\6\6\1\367\3\6\21\0\3\6\1\367\1\6\1\0"+
    "\4\6\1\0\12\6\1\0\4\6\4\0\3\6\11\0"+
    "\11\6\1\370\21\0\5\6\1\0\4\6\1\0\3\6"+
    "\1\370\6\6\1\0\4\6\62\0\1\371\26\0\3\6"+
    "\11\0\12\6\21\0\5\6\1\0\1\6\1\372\2\6"+
    "\1\0\12\6\1\0\4\6\4\0\3\6\11\0\2\6"+
    "\1\373\7\6\21\0\5\6\1\0\4\6\1\0\11\6"+
    "\1\373\1\0\4\6\4\0\3\6\11\0\12\6\21\0"+
    "\2\6\1\374\2\6\1\0\4\6\1\0\12\6\1\0"+
    "\4\6\26\0\1\375\27\0\1\375\32\0\3\6\11\0"+
    "\12\6\21\0\4\6\1\376\1\0\4\6\1\0\12\6"+
    "\1\0\4\6\4\0\3\6\11\0\6\6\1\377\3\6"+
    "\21\0\3\6\1\377\1\6\1\0\4\6\1\0\12\6"+
    "\1\0\4\6\4\0\3\6\11\0\12\6\21\0\4\6"+
    "\1\u0100\1\0\4\6\1\0\12\6\1\0\4\6\4\0"+
    "\3\6\11\0\12\6\21\0\5\6\1\0\2\6\1\u0101"+
    "\1\6\1\0\12\6\1\0\4\6\62\0\1\u0102\26\0"+
    "\3\6\11\0\6\6\1\u0103\1\u0104\1\u0105\1\6\21\0"+
    "\1\u0106\1\u0104\1\u0107\1\u0103\1\6\1\0\1\6\1\u0108"+
    "\1\6\1\u0105\1\u0109\1\u010a\5\6\1\u010b\3\6\1\0"+
    "\4\6\30\0\1\u010c\33\0\1\u010c\44\0\1\u010d\42\0"+
    "\1\u010d\45\0\1\u010e\33\0\1\u010e\24\0\3\6\11\0"+
    "\10\6\1\u010f\1\6\21\0\5\6\1\0\3\6\1\u010f"+
    "\1\0\12\6\1\0\4\6\4\0\3\6\11\0\4\6"+
    "\1\u0110\5\6\21\0\5\6\1\0\4\6\1\0\1\6"+
    "\1\u0110\10\6\1\0\4\6\4\0\3\6\11\0\10\6"+
    "\1\u0111\1\6\21\0\5\6\1\0\3\6\1\u0111\1\0"+
    "\12\6\1\0\4\6\4\0\3\6\11\0\12\6\21\0"+
    "\2\6\1\u0112\2\6\1\0\4\6\1\0\12\6\1\0"+
    "\4\6\55\0\1\u0113\30\0\14\61\1\u0114\104\61\1\66"+
    "\13\61\1\u0115\70\61\1\66\3\61\1\u0116\100\61\1\66"+
    "\10\61\1\u0117\57\61\54\0\1\u0118\33\0\3\6\11\0"+
    "\12\6\21\0\2\6\1\u0119\2\6\1\0\4\6\1\0"+
    "\12\6\1\0\4\6\63\0\1\u011a\25\0\3\6\11\0"+
    "\12\6\21\0\5\6\1\0\2\6\1\u011b\1\6\1\0"+
    "\12\6\1\0\4\6\4\0\3\6\11\0\12\6\21\0"+
    "\5\6\1\0\4\6\1\u011c\1\u011d\11\6\1\0\4\6"+
    "\4\0\3\6\11\0\4\6\1\u011e\5\6\21\0\5\6"+
    "\1\0\4\6\1\0\1\6\1\u011e\10\6\1\0\4\6"+
    "\4\0\3\6\11\0\11\6\1\u011f\21\0\5\6\1\0"+
    "\4\6\1\0\3\6\1\u011f\6\6\1\0\4\6\4\0"+
    "\3\6\11\0\6\6\1\u0120\3\6\21\0\3\6\1\u0120"+
    "\1\6\1\0\4\6\1\0\12\6\1\0\4\6\4\0"+
    "\3\6\11\0\12\6\21\0\2\6\1\u0121\2\6\1\0"+
    "\4\6\1\0\12\6\1\0\4\6\26\0\1\u0122\27\0"+
    "\1\u0122\32\0\3\6\11\0\12\6\21\0\4\6\1\u0123"+
    "\1\0\4\6\1\0\12\6\1\0\4\6\4\0\3\6"+
    "\11\0\7\6\1\u0124\2\6\21\0\1\6\1\u0124\3\6"+
    "\1\0\4\6\1\0\12\6\1\0\4\6\4\0\3\6"+
    "\11\0\7\6\1\u0125\2\6\21\0\1\6\1\u0125\3\6"+
    "\1\0\4\6\1\0\12\6\1\0\4\6\57\0\1\u0126"+
    "\31\0\3\6\11\0\12\6\21\0\2\6\1\u0127\2\6"+
    "\1\0\4\6\1\0\12\6\1\0\4\6\4\0\3\6"+
    "\11\0\12\6\21\0\4\6\1\u0128\1\0\4\6\1\0"+
    "\12\6\1\0\4\6\4\0\3\6\11\0\7\6\1\u0129"+
    "\2\6\21\0\1\6\1\u0129\3\6\1\0\4\6\1\0"+
    "\12\6\1\0\4\6\65\0\2\u011c\22\0\3\6\11\0"+
    "\12\6\21\0\4\6\1\u012a\1\0\4\6\1\0\12\6"+
    "\1\0\4\6\4\0\3\6\11\0\12\6\21\0\2\6"+
    "\1\u012b\2\6\1\0\4\6\1\0\12\6\1\0\4\6"+
    "\4\0\3\6\11\0\12\6\21\0\4\6\1\u012c\1\0"+
    "\4\6\1\0\12\6\1\0\4\6\4\0\3\6\11\0"+
    "\12\6\21\0\4\6\1\u012d\1\0\4\6\1\u012e\1\u012f"+
    "\11\6\1\0\4\6\4\0\3\6\11\0\12\6\21\0"+
    "\4\6\1\u0130\1\0\4\6\1\0\12\6\1\0\4\6"+
    "\4\0\3\6\11\0\7\6\1\u0131\1\6\1\u0132\21\0"+
    "\1\6\1\u0131\3\6\1\0\4\6\1\0\3\6\1\u0132"+
    "\6\6\1\0\4\6\24\0\1\u0133\42\0\1\u0133\21\0"+
    "\3\6\11\0\4\6\1\u0134\5\6\21\0\5\6\1\0"+
    "\4\6\1\0\1\6\1\u0134\10\6\1\0\4\6\4\0"+
    "\3\6\11\0\11\6\1\u0135\21\0\5\6\1\0\4\6"+
    "\1\0\3\6\1\u0135\6\6\1\0\4\6\27\0\1\u0136"+
    "\24\0\1\u0136\115\0\2\u0137\103\0\2\u0138\22\0\3\6"+
    "\11\0\7\6\1\u0139\2\6\21\0\1\6\1\u0139\3\6"+
    "\1\0\4\6\1\0\12\6\1\0\4\6\4\0\3\6"+
    "\11\0\12\6\21\0\5\6\1\0\4\6\1\u0137\1\u013a"+
    "\11\6\1\0\4\6\4\0\3\6\11\0\12\6\21\0"+
    "\5\6\1\0\4\6\1\u0138\1\u013b\11\6\1\0\4\6"+
    "\1\0\14\61\1\u013c\104\61\1\u013d\104\61\1\66\11\61"+
    "\1\u013e\56\61\30\0\1\u013f\37\0\1\u013f\17\0\3\6"+
    "\11\0\11\6\1\u0140\21\0\5\6\1\0\4\6\1\0"+
    "\3\6\1\u0140\6\6\1\0\4\6\4\0\3\6\11\0"+
    "\5\6\1\u0141\4\6\21\0\5\6\1\0\4\6\1\0"+
    "\5\6\1\u0141\4\6\1\0\4\6\4\0\3\6\11\0"+
    "\12\6\21\0\4\6\1\u0142\1\0\4\6\1\0\12\6"+
    "\1\0\4\6\57\0\1\u0143\31\0\3\6\11\0\12\6"+
    "\21\0\5\6\1\0\2\6\1\u0144\1\6\1\0\12\6"+
    "\1\0\4\6\4\0\3\6\11\0\12\6\21\0\2\6"+
    "\1\u0145\2\6\1\0\4\6\1\0\12\6\1\0\4\6"+
    "\4\0\3\6\11\0\12\6\21\0\2\6\1\u0146\2\6"+
    "\1\0\4\6\1\0\12\6\1\0\4\6\63\0\1\u0147"+
    "\25\0\3\6\11\0\12\6\21\0\5\6\1\0\4\6"+
    "\1\0\10\6\1\u0148\1\6\1\0\4\6\4\0\3\6"+
    "\11\0\12\6\21\0\2\6\1\u0149\2\6\1\0\4\6"+
    "\1\0\12\6\1\0\4\6\4\0\3\6\11\0\12\6"+
    "\21\0\2\6\1\u014a\2\6\1\0\4\6\1\0\12\6"+
    "\1\0\4\6\4\0\3\6\11\0\1\6\1\u014b\10\6"+
    "\21\0\5\6\1\u014c\1\u014b\3\6\1\0\12\6\1\0"+
    "\4\6\4\0\3\6\11\0\12\6\21\0\2\6\1\u014d"+
    "\1\6\1\u014e\1\0\4\6\1\0\12\6\1\0\4\6"+
    "\4\0\3\6\11\0\3\6\1\u014f\6\6\21\0\5\6"+
    "\1\0\4\6\1\0\2\6\1\u014f\7\6\1\0\4\6"+
    "\4\0\3\6\11\0\12\6\21\0\5\6\1\0\2\6"+
    "\1\u0150\1\6\1\0\12\6\1\0\4\6\26\0\1\u0151"+
    "\27\0\1\u0151\32\0\3\6\11\0\6\6\1\u0152\3\6"+
    "\21\0\3\6\1\u0152\1\6\1\0\4\6\1\0\12\6"+
    "\1\0\4\6\4\0\3\6\11\0\12\6\21\0\5\6"+
    "\1\0\4\6\1\0\10\6\1\u0153\1\6\1\0\4\6"+
    "\4\0\3\6\11\0\12\6\21\0\5\6\1\0\4\6"+
    "\1\0\12\6\1\0\1\u0154\3\6\4\0\3\6\11\0"+
    "\12\6\21\0\5\6\1\0\2\6\1\u0155\1\6\1\0"+
    "\12\6\1\0\4\6\27\0\1\u0156\24\0\1\u0156\34\0"+
    "\3\6\11\0\7\6\1\u0157\2\6\21\0\1\6\1\u0157"+
    "\3\6\1\0\4\6\1\0\12\6\1\0\4\6\4\0"+
    "\3\6\11\0\10\6\1\u0158\1\6\21\0\5\6\1\0"+
    "\3\6\1\u0158\1\0\12\6\1\0\4\6\55\0\1\u0159"+
    "\104\0\1\u015a\104\0\1\u015b\33\0\3\6\11\0\12\6"+
    "\21\0\2\6\1\u015c\2\6\1\0\4\6\1\0\12\6"+
    "\1\0\4\6\4\0\3\6\11\0\12\6\21\0\2\6"+
    "\1\u015d\2\6\1\0\4\6\1\0\12\6\1\0\4\6"+
    "\4\0\3\6\11\0\12\6\21\0\2\6\1\u015e\2\6"+
    "\1\0\4\6\1\0\12\6\1\0\4\6\1\0\14\61"+
    "\1\66\12\61\1\u015f\55\61\62\0\1\u0160\25\0\3\6"+
    "\11\0\12\6\21\0\5\6\1\0\2\6\1\u0161\1\6"+
    "\1\0\12\6\1\0\4\6\4\0\3\6\11\0\12\6"+
    "\21\0\5\6\1\0\2\6\1\u0162\1\6\1\0\12\6"+
    "\1\0\4\6\63\0\1\u0163\25\0\3\6\11\0\10\6"+
    "\1\u0164\1\6\21\0\5\6\1\0\3\6\1\u0164\1\0"+
    "\12\6\1\0\4\6\30\0\1\u0165\33\0\1\u0165\24\0"+
    "\3\6\11\0\11\6\1\u0166\21\0\5\6\1\0\4\6"+
    "\1\0\3\6\1\u0166\6\6\1\0\4\6\4\0\3\6"+
    "\11\0\11\6\1\u0167\21\0\5\6\1\0\4\6\1\0"+
    "\3\6\1\u0167\6\6\1\0\4\6\4\0\3\6\11\0"+
    "\12\6\21\0\5\6\1\0\4\6\1\0\10\6\1\u0168"+
    "\1\6\1\0\4\6\76\0\1\u0169\12\0\3\6\11\0"+
    "\7\6\1\u016a\2\6\21\0\1\6\1\u016a\3\6\1\0"+
    "\4\6\1\0\12\6\1\0\4\6\4\0\3\6\11\0"+
    "\7\6\1\u016b\2\6\21\0\1\6\1\u016b\3\6\1\0"+
    "\4\6\1\0\12\6\1\0\4\6\4\0\3\6\11\0"+
    "\10\6\1\u016c\1\6\21\0\5\6\1\0\3\6\1\u016c"+
    "\1\0\12\6\1\0\4\6\4\0\3\6\11\0\10\6"+
    "\1\u016d\1\6\21\0\5\6\1\0\3\6\1\u016d\1\0"+
    "\12\6\1\0\4\6\57\0\1\u016e\31\0\3\6\11\0"+
    "\12\6\21\0\4\6\1\u016f\1\0\4\6\1\0\12\6"+
    "\1\0\4\6\4\0\3\6\11\0\12\6\21\0\2\6"+
    "\1\u0170\2\6\1\0\4\6\1\0\12\6\1\0\4\6"+
    "\4\0\3\6\11\0\7\6\1\u0171\2\6\21\0\1\6"+
    "\1\u0171\3\6\1\0\4\6\1\0\12\6\1\0\4\6"+
    "\4\0\3\6\11\0\10\6\1\u0172\1\6\21\0\5\6"+
    "\1\0\3\6\1\u0172\1\0\12\6\1\0\4\6\22\0"+
    "\1\u0173\54\0\1\u0173\11\0\3\6\11\0\2\6\1\u0174"+
    "\7\6\21\0\5\6\1\0\4\6\1\0\11\6\1\u0174"+
    "\1\0\4\6\4\0\3\6\11\0\11\6\1\u0175\21\0"+
    "\5\6\1\0\4\6\1\0\3\6\1\u0175\6\6\1\0"+
    "\4\6\1\0\14\61\1\66\13\61\1\u0176\54\61\26\0"+
    "\1\u0177\24\0\1\u0177\34\0\3\6\11\0\7\6\1\u0178"+
    "\2\6\21\0\1\6\1\u0178\3\6\1\0\4\6\1\0"+
    "\12\6\1\0\4\6\4\0\3\6\11\0\10\6\1\u0179"+
    "\1\6\21\0\5\6\1\0\3\6\1\u0179\1\0\12\6"+
    "\1\0\4\6\30\0\1\u017a\33\0\1\u017a\24\0\3\6"+
    "\11\0\12\6\21\0\4\6\1\u017b\1\0\4\6\1\0"+
    "\12\6\1\0\4\6\57\0\1\u017c\31\0\3\6\11\0"+
    "\12\6\21\0\2\6\1\u017d\2\6\1\0\4\6\1\0"+
    "\12\6\1\0\4\6\4\0\3\6\11\0\5\6\1\u017e"+
    "\4\6\21\0\5\6\1\0\4\6\1\0\5\6\1\u017e"+
    "\4\6\1\0\4\6\25\0\1\u017f\45\0\1\u017f\15\0"+
    "\3\6\11\0\12\6\21\0\5\6\1\0\4\6\1\0"+
    "\12\6\1\0\1\6\1\u0180\2\6\4\0\3\6\11\0"+
    "\10\6\1\u0181\1\6\21\0\5\6\1\0\3\6\1\u0181"+
    "\1\0\12\6\1\0\4\6\4\0\3\6\11\0\11\6"+
    "\1\u0182\21\0\5\6\1\0\4\6\1\0\3\6\1\u0182"+
    "\6\6\1\0\4\6\4\0\3\6\11\0\7\6\1\u0183"+
    "\2\6\21\0\1\6\1\u0183\3\6\1\0\4\6\1\0"+
    "\12\6\1\0\4\6\31\0\1\u0184\37\0\1\u0184\17\0"+
    "\3\6\11\0\11\6\1\u0185\21\0\5\6\1\0\4\6"+
    "\1\0\3\6\1\u0185\6\6\1\0\4\6\4\0\3\6"+
    "\11\0\11\6\1\u0186\21\0\5\6\1\0\4\6\1\0"+
    "\3\6\1\u0186\6\6\1\0\4\6\4\0\3\6\11\0"+
    "\10\6\1\u0187\1\6\21\0\5\6\1\0\3\6\1\u0187"+
    "\1\0\12\6\1\0\4\6\4\0\3\6\11\0\12\6"+
    "\21\0\2\6\1\u0188\1\6\1\u0189\1\0\4\6\1\0"+
    "\12\6\1\0\4\6\57\0\1\u018a\31\0\3\6\11\0"+
    "\12\6\21\0\4\6\1\u018b\1\0\4\6\1\0\12\6"+
    "\1\0\4\6\4\0\3\6\11\0\12\6\21\0\5\6"+
    "\1\0\2\6\1\u018c\1\6\1\0\12\6\1\0\4\6"+
    "\1\0\14\61\1\u018d\70\61\3\0\3\6\11\0\12\6"+
    "\21\0\4\6\1\u018e\1\0\4\6\1\0\12\6\1\0"+
    "\4\6\57\0\1\u018f\31\0\3\6\11\0\12\6\21\0"+
    "\4\6\1\u0190\1\0\2\6\1\u0191\1\6\1\u0192\1\u0193"+
    "\11\6\1\0\4\6\4\0\3\6\11\0\12\6\21\0"+
    "\4\6\1\u0194\1\0\4\6\1\0\12\6\1\0\4\6"+
    "\57\0\1\u0195\31\0\3\6\11\0\6\6\1\u0196\3\6"+
    "\21\0\3\6\1\u0196\1\6\1\0\4\6\1\0\12\6"+
    "\1\0\4\6\4\0\3\6\11\0\12\6\21\0\4\6"+
    "\1\u0197\1\0\4\6\1\0\12\6\1\0\4\6\4\0"+
    "\3\6\11\0\12\6\21\0\5\6\1\0\2\6\1\u0198"+
    "\1\6\1\0\12\6\1\0\4\6\4\0\3\6\11\0"+
    "\6\6\1\u0199\3\6\21\0\3\6\1\u0199\1\6\1\0"+
    "\4\6\1\0\12\6\1\0\4\6\4\0\3\6\11\0"+
    "\12\6\21\0\4\6\1\u019a\1\0\4\6\1\0\12\6"+
    "\1\0\4\6\4\0\3\6\11\0\11\6\1\u019b\21\0"+
    "\5\6\1\0\4\6\1\0\3\6\1\u019b\6\6\1\0"+
    "\4\6\4\0\3\6\11\0\12\6\21\0\5\6\1\0"+
    "\2\6\1\u019c\1\6\1\0\12\6\1\0\4\6\63\0"+
    "\1\u019d\25\0\3\6\11\0\12\6\21\0\5\6\1\0"+
    "\2\6\1\u019e\1\6\1\0\12\6\1\0\4\6\4\0"+
    "\3\6\11\0\10\6\1\u019f\1\6\21\0\5\6\1\0"+
    "\3\6\1\u019f\1\0\12\6\1\0\4\6\4\0\3\6"+
    "\11\0\11\6\1\u01a0\21\0\5\6\1\0\4\6\1\0"+
    "\3\6\1\u01a0\6\6\1\0\4\6\26\0\1\u01a1\27\0"+
    "\1\u01a1\32\0\3\6\11\0\6\6\1\u01a2\3\6\21\0"+
    "\3\6\1\u01a2\1\6\1\0\4\6\1\0\12\6\1\0"+
    "\4\6\4\0\3\6\11\0\2\6\1\u01a3\7\6\21\0"+
    "\5\6\1\0\4\6\1\0\11\6\1\u01a3\1\0\4\6"+
    "\22\0\1\u01a4\54\0\1\u01a4\11\0\3\6\11\0\12\6"+
    "\21\0\4\6\1\u01a5\1\0\4\6\1\0\12\6\1\0"+
    "\4\6\4\0\3\6\11\0\3\6\1\u01a6\6\6\21\0"+
    "\5\6\1\0\4\6\1\0\2\6\1\u01a6\7\6\1\0"+
    "\4\6\4\0\3\6\11\0\7\6\1\u01a7\2\6\21\0"+
    "\1\6\1\u01a7\3\6\1\0\4\6\1\0\12\6\1\0"+
    "\4\6\4\0\3\6\11\0\12\6\21\0\5\6\1\0"+
    "\4\6\1\0\7\6\1\u01a8\2\6\1\0\4\6\4\0"+
    "\3\6\11\0\3\6\1\u01a9\6\6\21\0\5\6\1\0"+
    "\4\6\1\0\2\6\1\u01a9\7\6\1\0\4\6\4\0"+
    "\3\6\11\0\5\6\1\u01aa\4\6\21\0\5\6\1\0"+
    "\4\6\1\0\5\6\1\u01aa\4\6\1\0\4\6\4\0"+
    "\3\6\11\0\12\6\21\0\4\6\1\u01ab\1\0\4\6"+
    "\1\0\12\6\1\0\4\6\4\0\3\6\11\0\12\6"+
    "\21\0\5\6\1\0\4\6\1\u01ac\1\u01ad\11\6\1\0"+
    "\4\6\4\0\3\6\11\0\4\6\1\u01ae\5\6\21\0"+
    "\5\6\1\0\4\6\1\0\1\6\1\u01ae\10\6\1\0"+
    "\4\6\4\0\3\6\11\0\7\6\1\u01af\2\6\21\0"+
    "\1\6\1\u01af\3\6\1\0\4\6\1\0\12\6\1\0"+
    "\4\6\27\0\1\u01b0\24\0\1\u01b0\34\0\3\6\11\0"+
    "\1\6\1\u01b1\10\6\21\0\5\6\1\u01b2\1\u01b1\3\6"+
    "\1\0\12\6\1\0\4\6\4\0\3\6\11\0\10\6"+
    "\1\u01b3\1\6\21\0\5\6\1\0\3\6\1\u01b3\1\0"+
    "\12\6\1\0\4\6\4\0\3\6\11\0\12\6\21\0"+
    "\5\6\1\0\1\6\1\u01b4\2\6\1\0\12\6\1\0"+
    "\4\6\4\0\3\6\11\0\10\6\1\u01b5\1\6\21\0"+
    "\5\6\1\0\3\6\1\u01b5\1\0\12\6\1\0\4\6"+
    "\4\0\3\6\11\0\12\6\21\0\5\6\1\0\2\6"+
    "\1\u01b6\1\6\1\0\12\6\1\0\4\6\4\0\3\6"+
    "\11\0\6\6\1\u01b7\3\6\21\0\3\6\1\u01b7\1\6"+
    "\1\0\4\6\1\0\12\6\1\0\4\6\104\0\1\u01b8"+
    "\4\0\3\6\11\0\12\6\21\0\5\6\1\0\4\6"+
    "\1\0\12\6\1\0\3\6\1\u01b9\4\0\3\6\11\0"+
    "\12\6\21\0\5\6\1\0\4\6\1\0\6\6\1\u01ba"+
    "\3\6\1\0\4\6\4\0\3\6\11\0\12\6\21\0"+
    "\5\6\1\0\4\6\1\0\6\6\1\u01bb\3\6\1\0"+
    "\4\6\74\0\1\u01bc\14\0\3\6\11\0\6\6\1\u01bd"+
    "\3\6\21\0\3\6\1\u01bd\1\6\1\0\4\6\1\0"+
    "\12\6\1\0\4\6\26\0\1\u01be\27\0\1\u01be\32\0"+
    "\3\6\11\0\11\6\1\u01bf\21\0\5\6\1\0\4\6"+
    "\1\0\3\6\1\u01bf\6\6\1\0\4\6\4\0\3\6"+
    "\11\0\10\6\1\u01c0\1\6\21\0\5\6\1\0\3\6"+
    "\1\u01c0\1\0\12\6\1\0\4\6\4\0\3\6\11\0"+
    "\11\6\1\u01c1\21\0\5\6\1\0\4\6\1\0\3\6"+
    "\1\u01c1\6\6\1\0\4\6\4\0\3\6\11\0\12\6"+
    "\21\0\5\6\1\0\4\6\1\0\7\6\1\u01c2\2\6"+
    "\1\0\4\6\4\0\3\6\11\0\11\6\1\u01c3\21\0"+
    "\5\6\1\0\4\6\1\0\3\6\1\u01c3\6\6\1\0"+
    "\4\6\75\0\1\u01c4\13\0\3\6\11\0\12\6\21\0"+
    "\5\6\1\0\4\6\1\0\7\6\1\u01c5\2\6\1\0"+
    "\4\6\4\0\3\6\11\0\12\6\21\0\2\6\1\u01c6"+
    "\2\6\1\0\4\6\1\0\12\6\1\0\4\6\4\0"+
    "\3\6\11\0\5\6\1\u01c7\4\6\21\0\5\6\1\0"+
    "\4\6\1\0\5\6\1\u01c7\4\6\1\0\4\6\25\0"+
    "\1\u01c8\45\0\1\u01c8\15\0\3\6\11\0\12\6\21\0"+
    "\4\6\1\u01c9\1\0\4\6\1\0\12\6\1\0\4\6"+
    "\57\0\1\u01ca\31\0\3\6\11\0\11\6\1\u01cb\21\0"+
    "\5\6\1\0\4\6\1\0\3\6\1\u01cb\6\6\1\0"+
    "\4\6\4\0\3\6\11\0\4\6\1\u01cc\5\6\21\0"+
    "\5\6\1\0\4\6\1\0\1\6\1\u01cc\10\6\1\0"+
    "\4\6\4\0\3\6\11\0\12\6\21\0\2\6\1\u01cd"+
    "\2\6\1\0\4\6\1\0\12\6\1\0\4\6\57\0"+
    "\1\u01ce\31\0\3\6\11\0\12\6\21\0\4\6\1\u01cf"+
    "\1\0\4\6\1\0\12\6\1\0\4\6\4\0\3\6"+
    "\11\0\12\6\21\0\4\6\1\u01d0\1\0\4\6\1\0"+
    "\12\6\1\0\4\6\4\0\3\6\11\0\12\6\21\0"+
    "\4\6\1\u01d1\1\0\4\6\1\0\12\6\1\0\4\6"+
    "\57\0\1\u01d2\31\0\3\6\11\0\7\6\1\u01d3\2\6"+
    "\21\0\1\6\1\u01d3\3\6\1\0\4\6\1\0\12\6"+
    "\1\0\4\6\27\0\1\u01d4\24\0\1\u01d4\34\0\3\6"+
    "\11\0\12\6\21\0\2\6\1\u01d5\2\6\1\0\4\6"+
    "\1\0\12\6\1\0\4\6\4\0\3\6\11\0\12\6"+
    "\21\0\4\6\1\u01d6\1\0\4\6\1\0\12\6\1\0"+
    "\4\6\30\0\1\u01d7\33\0\1\u01d7\24\0\3\6\11\0"+
    "\10\6\1\u01d8\1\6\21\0\5\6\1\0\3\6\1\u01d8"+
    "\1\0\12\6\1\0\4\6\4\0\3\6\11\0\12\6"+
    "\21\0\2\6\1\u01d9\2\6\1\0\4\6\1\0\12\6"+
    "\1\0\4\6\55\0\1\u01da\33\0\3\6\11\0\12\6"+
    "\21\0\2\6\1\u01db\2\6\1\0\4\6\1\0\12\6"+
    "\1\0\4\6\27\0\1\u01dc\24\0\1\u01dc\34\0\3\6"+
    "\11\0\7\6\1\u01dd\2\6\21\0\1\6\1\u01dd\3\6"+
    "\1\0\4\6\1\0\12\6\1\0\4\6\4\0\3\6"+
    "\11\0\12\6\21\0\5\6\1\0\1\6\1\u01de\2\6"+
    "\1\0\12\6\1\0\4\6\62\0\1\u01df\26\0\3\6"+
    "\11\0\12\6\21\0\5\6\1\0\4\6\1\u01e0\1\u01e1"+
    "\11\6\1\0\4\6\4\0\3\6\11\0\12\6\21\0"+
    "\5\6\1\0\4\6\1\0\12\6\1\0\2\6\1\u01e2"+
    "\1\6\103\0\1\u01e3\63\0\1\u01e4\26\0\3\6\11\0"+
    "\12\6\21\0\5\6\1\0\1\6\1\u01e5\2\6\1\0"+
    "\12\6\1\0\4\6\4\0\3\6\11\0\12\6\21\0"+
    "\5\6\1\0\4\6\1\u01e6\1\u01e7\11\6\1\0\4\6"+
    "\65\0\2\u01e6\47\0\1\u01e8\37\0\1\u01e8\17\0\3\6"+
    "\11\0\11\6\1\u01e9\21\0\5\6\1\0\4\6\1\0"+
    "\3\6\1\u01e9\6\6\1\0\4\6\53\0\1\u01ea\35\0"+
    "\3\6\11\0\12\6\21\0\1\u01eb\4\6\1\0\4\6"+
    "\1\0\12\6\1\0\4\6\31\0\1\u01ec\37\0\1\u01ec"+
    "\17\0\3\6\11\0\11\6\1\u01ed\21\0\5\6\1\0"+
    "\4\6\1\0\3\6\1\u01ed\6\6\1\0\4\6\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27255];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\3\1\2\11\1\1\1\11\10\1\4\11"+
    "\3\1\1\11\5\1\4\11\10\1\1\11\10\0\1\11"+
    "\1\1\1\0\6\1\1\0\5\1\1\0\2\1\10\11"+
    "\3\1\1\0\3\1\2\0\4\1\1\11\1\1\4\0"+
    "\1\1\1\0\3\1\1\0\3\1\1\0\5\1\1\0"+
    "\3\1\1\0\6\1\1\0\1\1\1\0\2\1\2\0"+
    "\3\1\7\0\1\1\2\0\3\1\1\11\1\1\1\0"+
    "\1\1\1\0\5\1\1\0\5\1\1\0\5\1\1\0"+
    "\1\1\1\11\2\1\3\0\4\1\2\0\1\1\1\11"+
    "\4\0\1\1\1\11\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\1\0\5\1\1\0\2\1\1\0\3\1\1\0"+
    "\1\1\1\11\4\1\1\0\1\1\3\0\4\1\6\0"+
    "\1\1\1\0\2\1\1\11\1\1\1\11\5\1\1\0"+
    "\2\1\1\11\3\1\1\0\4\1\1\0\6\1\1\0"+
    "\2\1\3\0\4\1\2\11\3\0\1\11\1\1\1\11"+
    "\1\1\1\0\5\1\1\0\3\1\1\0\7\1\1\0"+
    "\4\1\1\0\2\1\3\0\3\1\2\11\2\0\3\1"+
    "\1\0\3\1\1\0\4\1\1\0\4\1\1\0\4\1"+
    "\1\0\2\1\3\11\3\1\2\0\2\1\1\0\1\1"+
    "\1\0\3\1\1\0\4\1\1\0\4\1\1\0\2\1"+
    "\1\0\1\11\2\1\1\0\1\1\1\11\2\1\1\0"+
    "\4\1\1\11\5\1\1\0\2\1\1\11\1\1\1\11"+
    "\2\1\1\0\2\1\1\0\7\1\1\11\3\1\1\11"+
    "\2\1\1\0\7\1\1\0\3\1\1\0\1\1\1\0"+
    "\5\1\1\0\3\1\1\0\1\1\1\0\5\1\1\0"+
    "\3\1\1\0\1\1\1\0\3\1\1\0\3\1\1\11"+
    "\1\1\1\0\2\1\1\0\2\1\1\0\1\1\1\11"+
    "\2\1\2\0\2\1\2\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[493];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexicoFS(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 236) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  private final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.out.println("Linea: " + (yyline+1) + " Columna: " + (yycolumn+1) + " - Error Lexico en: " + yytext());
        //id,archivo,tipo,descripcion,acciones,linea,columna,aux
         Errores errores=new Errores("Lexico","Caracter no reconocido "+yytext(),yyline+1,yycolumn+1);
         proyecto1compi2_201213580.Proyecto1Compi2_201213580.errores_fs.add(errores);
          }
        case 86: break;
        case 2: 
          { return new Symbol(simbolofs.pto, yyline, yycolumn,yytext());
          }
        case 87: break;
        case 3: 
          { return new Symbol(simbolofs.valor_simbolo, yyline, yycolumn,yytext());
          }
        case 88: break;
        case 4: 
          { return new Symbol(simbolofs.valor_numero_completo, yyline, yycolumn,yytext());
          }
        case 89: break;
        case 5: 
          { return new Symbol(simbolofs.valor_id, yyline, yycolumn,yytext());
          }
        case 90: break;
        case 6: 
          { return new Symbol(simbolofs.div, yyline, yycolumn,yytext());
          }
        case 91: break;
        case 7: 
          { /* ignore white space. */
          }
        case 92: break;
        case 8: 
          { return new Symbol(simbolofs.por, yyline, yycolumn,yytext());
          }
        case 93: break;
        case 9: 
          { return new Symbol(simbolofs.dospuntos, yyline, yycolumn,yytext());
          }
        case 94: break;
        case 10: 
          { return new Symbol(simbolofs.parena, yyline, yycolumn,yytext());
          }
        case 95: break;
        case 11: 
          { return new Symbol(simbolofs.parenc, yyline, yycolumn,yytext());
          }
        case 96: break;
        case 12: 
          { return new Symbol(simbolofs.llavea, yyline, yycolumn,yytext());
          }
        case 97: break;
        case 13: 
          { return new Symbol(simbolofs.llavec, yyline, yycolumn,yytext());
          }
        case 98: break;
        case 14: 
          { return new Symbol(simbolofs.igual, yyline, yycolumn,yytext());
          }
        case 99: break;
        case 15: 
          { return new Symbol(simbolofs.mas, yyline, yycolumn,yytext());
          }
        case 100: break;
        case 16: 
          { return new Symbol(simbolofs.menos, yyline, yycolumn,yytext());
          }
        case 101: break;
        case 17: 
          { return new Symbol(simbolofs.pot, yyline, yycolumn,yytext());
          }
        case 102: break;
        case 18: 
          { return new Symbol(simbolofs.mayorq, yyline, yycolumn,yytext());
          }
        case 103: break;
        case 19: 
          { return new Symbol(simbolofs.menorq, yyline, yycolumn,yytext());
          }
        case 104: break;
        case 20: 
          { return new Symbol(simbolofs.not, yyline, yycolumn,yytext());
          }
        case 105: break;
        case 21: 
          { return new Symbol(simbolofs.coma, yyline, yycolumn,yytext());
          }
        case 106: break;
        case 22: 
          { return new Symbol(simbolofs.pyc, yyline, yycolumn,yytext());
          }
        case 107: break;
        case 23: 
          { return new Symbol(simbolofs.corchea, yyline, yycolumn,yytext());
          }
        case 108: break;
        case 24: 
          { return new Symbol(simbolofs.corchec, yyline, yycolumn,yytext());
          }
        case 109: break;
        case 25: 
          { return new Symbol(simbolofs.signoi, yyline, yycolumn,yytext());
          }
        case 110: break;
        case 26: 
          { return new Symbol(simbolofs.valor_cadena, yyline, yycolumn,yytext());
          }
        case 111: break;
        case 27: 
          { return new Symbol(simbolofs.si, yyline, yycolumn,yytext());
          }
        case 112: break;
        case 28: 
          { return new Symbol(simbolofs.igualigual, yyline, yycolumn,yytext());
          }
        case 113: break;
        case 29: 
          { return new Symbol(simbolofs.incremental, yyline, yycolumn,yytext());
          }
        case 114: break;
        case 30: 
          { return new Symbol(simbolofs.decremental, yyline, yycolumn,yytext());
          }
        case 115: break;
        case 31: 
          { return new Symbol(simbolofs.mayorigualq, yyline, yycolumn,yytext());
          }
        case 116: break;
        case 32: 
          { return new Symbol(simbolofs.menorigualq, yyline, yycolumn,yytext());
          }
        case 117: break;
        case 33: 
          { return new Symbol(simbolofs.diferente, yyline, yycolumn,yytext());
          }
        case 118: break;
        case 34: 
          { return new Symbol(simbolofs.and, yyline, yycolumn,yytext());
          }
        case 119: break;
        case 35: 
          { return new Symbol(simbolofs.or, yyline, yycolumn,yytext());
          }
        case 120: break;
        case 36: 
          { return new Symbol(simbolofs.valor_numero_decimal, yyline, yycolumn,yytext());
          }
        case 121: break;
        case 37: 
          { 
          }
        case 122: break;
        case 38: 
          { return new Symbol(simbolofs.map, yyline, yycolumn,yytext());
          }
        case 123: break;
        case 39: 
          { return new Symbol(simbolofs.var, yyline, yycolumn,yytext());
          }
        case 124: break;
        case 40: 
          { return new Symbol(simbolofs.sino, yyline, yycolumn,yytext());
          }
        case 125: break;
        case 41: 
          { return new Symbol(simbolofs.caso, yyline, yycolumn,yytext());
          }
        case 126: break;
        case 42: 
          { return new Symbol(simbolofs.valor_nulo, yyline, yycolumn,yytext());
          }
        case 127: break;
        case 43: 
          { return new Symbol(simbolofs.valor_path2, yyline, yycolumn,yytext());
          }
        case 128: break;
        case 44: 
          { return new Symbol(simbolofs.valor_falso, yyline, yycolumn,yytext());
          }
        case 129: break;
        case 45: 
          { return new Symbol(simbolofs.todos, yyline, yycolumn,yytext());
          }
        case 130: break;
        case 46: 
          { return new Symbol(simbolofs.maximo, yyline, yycolumn,yytext());
          }
        case 131: break;
        case 47: 
          { return new Symbol(simbolofs.minimo, yyline, yycolumn,yytext());
          }
        case 132: break;
        case 48: 
          { return new Symbol(simbolofs.alguno, yyline, yycolumn,yytext());
          }
        case 133: break;
        case 49: 
          { return new Symbol(simbolofs.alclic, yyline, yycolumn,yytext());
          }
        case 134: break;
        case 50: 
          { return new Symbol(simbolofs.reduce, yyline, yycolumn,yytext());
          }
        case 135: break;
        case 51: 
          { return new Symbol(simbolofs.buscar, yyline, yycolumn,yytext());
          }
        case 136: break;
        case 52: 
          { return new Symbol(simbolofs.valor_path3, yyline, yycolumn,yytext());
          }
        case 137: break;
        case 53: 
          { return new Symbol(simbolofs.filtrar, yyline, yycolumn,yytext());
          }
        case 138: break;
        case 54: 
          { return new Symbol(simbolofs.funcion, yyline, yycolumn,yytext());
          }
        case 139: break;
        case 55: 
          { return new Symbol(simbolofs.defecto, yyline, yycolumn,yytext());
          }
        case 140: break;
        case 56: 
          { return new Symbol(simbolofs.detener, yyline, yycolumn,yytext());
          }
        case 141: break;
        case 57: 
          { return new Symbol(simbolofs.valor_path4, yyline, yycolumn,yytext());
          }
        case 142: break;
        case 58: 
          { return new Symbol(simbolofs.valor_path, yyline, yycolumn,yytext());
          }
        case 143: break;
        case 59: 
          { return new Symbol(simbolofs.leergxml, yyline, yycolumn,yytext());
          }
        case 144: break;
        case 60: 
          { return new Symbol(simbolofs.alcargar, yyline, yycolumn,yytext());
          }
        case 145: break;
        case 61: 
          { return new Symbol(simbolofs.alcerrar, yyline, yycolumn,yytext());
          }
        case 146: break;
        case 62: 
          { return new Symbol(simbolofs.retornar, yyline, yycolumn,yytext());
          }
        case 147: break;
        case 63: 
          { return new Symbol(simbolofs.importar, yyline, yycolumn,yytext());
          }
        case 148: break;
        case 64: 
          { return new Symbol(simbolofs.imprimir, yyline, yycolumn,yytext());
          }
        case 149: break;
        case 65: 
          { return new Symbol(simbolofs.invertir, yyline, yycolumn,yytext());
          }
        case 150: break;
        case 66: 
          { return new Symbol(simbolofs.valor_verdadero, yyline, yycolumn,yytext());
          }
        case 151: break;
        case 67: 
          { return new Symbol(simbolofs.selecciona, yyline, yycolumn,yytext());
          }
        case 152: break;
        case 68: 
          { return new Symbol(simbolofs.ascendente, yyline, yycolumn,yytext());
          }
        case 153: break;
        case 69: 
          { return new Symbol(simbolofs.creartexto, yyline, yycolumn,yytext());
          }
        case 154: break;
        case 70: 
          { return new Symbol(simbolofs.crearvideo, yyline, yycolumn,yytext());
          }
        case 155: break;
        case 71: 
          { return new Symbol(simbolofs.crearboton, yyline, yycolumn,yytext());
          }
        case 156: break;
        case 72: 
          { return new Symbol(simbolofs.valor_path5, yyline, yycolumn,yytext());
          }
        case 157: break;
        case 73: 
          { return new Symbol(simbolofs.descendente, yyline, yycolumn,yytext());
          }
        case 158: break;
        case 74: 
          { return new Symbol(simbolofs.crearimagen, yyline, yycolumn,yytext());
          }
        case 159: break;
        case 75: 
          { return new Symbol(simbolofs.obtenerporid, yyline, yycolumn,yytext());
          }
        case 160: break;
        case 76: 
          { return new Symbol(simbolofs.crearventana, yyline, yycolumn,yytext());
          }
        case 161: break;
        case 77: 
          { return new Symbol(simbolofs.crearareatexto, yyline, yycolumn,yytext());
          }
        case 162: break;
        case 78: 
          { return new Symbol(simbolofs.crearcajatexto, yyline, yycolumn,yytext());
          }
        case 163: break;
        case 79: 
          { return new Symbol(simbolofs.crearcontenedor, yyline, yycolumn,yytext());
          }
        case 164: break;
        case 80: 
          { return new Symbol(simbolofs.obtenerpornombre, yyline, yycolumn,yytext());
          }
        case 165: break;
        case 81: 
          { return new Symbol(simbolofs.creardesplegable, yyline, yycolumn,yytext());
          }
        case 166: break;
        case 82: 
          { return new Symbol(simbolofs.crearreproductor, yyline, yycolumn,yytext());
          }
        case 167: break;
        case 83: 
          { return new Symbol(simbolofs.obtenerporetiqueta, yyline, yycolumn,yytext());
          }
        case 168: break;
        case 84: 
          { return new Symbol(simbolofs.crearcontrolnumerico, yyline, yycolumn,yytext());
          }
        case 169: break;
        case 85: 
          { return new Symbol(simbolofs.arraydesdearchivo, yyline, yycolumn,yytext());
          }
        case 170: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	return null;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
