/* The following code was generated by JFlex 1.6.0 */

package Analizadores.GramaticaFS;
import java.util.LinkedList;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>lexicoFS.jflex</tt>
 */
public class lexicoFS implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  private static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\71\1\7\1\11\1\12\1\10\22\0\1\71\1\33\1\14"+
    "\1\2\1\2\1\2\1\34\1\0\1\21\1\22\1\13\1\26\1\36"+
    "\1\27\1\1\1\6\12\3\1\15\1\37\1\32\1\25\1\31\1\67"+
    "\1\2\1\43\1\63\1\51\1\45\1\46\1\61\1\66\1\4\1\55"+
    "\1\70\1\4\1\62\1\56\1\52\1\60\1\65\1\4\1\44\1\50"+
    "\1\53\1\64\1\42\1\4\1\57\2\4\1\40\1\16\1\41\1\30"+
    "\1\5\1\0\1\43\1\63\1\51\1\45\1\46\1\17\1\66\1\4"+
    "\1\55\1\70\1\4\1\62\1\56\1\52\1\60\1\65\1\4\1\44"+
    "\1\20\1\53\1\64\1\42\1\4\1\57\2\4\1\23\1\35\1\24"+
    "\7\0\1\11\252\0\2\54\115\0\1\47\u1ea8\0\1\11\1\11\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\1\1\11\2\5\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\2\1"+
    "\1\25\1\26\1\27\1\30\4\5\1\1\3\5\1\1"+
    "\3\5\1\31\6\0\1\32\1\5\1\0\3\5\2\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\3\5\1\0\3\5\1\0\4\5\2\0\3\5\1\0"+
    "\2\5\1\44\2\45\4\0\1\5\1\0\3\5\1\0"+
    "\1\5\1\46\2\5\1\0\5\5\1\0\1\5\1\0"+
    "\1\5\1\0\3\5\2\0\3\5\1\47\1\0\2\5"+
    "\5\0\1\5\2\0\3\5\2\50\2\5\1\0\5\5"+
    "\1\0\1\5\1\0\2\51\1\5\1\52\1\5\3\0"+
    "\3\5\1\0\1\5\1\0\2\5\2\0\1\45\3\0"+
    "\2\53\1\0\1\5\1\0\4\5\1\0\5\5\1\0"+
    "\1\5\1\0\1\5\2\54\3\0\3\5\1\0\1\5"+
    "\1\0\2\5\2\0\1\55\1\0\1\5\1\0\4\5"+
    "\1\0\1\56\1\57\3\5\1\0\1\5\1\0\6\5"+
    "\3\0\3\5\2\60\2\61\2\62\1\0\2\63\2\64"+
    "\1\0\3\5\1\0\1\5\1\65\1\5\1\0\1\66"+
    "\7\5\3\0\3\5\1\67\1\0\3\5\1\0\1\70"+
    "\1\5\1\0\3\5\1\0\4\5\1\71\1\72\1\73"+
    "\1\71\1\72\1\73\1\0\1\5\1\74\1\5\1\0"+
    "\1\5\1\0\3\5\1\0\4\5\2\75\2\76\1\5"+
    "\1\0\3\5\1\0\3\5\1\77\1\100\2\101\3\5"+
    "\1\0\3\5\1\102\2\5\1\0\5\5\1\0\3\5"+
    "\1\103\1\5\1\0\1\104\3\5\1\0\1\5\1\105"+
    "\2\106\2\5\1\0\1\5\1\0\1\5\2\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[363];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\72\0\72\0\164\0\256\0\350\0\72"+
    "\0\72\0\u0122\0\72\0\u015c\0\u0196\0\72\0\72\0\72"+
    "\0\72\0\u01d0\0\u020a\0\u0244\0\72\0\u027e\0\u02b8\0\u02f2"+
    "\0\u032c\0\u0366\0\72\0\72\0\72\0\72\0\u03a0\0\u03da"+
    "\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa"+
    "\0\u05e4\0\u061e\0\72\0\u0658\0\u0692\0\u06cc\0\u0706\0\u0740"+
    "\0\u077a\0\72\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6"+
    "\0\u0910\0\72\0\72\0\72\0\72\0\72\0\72\0\72"+
    "\0\72\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6"+
    "\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76"+
    "\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0658\0\72\0\u0dd2"+
    "\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2"+
    "\0\u0fdc\0\u1016\0\u1050\0\256\0\u108a\0\u10c4\0\u10fe\0\u1138"+
    "\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308"+
    "\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464\0\u149e\0\u14d8"+
    "\0\u1512\0\256\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e"+
    "\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e"+
    "\0\72\0\256\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a"+
    "\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\256\0\72\0\u1af6"+
    "\0\256\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c"+
    "\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e22"+
    "\0\u1e5c\0\u1e96\0\u1ed0\0\256\0\72\0\u1f0a\0\u1f44\0\u1f7e"+
    "\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u20da\0\u2114\0\u214e"+
    "\0\u2188\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u22aa\0\256\0\72"+
    "\0\u22e4\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a"+
    "\0\u24b4\0\u24ee\0\u2528\0\u2562\0\u259c\0\72\0\u25d6\0\u2610"+
    "\0\u264a\0\u2684\0\u26be\0\u26f8\0\u2732\0\u276c\0\256\0\256"+
    "\0\u27a6\0\u27e0\0\u281a\0\u2854\0\u288e\0\u28c8\0\u2902\0\u293c"+
    "\0\u2976\0\u29b0\0\u29ea\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c"+
    "\0\u2b46\0\u2b80\0\72\0\256\0\72\0\256\0\256\0\72"+
    "\0\u2bba\0\72\0\256\0\72\0\256\0\u2bf4\0\u2c2e\0\u2c68"+
    "\0\u2ca2\0\u2cdc\0\u2d16\0\256\0\u2d50\0\u2d8a\0\256\0\u2dc4"+
    "\0\u2dfe\0\u2e38\0\u2e72\0\u2eac\0\u2ee6\0\u2f20\0\u2f5a\0\u2f94"+
    "\0\u2fce\0\u3008\0\u3042\0\u307c\0\72\0\u30b6\0\u30f0\0\u312a"+
    "\0\u3164\0\u319e\0\256\0\u31d8\0\u3212\0\u324c\0\u3286\0\u32c0"+
    "\0\u32fa\0\u3334\0\u336e\0\u33a8\0\u33e2\0\72\0\72\0\72"+
    "\0\256\0\256\0\256\0\u341c\0\u3456\0\256\0\u3490\0\u34ca"+
    "\0\u3504\0\u353e\0\u3578\0\u35b2\0\u35ec\0\u3626\0\u3660\0\u369a"+
    "\0\u36d4\0\u370e\0\72\0\256\0\256\0\72\0\u3748\0\u3782"+
    "\0\u37bc\0\u37f6\0\u3830\0\u386a\0\u38a4\0\u38de\0\u3918\0\256"+
    "\0\256\0\256\0\72\0\u3952\0\u398c\0\u39c6\0\u3a00\0\u3a3a"+
    "\0\u3a74\0\u3aae\0\256\0\u3ae8\0\u3b22\0\u3b5c\0\u3b96\0\u3bd0"+
    "\0\u3c0a\0\u3c44\0\u3c7e\0\u3cb8\0\u3cf2\0\u3d2c\0\u3d66\0\256"+
    "\0\u3da0\0\u3dda\0\256\0\u3e14\0\u3e4e\0\u3e88\0\u3ec2\0\u3efc"+
    "\0\256\0\256\0\72\0\u3f36\0\u3f70\0\u3faa\0\u3fe4\0\u401e"+
    "\0\u4058\0\72\0\256";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[363];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\6\1\7\2\10\1\0"+
    "\1\10\1\11\1\12\1\13\1\2\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\6\1\43\1\15\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\2\6\1\14\1\6"+
    "\1\52\3\6\1\53\1\6\1\10\73\0\1\54\1\0"+
    "\1\5\71\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\4\6\1\0\12\6\1\0\1\6\7\0\1\55\4\0"+
    "\1\56\56\0\4\57\1\60\1\57\1\61\5\57\1\62"+
    "\2\57\2\60\21\57\5\60\1\57\4\60\1\57\12\60"+
    "\1\57\1\60\1\57\3\0\3\6\11\0\2\6\21\0"+
    "\1\6\1\63\3\6\1\0\4\6\1\64\1\65\6\6"+
    "\1\66\2\6\1\0\1\6\4\0\3\6\11\0\2\6"+
    "\21\0\4\6\1\67\1\0\4\6\1\70\1\71\11\6"+
    "\1\0\1\6\26\0\1\72\72\0\1\73\72\0\1\74"+
    "\67\0\1\75\71\0\1\76\71\0\1\77\100\0\1\100"+
    "\72\0\1\101\37\0\3\6\11\0\2\6\21\0\1\6"+
    "\1\102\2\6\1\103\1\0\4\6\1\0\12\6\1\0"+
    "\1\6\4\0\3\6\11\0\1\6\1\104\21\0\5\6"+
    "\1\105\1\104\3\6\1\0\5\6\1\106\4\6\1\0"+
    "\1\6\4\0\3\6\11\0\2\6\21\0\4\6\1\107"+
    "\1\0\4\6\1\0\12\6\1\0\1\6\4\0\3\6"+
    "\11\0\2\6\21\0\4\6\1\110\1\0\4\6\1\0"+
    "\12\6\1\0\1\6\47\0\1\111\5\0\2\70\17\0"+
    "\3\6\11\0\2\6\21\0\1\6\1\112\1\113\2\6"+
    "\1\0\4\6\1\0\12\6\1\0\1\6\4\0\3\6"+
    "\11\0\2\6\21\0\5\6\1\0\4\6\1\0\7\6"+
    "\1\114\2\6\1\0\1\6\4\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\4\6\1\0\3\6\1\115\6\6"+
    "\1\0\1\6\53\0\1\116\3\0\1\117\16\0\3\6"+
    "\11\0\2\6\21\0\5\6\1\0\2\6\1\120\1\6"+
    "\1\0\1\6\1\121\10\6\1\0\1\6\4\0\3\6"+
    "\11\0\2\6\21\0\1\6\1\122\3\6\1\0\4\6"+
    "\1\123\1\124\11\6\1\0\1\6\4\0\3\6\11\0"+
    "\2\6\21\0\5\6\1\0\4\6\1\0\7\6\1\125"+
    "\2\6\1\0\1\6\4\0\1\126\66\0\7\55\1\127"+
    "\1\130\2\0\57\55\13\56\1\131\56\56\14\57\1\62"+
    "\71\57\1\62\1\132\55\57\1\133\2\57\2\134\6\57"+
    "\1\62\1\57\1\61\2\134\21\57\5\134\1\57\4\134"+
    "\1\57\12\134\1\57\1\134\1\57\3\0\3\6\11\0"+
    "\2\6\21\0\5\6\1\0\4\6\1\0\5\6\1\135"+
    "\4\6\1\0\1\6\63\0\1\136\12\0\3\6\11\0"+
    "\2\6\21\0\5\6\1\0\4\6\1\0\5\6\1\137"+
    "\4\6\1\0\1\6\4\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\2\6\1\140\1\6\1\0\12\6\1\0"+
    "\1\6\4\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\4\6\1\0\5\6\1\141\4\6\1\0\1\6\53\0"+
    "\1\142\22\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\2\6\1\143\1\6\1\0\12\6\1\0\1\6\4\0"+
    "\3\6\11\0\2\6\21\0\2\6\1\144\2\6\1\0"+
    "\4\6\1\0\12\6\1\0\1\6\4\0\3\6\11\0"+
    "\2\6\21\0\2\6\1\145\2\6\1\0\4\6\1\0"+
    "\12\6\1\0\1\6\4\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\1\6\1\146\2\6\1\0\12\6\1\0"+
    "\1\6\52\0\1\147\23\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\4\6\1\0\11\6\1\150\1\0\1\6"+
    "\4\0\3\6\11\0\2\6\21\0\3\6\1\151\1\6"+
    "\1\0\3\6\1\152\1\0\12\6\1\0\1\6\4\0"+
    "\3\6\11\0\1\153\1\154\21\0\5\6\1\155\1\154"+
    "\2\6\1\156\1\0\4\6\1\153\5\6\1\0\1\6"+
    "\63\0\1\157\12\0\3\6\11\0\1\6\1\160\21\0"+
    "\5\6\1\161\1\160\3\6\1\0\12\6\1\0\1\6"+
    "\4\0\3\6\11\0\2\6\21\0\4\6\1\162\1\0"+
    "\4\6\1\0\12\6\1\0\1\6\4\0\3\6\11\0"+
    "\2\6\21\0\5\6\1\0\4\6\1\0\5\6\1\163"+
    "\4\6\1\0\1\6\4\0\3\6\11\0\2\6\21\0"+
    "\3\6\1\164\1\6\1\0\4\6\1\0\12\6\1\0"+
    "\1\6\43\0\1\165\114\0\1\166\7\0\3\6\11\0"+
    "\2\6\21\0\1\167\4\6\1\0\4\6\1\0\12\6"+
    "\1\0\1\6\4\0\3\6\11\0\2\6\21\0\5\6"+
    "\1\0\4\6\1\0\10\6\1\170\1\6\1\0\1\6"+
    "\4\0\3\6\11\0\2\6\21\0\5\6\1\0\4\6"+
    "\1\0\2\6\1\171\5\6\1\172\1\6\1\0\1\6"+
    "\53\0\1\173\22\0\3\6\11\0\2\6\21\0\5\6"+
    "\1\0\2\6\1\174\1\6\1\0\12\6\1\0\1\6"+
    "\4\0\3\6\11\0\1\6\1\175\21\0\5\6\1\176"+
    "\1\175\3\6\1\0\12\6\1\0\1\6\10\0\1\127"+
    "\62\0\6\177\1\127\4\177\1\200\56\177\14\57\1\62"+
    "\1\57\1\201\67\57\1\62\2\57\1\202\53\57\1\133"+
    "\1\57\3\134\6\57\1\62\1\57\1\61\2\134\21\57"+
    "\5\134\1\57\4\134\1\57\12\134\1\57\1\134\1\57"+
    "\3\0\3\6\11\0\1\6\1\203\21\0\5\6\1\204"+
    "\1\203\3\6\1\0\12\6\1\0\1\6\54\0\1\205"+
    "\21\0\3\6\11\0\2\6\21\0\5\6\1\0\3\6"+
    "\1\206\1\0\12\6\1\0\1\6\4\0\3\6\11\0"+
    "\2\6\21\0\5\6\1\0\1\6\1\207\2\6\1\0"+
    "\12\6\1\0\1\6\4\0\3\6\11\0\2\6\21\0"+
    "\4\6\1\210\1\0\4\6\1\0\12\6\1\0\1\6"+
    "\61\0\1\211\14\0\3\6\11\0\2\6\21\0\5\6"+
    "\1\0\4\6\1\0\3\6\1\212\6\6\1\0\1\6"+
    "\4\0\3\6\11\0\2\6\21\0\3\6\1\213\1\6"+
    "\1\0\4\6\1\0\12\6\1\0\1\6\4\0\3\6"+
    "\11\0\2\6\21\0\4\6\1\214\1\0\4\6\1\0"+
    "\12\6\1\0\1\6\47\0\1\215\26\0\3\6\11\0"+
    "\2\6\21\0\5\6\1\0\4\6\1\0\7\6\1\216"+
    "\2\6\1\0\1\6\4\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\4\6\1\0\7\6\1\217\2\6\1\0"+
    "\1\6\4\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\4\6\1\0\3\6\1\220\6\6\1\0\1\6\4\0"+
    "\3\6\11\0\2\6\21\0\4\6\1\221\1\0\4\6"+
    "\1\0\12\6\1\0\1\6\4\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\1\6\1\222\2\6\1\0\12\6"+
    "\1\0\1\6\52\0\1\223\23\0\3\6\11\0\2\6"+
    "\21\0\4\6\1\224\1\0\4\6\1\0\12\6\1\0"+
    "\1\6\47\0\1\225\26\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\4\6\1\0\3\6\1\226\6\6\1\0"+
    "\1\6\61\0\1\227\14\0\3\6\11\0\2\6\21\0"+
    "\1\6\1\230\3\6\1\0\4\6\1\0\12\6\1\0"+
    "\1\6\4\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\4\6\1\0\3\6\1\231\6\6\1\0\1\6\4\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\4\6\1\0"+
    "\3\6\1\232\6\6\1\0\1\6\47\0\1\233\67\0"+
    "\1\234\13\0\1\235\14\0\3\6\11\0\2\6\21\0"+
    "\4\6\1\236\1\0\4\6\1\0\12\6\1\0\1\6"+
    "\4\0\3\6\11\0\2\6\21\0\2\6\1\237\2\6"+
    "\1\0\4\6\1\0\3\6\1\240\6\6\1\0\1\6"+
    "\4\0\3\6\11\0\2\6\21\0\5\6\1\0\4\6"+
    "\1\241\1\242\11\6\1\0\1\6\55\0\2\243\17\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\4\6\1\243"+
    "\1\244\11\6\1\0\1\6\4\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\1\6\1\245\2\6\1\0\12\6"+
    "\1\0\1\6\52\0\1\246\20\0\6\56\1\247\4\56"+
    "\1\131\64\56\1\250\4\56\1\131\56\56\1\57\1\251"+
    "\2\57\2\252\6\57\1\62\1\57\1\201\2\252\21\57"+
    "\5\252\1\57\4\252\1\57\12\252\1\57\1\252\15\57"+
    "\1\62\3\57\1\253\51\57\3\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\4\6\1\0\3\6\1\254\6\6"+
    "\1\0\1\6\61\0\1\255\55\0\1\256\30\0\3\6"+
    "\11\0\2\6\21\0\2\6\1\257\2\6\1\0\4\6"+
    "\1\0\12\6\1\0\1\6\4\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\4\6\1\260\1\261\11\6\1\0"+
    "\1\6\4\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\1\6\1\262\2\6\1\0\12\6\1\0\1\6\4\0"+
    "\3\6\11\0\2\6\21\0\1\6\1\263\3\6\1\0"+
    "\4\6\1\0\12\6\1\0\1\6\4\0\3\6\11\0"+
    "\2\6\21\0\5\6\1\0\2\6\1\264\1\6\1\0"+
    "\12\6\1\0\1\6\53\0\1\265\22\0\3\6\11\0"+
    "\2\6\21\0\5\6\1\0\2\6\1\266\1\6\1\0"+
    "\12\6\1\0\1\6\4\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\1\6\1\267\2\6\1\0\12\6\1\0"+
    "\1\6\4\0\3\6\11\0\2\6\21\0\2\6\1\270"+
    "\2\6\1\0\4\6\1\0\12\6\1\0\1\6\4\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\1\6\1\271"+
    "\2\6\1\0\12\6\1\0\1\6\4\0\3\6\11\0"+
    "\2\6\21\0\4\6\1\272\1\0\4\6\1\0\12\6"+
    "\1\0\1\6\47\0\1\273\26\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\2\6\1\274\1\6\1\0\12\6"+
    "\1\0\1\6\52\0\1\275\23\0\3\6\11\0\2\6"+
    "\21\0\2\6\1\276\2\6\1\0\4\6\1\0\12\6"+
    "\1\0\1\6\4\0\3\6\11\0\1\6\1\277\21\0"+
    "\5\6\1\300\1\277\3\6\1\0\12\6\1\0\1\6"+
    "\45\0\1\301\101\0\2\302\60\0\1\303\30\0\3\6"+
    "\11\0\2\6\21\0\2\6\1\304\2\6\1\0\4\6"+
    "\1\0\12\6\1\0\1\6\4\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\4\6\1\302\1\305\11\6\1\0"+
    "\1\6\4\0\3\6\11\0\2\6\21\0\2\6\1\306"+
    "\2\6\1\0\4\6\1\0\12\6\1\0\1\6\57\0"+
    "\1\307\16\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\4\6\1\0\1\6\1\310\10\6\1\0\1\6\57\0"+
    "\1\311\16\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\4\6\1\0\1\6\1\312\10\6\1\0\1\6\4\0"+
    "\3\6\11\0\2\6\21\0\1\6\1\313\3\6\1\0"+
    "\4\6\1\0\12\6\1\0\1\6\44\0\1\314\34\0"+
    "\1\177\63\0\14\57\1\62\2\57\1\315\53\57\1\251"+
    "\1\57\3\252\6\57\1\62\1\57\1\201\2\252\21\57"+
    "\5\252\1\57\4\252\1\57\12\252\1\57\1\252\15\57"+
    "\1\316\55\57\43\0\1\317\31\0\3\6\11\0\2\6"+
    "\21\0\1\6\1\320\3\6\1\0\4\6\1\0\12\6"+
    "\1\0\1\6\61\0\1\321\14\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\4\6\1\0\3\6\1\322\6\6"+
    "\1\0\1\6\4\0\3\6\11\0\2\6\21\0\5\6"+
    "\1\0\1\6\1\323\2\6\1\0\12\6\1\0\1\6"+
    "\4\0\3\6\11\0\2\6\21\0\3\6\1\324\1\6"+
    "\1\0\4\6\1\0\12\6\1\0\1\6\4\0\3\6"+
    "\11\0\2\6\21\0\3\6\1\325\1\6\1\0\4\6"+
    "\1\0\12\6\1\0\1\6\46\0\1\326\27\0\3\6"+
    "\11\0\2\6\21\0\5\6\1\0\4\6\1\0\3\6"+
    "\1\327\6\6\1\0\1\6\4\0\3\6\11\0\2\6"+
    "\21\0\4\6\1\330\1\0\4\6\1\0\12\6\1\0"+
    "\1\6\4\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\2\6\1\331\1\6\1\0\12\6\1\0\1\6\4\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\3\6\1\332"+
    "\1\0\12\6\1\0\1\6\4\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\2\6\1\333\1\6\1\0\12\6"+
    "\1\0\1\6\53\0\1\334\22\0\3\6\11\0\2\6"+
    "\21\0\4\6\1\335\1\0\4\6\1\0\12\6\1\0"+
    "\1\6\52\0\1\336\23\0\3\6\11\0\2\6\21\0"+
    "\1\337\1\340\1\6\1\341\1\6\1\0\1\6\1\342"+
    "\1\6\1\343\1\0\6\6\1\344\3\6\1\0\1\6"+
    "\54\0\1\345\74\0\1\346\66\0\1\347\21\0\3\6"+
    "\11\0\2\6\21\0\5\6\1\0\3\6\1\350\1\0"+
    "\12\6\1\0\1\6\4\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\4\6\1\0\1\6\1\351\10\6\1\0"+
    "\1\6\4\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\3\6\1\352\1\0\12\6\1\0\1\6\61\0\1\353"+
    "\14\0\3\6\11\0\2\6\21\0\5\6\1\0\4\6"+
    "\1\0\3\6\1\354\6\6\1\0\1\6\61\0\1\355"+
    "\14\0\3\6\11\0\2\6\21\0\5\6\1\0\4\6"+
    "\1\0\3\6\1\356\6\6\1\0\1\6\4\0\3\6"+
    "\11\0\2\6\21\0\2\6\1\357\2\6\1\0\4\6"+
    "\1\0\12\6\1\0\1\6\45\0\1\360\25\0\14\57"+
    "\1\62\3\57\1\361\51\57\44\0\1\362\30\0\3\6"+
    "\11\0\2\6\21\0\2\6\1\363\2\6\1\0\4\6"+
    "\1\0\12\6\1\0\1\6\53\0\1\364\22\0\3\6"+
    "\11\0\2\6\21\0\5\6\1\0\2\6\1\365\1\6"+
    "\1\0\12\6\1\0\1\6\4\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\4\6\1\366\1\367\11\6\1\0"+
    "\1\6\4\0\3\6\11\0\2\6\21\0\4\6\1\370"+
    "\1\0\4\6\1\0\12\6\1\0\1\6\4\0\3\6"+
    "\11\0\2\6\21\0\4\6\1\371\1\0\4\6\1\0"+
    "\12\6\1\0\1\6\47\0\1\372\26\0\3\6\11\0"+
    "\2\6\21\0\1\6\1\373\3\6\1\0\4\6\1\0"+
    "\12\6\1\0\1\6\4\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\4\6\1\0\3\6\1\374\6\6\1\0"+
    "\1\6\4\0\3\6\11\0\2\6\21\0\3\6\1\375"+
    "\1\6\1\0\4\6\1\0\12\6\1\0\1\6\46\0"+
    "\1\376\27\0\3\6\11\0\2\6\21\0\2\6\1\377"+
    "\2\6\1\0\4\6\1\0\12\6\1\0\1\6\55\0"+
    "\2\366\17\0\3\6\11\0\2\6\21\0\4\6\1\u0100"+
    "\1\0\4\6\1\0\12\6\1\0\1\6\4\0\3\6"+
    "\11\0\2\6\21\0\2\6\1\u0101\2\6\1\0\4\6"+
    "\1\0\12\6\1\0\1\6\4\0\3\6\11\0\2\6"+
    "\21\0\4\6\1\u0102\1\0\4\6\1\0\12\6\1\0"+
    "\1\6\4\0\3\6\11\0\2\6\21\0\1\6\1\u0103"+
    "\3\6\1\0\4\6\1\0\3\6\1\u0104\6\6\1\0"+
    "\1\6\4\0\3\6\11\0\2\6\21\0\4\6\1\u0105"+
    "\1\0\4\6\1\0\12\6\1\0\1\6\4\0\3\6"+
    "\11\0\2\6\21\0\5\6\1\0\4\6\1\0\3\6"+
    "\1\u0106\6\6\1\0\1\6\55\0\2\u0107\70\0\2\u0108"+
    "\57\0\1\u0109\31\0\3\6\11\0\2\6\21\0\5\6"+
    "\1\0\4\6\1\u0107\1\u010a\11\6\1\0\1\6\4\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\4\6\1\u0108"+
    "\1\u010b\11\6\1\0\1\6\4\0\3\6\11\0\2\6"+
    "\21\0\1\6\1\u010c\3\6\1\0\4\6\1\0\12\6"+
    "\1\0\1\6\1\0\14\57\1\u010d\55\57\60\0\1\u010e"+
    "\14\0\3\6\11\0\2\6\21\0\5\6\1\0\4\6"+
    "\1\0\3\6\1\u010f\6\6\1\0\1\6\4\0\3\6"+
    "\11\0\2\6\21\0\2\6\1\u0110\2\6\1\0\4\6"+
    "\1\0\12\6\1\0\1\6\4\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\2\6\1\u0111\1\6\1\0\12\6"+
    "\1\0\1\6\53\0\1\u0112\22\0\3\6\11\0\2\6"+
    "\21\0\2\6\1\u0113\2\6\1\0\4\6\1\0\12\6"+
    "\1\0\1\6\4\0\3\6\11\0\2\6\21\0\4\6"+
    "\1\u0114\1\0\4\6\1\0\12\6\1\0\1\6\47\0"+
    "\1\u0115\26\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\2\6\1\u0116\1\6\1\0\12\6\1\0\1\6\4\0"+
    "\3\6\11\0\2\6\21\0\4\6\1\u0117\1\0\4\6"+
    "\1\0\12\6\1\0\1\6\4\0\3\6\11\0\1\6"+
    "\1\u0118\21\0\5\6\1\u0119\1\u0118\3\6\1\0\12\6"+
    "\1\0\1\6\4\0\3\6\11\0\2\6\21\0\5\6"+
    "\1\0\4\6\1\0\12\6\1\0\1\u011a\4\0\3\6"+
    "\11\0\2\6\21\0\5\6\1\0\2\6\1\u011b\1\6"+
    "\1\0\12\6\1\0\1\6\4\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\4\6\1\0\2\6\1\u011c\7\6"+
    "\1\0\1\6\4\0\3\6\11\0\2\6\21\0\5\6"+
    "\1\0\3\6\1\u011d\1\0\12\6\1\0\1\6\45\0"+
    "\1\u011e\71\0\1\u011f\71\0\1\u0120\30\0\3\6\11\0"+
    "\2\6\21\0\2\6\1\u0121\2\6\1\0\4\6\1\0"+
    "\12\6\1\0\1\6\4\0\3\6\11\0\2\6\21\0"+
    "\2\6\1\u0122\2\6\1\0\4\6\1\0\12\6\1\0"+
    "\1\6\4\0\3\6\11\0\2\6\21\0\2\6\1\u0123"+
    "\2\6\1\0\4\6\1\0\12\6\1\0\1\6\53\0"+
    "\1\u0124\22\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\2\6\1\u0125\1\6\1\0\12\6\1\0\1\6\4\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\4\6\1\0"+
    "\3\6\1\u0126\6\6\1\0\1\6\4\0\3\6\11\0"+
    "\2\6\21\0\5\6\1\0\3\6\1\u0127\1\0\12\6"+
    "\1\0\1\6\54\0\1\u0128\21\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\2\6\1\u0129\1\6\1\0\12\6"+
    "\1\0\1\6\53\0\1\u012a\22\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\3\6\1\u012b\1\0\12\6\1\0"+
    "\1\6\4\0\3\6\11\0\2\6\21\0\1\6\1\u012c"+
    "\3\6\1\0\4\6\1\0\12\6\1\0\1\6\4\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\4\6\1\0"+
    "\10\6\1\u012d\1\6\1\0\1\6\66\0\1\u012e\7\0"+
    "\3\6\11\0\2\6\21\0\1\6\1\u012f\3\6\1\0"+
    "\4\6\1\0\12\6\1\0\1\6\4\0\3\6\11\0"+
    "\2\6\21\0\5\6\1\0\3\6\1\u0130\1\0\12\6"+
    "\1\0\1\6\4\0\3\6\11\0\2\6\21\0\5\6"+
    "\1\0\3\6\1\u0131\1\0\12\6\1\0\1\6\4\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\4\6\1\0"+
    "\3\6\1\u0132\6\6\1\0\1\6\44\0\1\u0133\31\0"+
    "\3\6\11\0\2\6\21\0\1\6\1\u0134\3\6\1\0"+
    "\4\6\1\0\12\6\1\0\1\6\4\0\3\6\11\0"+
    "\2\6\21\0\4\6\1\u0135\1\0\4\6\1\0\12\6"+
    "\1\0\1\6\47\0\1\u0136\26\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\3\6\1\u0137\1\0\12\6\1\0"+
    "\1\6\54\0\1\u0138\21\0\3\6\11\0\2\6\21\0"+
    "\1\6\1\u0139\3\6\1\0\4\6\1\0\12\6\1\0"+
    "\1\6\4\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\3\6\1\u013a\1\0\12\6\1\0\1\6\4\0\3\6"+
    "\11\0\2\6\21\0\5\6\1\0\4\6\1\0\5\6"+
    "\1\u013b\4\6\1\0\1\6\63\0\1\u013c\12\0\3\6"+
    "\11\0\2\6\21\0\5\6\1\0\3\6\1\u013d\1\0"+
    "\12\6\1\0\1\6\4\0\3\6\11\0\2\6\21\0"+
    "\2\6\1\u013e\1\6\1\u013f\1\0\4\6\1\0\12\6"+
    "\1\0\1\6\4\0\3\6\11\0\2\6\21\0\5\6"+
    "\1\0\4\6\1\0\3\6\1\u0140\6\6\1\0\1\6"+
    "\4\0\3\6\11\0\2\6\21\0\5\6\1\0\2\6"+
    "\1\u0141\1\6\1\0\12\6\1\0\1\6\4\0\3\6"+
    "\11\0\2\6\21\0\4\6\1\u0142\1\0\4\6\1\0"+
    "\12\6\1\0\1\6\47\0\1\u0143\26\0\3\6\11\0"+
    "\2\6\21\0\5\6\1\0\2\6\1\u0144\1\6\1\0"+
    "\12\6\1\0\1\6\4\0\3\6\11\0\2\6\21\0"+
    "\4\6\1\u0145\1\0\4\6\1\0\12\6\1\0\1\6"+
    "\4\0\3\6\11\0\2\6\21\0\4\6\1\u0146\1\0"+
    "\4\6\1\0\12\6\1\0\1\6\47\0\1\u0147\26\0"+
    "\3\6\11\0\2\6\21\0\4\6\1\u0148\1\0\4\6"+
    "\1\0\12\6\1\0\1\6\4\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\4\6\1\0\3\6\1\u0149\6\6"+
    "\1\0\1\6\4\0\3\6\11\0\2\6\21\0\5\6"+
    "\1\0\2\6\1\u014a\1\6\1\0\12\6\1\0\1\6"+
    "\4\0\3\6\11\0\2\6\21\0\1\6\1\u014b\3\6"+
    "\1\0\4\6\1\0\12\6\1\0\1\6\4\0\3\6"+
    "\11\0\2\6\21\0\5\6\1\0\4\6\1\0\2\6"+
    "\1\u014c\7\6\1\0\1\6\4\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\4\6\1\0\11\6\1\u014d\1\0"+
    "\1\6\67\0\1\u014e\6\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\4\6\1\0\2\6\1\u014f\7\6\1\0"+
    "\1\6\4\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\4\6\1\0\5\6\1\u0150\4\6\1\0\1\6\4\0"+
    "\3\6\11\0\2\6\21\0\4\6\1\u0151\1\0\4\6"+
    "\1\0\12\6\1\0\1\6\4\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\3\6\1\u0152\1\0\12\6\1\0"+
    "\1\6\4\0\3\6\11\0\2\6\21\0\1\6\1\u0153"+
    "\3\6\1\0\4\6\1\0\12\6\1\0\1\6\44\0"+
    "\1\u0154\31\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\3\6\1\u0155\1\0\12\6\1\0\1\6\4\0\3\6"+
    "\11\0\2\6\21\0\5\6\1\0\2\6\1\u0156\1\6"+
    "\1\0\12\6\1\0\1\6\4\0\3\6\11\0\2\6"+
    "\21\0\3\6\1\u0157\1\6\1\0\4\6\1\0\12\6"+
    "\1\0\1\6\4\0\3\6\11\0\2\6\21\0\5\6"+
    "\1\0\4\6\1\0\3\6\1\u0158\6\6\1\0\1\6"+
    "\4\0\3\6\11\0\2\6\21\0\5\6\1\0\4\6"+
    "\1\0\6\6\1\u0159\3\6\1\0\1\6\64\0\1\u015a"+
    "\11\0\3\6\11\0\2\6\21\0\5\6\1\0\4\6"+
    "\1\0\3\6\1\u015b\6\6\1\0\1\6\4\0\3\6"+
    "\11\0\2\6\21\0\5\6\1\0\4\6\1\0\7\6"+
    "\1\u015c\2\6\1\0\1\6\4\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\4\6\1\0\3\6\1\u015d\6\6"+
    "\1\0\1\6\4\0\3\6\11\0\2\6\21\0\5\6"+
    "\1\0\4\6\1\0\5\6\1\u015e\4\6\1\0\1\6"+
    "\63\0\1\u015f\12\0\3\6\11\0\2\6\21\0\5\6"+
    "\1\0\4\6\1\0\1\6\1\u0160\10\6\1\0\1\6"+
    "\4\0\3\6\11\0\2\6\21\0\2\6\1\u0161\2\6"+
    "\1\0\4\6\1\0\12\6\1\0\1\6\4\0\3\6"+
    "\11\0\2\6\21\0\4\6\1\u0162\1\0\4\6\1\0"+
    "\12\6\1\0\1\6\47\0\1\u0163\26\0\3\6\11\0"+
    "\2\6\21\0\4\6\1\u0164\1\0\4\6\1\0\12\6"+
    "\1\0\1\6\4\0\3\6\11\0\2\6\21\0\2\6"+
    "\1\u0165\2\6\1\0\4\6\1\0\12\6\1\0\1\6"+
    "\4\0\3\6\11\0\2\6\21\0\5\6\1\0\4\6"+
    "\1\u0166\1\u0167\11\6\1\0\1\6\52\0\1\u0168\23\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\1\6\1\u0169"+
    "\2\6\1\0\12\6\1\0\1\6\61\0\1\u016a\14\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\4\6\1\0"+
    "\3\6\1\u016b\6\6\1\0\1\6\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16530];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\3\1\2\11\1\1\1\11\2\1\4\11"+
    "\3\1\1\11\5\1\4\11\14\1\1\11\6\0\1\11"+
    "\1\1\1\0\5\1\10\11\3\1\1\0\3\1\1\0"+
    "\4\1\2\0\3\1\1\0\3\1\1\11\1\1\4\0"+
    "\1\1\1\0\3\1\1\0\4\1\1\0\5\1\1\0"+
    "\1\1\1\0\1\1\1\0\3\1\2\0\4\1\1\0"+
    "\2\1\5\0\1\1\2\0\3\1\1\11\3\1\1\0"+
    "\5\1\1\0\1\1\1\0\1\1\1\11\3\1\3\0"+
    "\3\1\1\0\1\1\1\0\2\1\2\0\1\1\3\0"+
    "\1\1\1\11\1\0\1\1\1\0\4\1\1\0\5\1"+
    "\1\0\1\1\1\0\2\1\1\11\3\0\3\1\1\0"+
    "\1\1\1\0\2\1\2\0\1\11\1\0\1\1\1\0"+
    "\4\1\1\0\5\1\1\0\1\1\1\0\6\1\3\0"+
    "\3\1\1\11\1\1\1\11\2\1\1\11\1\0\1\11"+
    "\1\1\1\11\1\1\1\0\3\1\1\0\3\1\1\0"+
    "\10\1\3\0\3\1\1\11\1\0\3\1\1\0\2\1"+
    "\1\0\3\1\1\0\4\1\3\11\3\1\1\0\3\1"+
    "\1\0\1\1\1\0\3\1\1\0\4\1\1\11\2\1"+
    "\1\11\1\1\1\0\3\1\1\0\6\1\1\11\3\1"+
    "\1\0\6\1\1\0\5\1\1\0\5\1\1\0\4\1"+
    "\1\0\3\1\1\11\2\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[363];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexicoFS(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 232) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  private final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.out.println("Linea: " + (yyline+1) + " Columna: " + (yycolumn+1) + " - Error Lexico en: " + yytext());
          }
        case 72: break;
        case 2: 
          { return new Symbol(simbolofs.pto, yyline, yycolumn,yytext());
          }
        case 73: break;
        case 3: 
          { return new Symbol(simbolofs.valor_simbolo, yyline, yycolumn,yytext());
          }
        case 74: break;
        case 4: 
          { return new Symbol(simbolofs.valor_numero_completo, yyline, yycolumn,yytext());
          }
        case 75: break;
        case 5: 
          { return new Symbol(simbolofs.valor_id, yyline, yycolumn,yytext());
          }
        case 76: break;
        case 6: 
          { return new Symbol(simbolofs.div, yyline, yycolumn,yytext());
          }
        case 77: break;
        case 7: 
          { /* ignore white space. */
          }
        case 78: break;
        case 8: 
          { return new Symbol(simbolofs.por, yyline, yycolumn,yytext());
          }
        case 79: break;
        case 9: 
          { return new Symbol(simbolofs.dospuntos, yyline, yycolumn,yytext());
          }
        case 80: break;
        case 10: 
          { return new Symbol(simbolofs.parena, yyline, yycolumn,yytext());
          }
        case 81: break;
        case 11: 
          { return new Symbol(simbolofs.parenc, yyline, yycolumn,yytext());
          }
        case 82: break;
        case 12: 
          { return new Symbol(simbolofs.llavea, yyline, yycolumn,yytext());
          }
        case 83: break;
        case 13: 
          { return new Symbol(simbolofs.llavec, yyline, yycolumn,yytext());
          }
        case 84: break;
        case 14: 
          { return new Symbol(simbolofs.igual, yyline, yycolumn,yytext());
          }
        case 85: break;
        case 15: 
          { return new Symbol(simbolofs.mas, yyline, yycolumn,yytext());
          }
        case 86: break;
        case 16: 
          { return new Symbol(simbolofs.menos, yyline, yycolumn,yytext());
          }
        case 87: break;
        case 17: 
          { return new Symbol(simbolofs.pot, yyline, yycolumn,yytext());
          }
        case 88: break;
        case 18: 
          { return new Symbol(simbolofs.mayorq, yyline, yycolumn,yytext());
          }
        case 89: break;
        case 19: 
          { return new Symbol(simbolofs.menorq, yyline, yycolumn,yytext());
          }
        case 90: break;
        case 20: 
          { return new Symbol(simbolofs.not, yyline, yycolumn,yytext());
          }
        case 91: break;
        case 21: 
          { return new Symbol(simbolofs.coma, yyline, yycolumn,yytext());
          }
        case 92: break;
        case 22: 
          { return new Symbol(simbolofs.pyc, yyline, yycolumn,yytext());
          }
        case 93: break;
        case 23: 
          { return new Symbol(simbolofs.corchea, yyline, yycolumn,yytext());
          }
        case 94: break;
        case 24: 
          { return new Symbol(simbolofs.corchec, yyline, yycolumn,yytext());
          }
        case 95: break;
        case 25: 
          { return new Symbol(simbolofs.signoi, yyline, yycolumn,yytext());
          }
        case 96: break;
        case 26: 
          { return new Symbol(simbolofs.valor_cadena, yyline, yycolumn,yytext());
          }
        case 97: break;
        case 27: 
          { return new Symbol(simbolofs.si, yyline, yycolumn,yytext());
          }
        case 98: break;
        case 28: 
          { return new Symbol(simbolofs.igualigual, yyline, yycolumn,yytext());
          }
        case 99: break;
        case 29: 
          { return new Symbol(simbolofs.incremental, yyline, yycolumn,yytext());
          }
        case 100: break;
        case 30: 
          { return new Symbol(simbolofs.decremental, yyline, yycolumn,yytext());
          }
        case 101: break;
        case 31: 
          { return new Symbol(simbolofs.mayorigualq, yyline, yycolumn,yytext());
          }
        case 102: break;
        case 32: 
          { return new Symbol(simbolofs.menorigualq, yyline, yycolumn,yytext());
          }
        case 103: break;
        case 33: 
          { return new Symbol(simbolofs.diferente, yyline, yycolumn,yytext());
          }
        case 104: break;
        case 34: 
          { return new Symbol(simbolofs.and, yyline, yycolumn,yytext());
          }
        case 105: break;
        case 35: 
          { return new Symbol(simbolofs.or, yyline, yycolumn,yytext());
          }
        case 106: break;
        case 36: 
          { return new Symbol(simbolofs.valor_numero_decimal, yyline, yycolumn,yytext());
          }
        case 107: break;
        case 37: 
          { 
          }
        case 108: break;
        case 38: 
          { return new Symbol(simbolofs.var, yyline, yycolumn,yytext());
          }
        case 109: break;
        case 39: 
          { return new Symbol(simbolofs.map, yyline, yycolumn,yytext());
          }
        case 110: break;
        case 40: 
          { return new Symbol(simbolofs.sino, yyline, yycolumn,yytext());
          }
        case 111: break;
        case 41: 
          { return new Symbol(simbolofs.caso, yyline, yycolumn,yytext());
          }
        case 112: break;
        case 42: 
          { return new Symbol(simbolofs.valor_nulo, yyline, yycolumn,yytext());
          }
        case 113: break;
        case 43: 
          { return new Symbol(simbolofs.valor_falso, yyline, yycolumn,yytext());
          }
        case 114: break;
        case 44: 
          { return new Symbol(simbolofs.todos, yyline, yycolumn,yytext());
          }
        case 115: break;
        case 45: 
          { return new Symbol(simbolofs.valor_path2, yyline, yycolumn,yytext());
          }
        case 116: break;
        case 46: 
          { return new Symbol(simbolofs.alguno, yyline, yycolumn,yytext());
          }
        case 117: break;
        case 47: 
          { return new Symbol(simbolofs.reduce, yyline, yycolumn,yytext());
          }
        case 118: break;
        case 48: 
          { return new Symbol(simbolofs.maximo, yyline, yycolumn,yytext());
          }
        case 119: break;
        case 49: 
          { return new Symbol(simbolofs.minimo, yyline, yycolumn,yytext());
          }
        case 120: break;
        case 50: 
          { return new Symbol(simbolofs.buscar, yyline, yycolumn,yytext());
          }
        case 121: break;
        case 51: 
          { return new Symbol(simbolofs.filtrar, yyline, yycolumn,yytext());
          }
        case 122: break;
        case 52: 
          { return new Symbol(simbolofs.funcion, yyline, yycolumn,yytext());
          }
        case 123: break;
        case 53: 
          { return new Symbol(simbolofs.defecto, yyline, yycolumn,yytext());
          }
        case 124: break;
        case 54: 
          { return new Symbol(simbolofs.detener, yyline, yycolumn,yytext());
          }
        case 125: break;
        case 55: 
          { return new Symbol(simbolofs.valor_path, yyline, yycolumn,yytext());
          }
        case 126: break;
        case 56: 
          { return new Symbol(simbolofs.retornar, yyline, yycolumn,yytext());
          }
        case 127: break;
        case 57: 
          { return new Symbol(simbolofs.invertir, yyline, yycolumn,yytext());
          }
        case 128: break;
        case 58: 
          { return new Symbol(simbolofs.imprimir, yyline, yycolumn,yytext());
          }
        case 129: break;
        case 59: 
          { return new Symbol(simbolofs.importar, yyline, yycolumn,yytext());
          }
        case 130: break;
        case 60: 
          { return new Symbol(simbolofs.valor_verdadero, yyline, yycolumn,yytext());
          }
        case 131: break;
        case 61: 
          { return new Symbol(simbolofs.selecciona, yyline, yycolumn,yytext());
          }
        case 132: break;
        case 62: 
          { return new Symbol(simbolofs.ascendente, yyline, yycolumn,yytext());
          }
        case 133: break;
        case 63: 
          { return new Symbol(simbolofs.creartexto, yyline, yycolumn,yytext());
          }
        case 134: break;
        case 64: 
          { return new Symbol(simbolofs.crearboton, yyline, yycolumn,yytext());
          }
        case 135: break;
        case 65: 
          { return new Symbol(simbolofs.descendente, yyline, yycolumn,yytext());
          }
        case 136: break;
        case 66: 
          { return new Symbol(simbolofs.crearventana, yyline, yycolumn,yytext());
          }
        case 137: break;
        case 67: 
          { return new Symbol(simbolofs.crearareatexto, yyline, yycolumn,yytext());
          }
        case 138: break;
        case 68: 
          { return new Symbol(simbolofs.crearcajatexto, yyline, yycolumn,yytext());
          }
        case 139: break;
        case 69: 
          { return new Symbol(simbolofs.crearcontenedor, yyline, yycolumn,yytext());
          }
        case 140: break;
        case 70: 
          { return new Symbol(simbolofs.creardesplegable, yyline, yycolumn,yytext());
          }
        case 141: break;
        case 71: 
          { return new Symbol(simbolofs.crearcontrolnumerico, yyline, yycolumn,yytext());
          }
        case 142: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	return null;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
