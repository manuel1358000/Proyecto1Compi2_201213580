/* The following code was generated by JFlex 1.6.0 */

package Analizadores.GramaticaFS;
import java.util.LinkedList;
import java_cup.runtime.*;
import Auxiliares.Errores;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>lexicoFS.jflex</tt>
 */
public class lexicoFS implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  private static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\73\1\7\1\11\1\12\1\10\22\0\1\73\1\33\1\14"+
    "\1\2\1\2\1\2\1\34\1\0\1\21\1\22\1\13\1\26\1\36"+
    "\1\27\1\1\1\6\12\3\1\15\1\37\1\32\1\25\1\31\1\67"+
    "\1\2\1\43\1\63\1\51\1\45\1\46\1\61\1\66\1\72\1\55"+
    "\1\70\1\4\1\62\1\56\1\52\1\60\1\65\1\4\1\44\1\50"+
    "\1\53\1\64\1\42\1\4\1\57\1\71\1\4\1\40\1\16\1\41"+
    "\1\30\1\5\1\0\1\43\1\63\1\51\1\45\1\46\1\17\1\66"+
    "\1\72\1\55\1\70\1\4\1\62\1\56\1\52\1\60\1\65\1\4"+
    "\1\44\1\20\1\53\1\64\1\42\1\4\1\57\1\71\1\4\1\23"+
    "\1\35\1\24\7\0\1\11\252\0\2\54\115\0\1\47\u1ea8\0\1\11"+
    "\1\11\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\1\1\11\2\5\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\2\1"+
    "\1\25\1\26\1\27\1\30\4\5\1\1\3\5\1\1"+
    "\3\5\1\31\10\0\1\32\1\5\1\0\3\5\2\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\3\5\1\0\3\5\1\0\4\5\2\0\3\5\1\0"+
    "\2\5\1\44\2\45\3\0\1\5\1\0\3\5\1\0"+
    "\1\5\1\46\2\5\1\0\6\5\1\0\1\5\1\0"+
    "\1\5\1\0\3\5\2\0\3\5\1\47\1\0\2\5"+
    "\5\0\1\5\2\0\3\5\2\50\2\5\1\0\10\5"+
    "\1\0\1\5\1\0\2\51\1\5\1\52\1\5\3\0"+
    "\3\5\1\0\1\5\1\0\2\5\2\0\1\45\1\53"+
    "\2\0\2\54\1\0\1\5\1\0\4\5\1\0\2\5"+
    "\1\0\6\5\1\0\1\5\1\0\1\5\2\55\3\0"+
    "\3\5\1\0\1\5\1\0\2\5\3\0\1\5\1\0"+
    "\4\5\1\0\2\5\2\56\1\57\1\60\3\5\1\0"+
    "\1\5\1\0\5\5\1\0\2\5\3\0\3\5\2\61"+
    "\2\62\2\63\1\0\2\64\2\65\1\0\3\5\1\0"+
    "\3\5\1\66\1\5\1\0\1\67\6\5\1\0\2\5"+
    "\3\0\3\5\1\70\1\0\3\5\1\0\1\71\1\72"+
    "\1\73\1\5\1\0\4\5\1\0\3\5\1\0\2\5"+
    "\1\74\1\75\1\76\1\74\1\75\1\76\1\0\1\5"+
    "\1\77\1\5\1\0\1\5\1\0\4\5\1\0\3\5"+
    "\1\0\2\5\2\100\2\101\1\5\1\0\4\5\1\0"+
    "\3\5\1\102\1\0\1\5\1\103\2\104\4\5\1\0"+
    "\3\5\2\105\1\106\3\5\1\0\4\5\1\0\2\5"+
    "\1\0\4\5\1\0\1\107\1\5\1\0\1\110\3\5"+
    "\1\0\1\5\1\0\1\5\1\111\1\5\1\0\2\112"+
    "\2\5\1\0\2\5\2\0\2\5\2\0\1\5\1\0"+
    "\1\5\2\113\1\0\1\5\2\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[416];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\74\0\74\0\170\0\264\0\360\0\74"+
    "\0\74\0\u012c\0\74\0\u0168\0\u01a4\0\74\0\74\0\74"+
    "\0\74\0\u01e0\0\u021c\0\u0258\0\74\0\u0294\0\u02d0\0\u030c"+
    "\0\u0348\0\u0384\0\74\0\74\0\74\0\74\0\u03c0\0\u03fc"+
    "\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc"+
    "\0\u0618\0\u0654\0\74\0\u0690\0\u06cc\0\u0708\0\u0744\0\u0780"+
    "\0\u07bc\0\u07f8\0\u0834\0\74\0\u0870\0\u08ac\0\u08e8\0\u0924"+
    "\0\u0960\0\u099c\0\u09d8\0\74\0\74\0\74\0\74\0\74"+
    "\0\74\0\74\0\74\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04"+
    "\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4"+
    "\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0690"+
    "\0\74\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c"+
    "\0\u1068\0\u10a4\0\u10e0\0\u111c\0\264\0\u1158\0\u1194\0\u11d0"+
    "\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0"+
    "\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590"+
    "\0\u15cc\0\u1608\0\u1644\0\264\0\u1680\0\u16bc\0\u16f8\0\u1734"+
    "\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914"+
    "\0\u1950\0\u198c\0\74\0\264\0\u19c8\0\u1a04\0\u1a40\0\u1a7c"+
    "\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c"+
    "\0\u1c98\0\u1cd4\0\264\0\74\0\u1d10\0\264\0\u1d4c\0\u1d88"+
    "\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68"+
    "\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2058\0\74\0\u2094\0\u20d0"+
    "\0\264\0\74\0\u210c\0\u2148\0\u2184\0\u21c0\0\u21fc\0\u2238"+
    "\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u2364\0\u23a0\0\u23dc\0\u2418"+
    "\0\u2454\0\u2490\0\u24cc\0\u2508\0\u2544\0\u2580\0\u25bc\0\264"+
    "\0\74\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760"+
    "\0\u279c\0\u27d8\0\u2814\0\u2850\0\u288c\0\u28c8\0\u2904\0\u2940"+
    "\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4\0\u2b20"+
    "\0\74\0\264\0\264\0\264\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10"+
    "\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78\0\u2db4\0\u2df0"+
    "\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0"+
    "\0\74\0\264\0\74\0\264\0\264\0\74\0\u300c\0\74"+
    "\0\264\0\74\0\264\0\u3048\0\u3084\0\u30c0\0\u30fc\0\u3138"+
    "\0\u3174\0\u31b0\0\u31ec\0\264\0\u3228\0\u3264\0\264\0\u32a0"+
    "\0\u32dc\0\u3318\0\u3354\0\u3390\0\u33cc\0\u3408\0\u3444\0\u3480"+
    "\0\u34bc\0\u34f8\0\u3534\0\u3570\0\u35ac\0\u35e8\0\74\0\u3624"+
    "\0\u3660\0\u369c\0\u36d8\0\u3714\0\264\0\264\0\264\0\u3750"+
    "\0\u378c\0\u37c8\0\u3804\0\u3840\0\u387c\0\u38b8\0\u38f4\0\u3930"+
    "\0\u396c\0\u39a8\0\u39e4\0\u3a20\0\74\0\74\0\74\0\264"+
    "\0\264\0\264\0\u3a5c\0\u3a98\0\264\0\u3ad4\0\u3b10\0\u3b4c"+
    "\0\u3b88\0\u3bc4\0\u3c00\0\u3c3c\0\u3c78\0\u3cb4\0\u3cf0\0\u3d2c"+
    "\0\u3d68\0\u3da4\0\u3de0\0\u3e1c\0\74\0\264\0\264\0\74"+
    "\0\u3e58\0\u3e94\0\u3ed0\0\u3f0c\0\u3f48\0\u3f84\0\u3fc0\0\u3ffc"+
    "\0\u4038\0\u4074\0\264\0\u40b0\0\u40ec\0\264\0\264\0\74"+
    "\0\u4128\0\u4164\0\u41a0\0\u41dc\0\u4218\0\u4254\0\u4290\0\u42cc"+
    "\0\74\0\264\0\264\0\u4308\0\u4344\0\u4380\0\u43bc\0\u43f8"+
    "\0\u4434\0\u4470\0\u44ac\0\u44e8\0\u4524\0\u4560\0\u459c\0\u45d8"+
    "\0\u4614\0\u4650\0\u468c\0\u46c8\0\264\0\u4704\0\u4740\0\264"+
    "\0\u477c\0\u47b8\0\u47f4\0\u4830\0\u486c\0\u48a8\0\u48e4\0\264"+
    "\0\u4920\0\u495c\0\264\0\74\0\u4998\0\u49d4\0\u4a10\0\u4a4c"+
    "\0\u4a88\0\u4ac4\0\u4b00\0\u4b3c\0\u4b78\0\u4bb4\0\u4bf0\0\u4c2c"+
    "\0\u4c68\0\u4ca4\0\74\0\264\0\u4ce0\0\u4d1c\0\74\0\264";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[416];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\6\1\7\2\10\1\0"+
    "\1\10\1\11\1\12\1\13\1\2\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\6\1\43\1\15\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\2\6\1\14\1\6"+
    "\1\52\3\6\1\53\3\6\1\10\75\0\1\54\1\0"+
    "\1\5\73\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\4\6\1\0\12\6\1\0\3\6\7\0\1\55\4\0"+
    "\1\56\60\0\1\57\1\60\2\57\1\61\1\62\1\63"+
    "\5\57\1\64\1\57\1\63\2\61\21\57\5\61\1\57"+
    "\4\61\1\57\12\61\1\57\3\61\1\57\3\0\3\6"+
    "\11\0\2\6\21\0\1\6\1\65\3\6\1\0\4\6"+
    "\1\66\1\67\6\6\1\70\2\6\1\0\3\6\4\0"+
    "\3\6\11\0\2\6\21\0\4\6\1\71\1\0\4\6"+
    "\1\72\1\73\11\6\1\0\3\6\26\0\1\74\74\0"+
    "\1\75\74\0\1\76\71\0\1\77\73\0\1\100\73\0"+
    "\1\101\102\0\1\102\74\0\1\103\41\0\3\6\11\0"+
    "\2\6\21\0\1\6\1\104\2\6\1\105\1\0\4\6"+
    "\1\0\12\6\1\0\3\6\4\0\3\6\11\0\1\6"+
    "\1\106\21\0\5\6\1\107\1\106\3\6\1\0\5\6"+
    "\1\110\4\6\1\0\3\6\4\0\3\6\11\0\2\6"+
    "\21\0\4\6\1\111\1\0\4\6\1\0\12\6\1\0"+
    "\3\6\4\0\3\6\11\0\2\6\21\0\4\6\1\112"+
    "\1\0\4\6\1\0\12\6\1\0\3\6\47\0\1\113"+
    "\5\0\2\72\21\0\3\6\11\0\2\6\21\0\1\6"+
    "\1\114\1\115\2\6\1\0\4\6\1\0\12\6\1\0"+
    "\3\6\4\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\4\6\1\0\7\6\1\116\2\6\1\0\3\6\4\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\4\6\1\0"+
    "\3\6\1\117\6\6\1\0\3\6\53\0\1\120\3\0"+
    "\1\121\20\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\2\6\1\122\1\6\1\0\1\6\1\123\10\6\1\0"+
    "\3\6\4\0\3\6\11\0\2\6\21\0\1\6\1\124"+
    "\3\6\1\0\4\6\1\125\1\126\11\6\1\0\3\6"+
    "\4\0\3\6\11\0\2\6\21\0\5\6\1\0\4\6"+
    "\1\0\7\6\1\127\2\6\1\0\3\6\4\0\1\130"+
    "\70\0\7\55\1\131\1\132\2\0\61\55\13\56\1\133"+
    "\60\56\14\57\1\64\73\57\1\64\2\57\1\134\55\57"+
    "\1\60\1\57\3\62\6\57\1\64\1\135\1\63\2\62"+
    "\21\57\5\62\1\57\4\62\1\57\12\62\1\57\3\62"+
    "\2\57\1\60\1\57\3\62\6\57\1\64\1\57\1\63"+
    "\2\62\21\57\5\62\1\57\4\62\1\57\12\62\1\57"+
    "\3\62\2\57\1\60\2\57\2\62\6\57\1\64\1\57"+
    "\1\63\2\62\21\57\5\62\1\57\4\62\1\57\12\62"+
    "\1\57\3\62\1\57\3\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\4\6\1\0\5\6\1\136\4\6\1\0"+
    "\3\6\63\0\1\137\14\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\4\6\1\0\5\6\1\140\4\6\1\0"+
    "\3\6\4\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\2\6\1\141\1\6\1\0\12\6\1\0\3\6\4\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\4\6\1\0"+
    "\5\6\1\142\4\6\1\0\3\6\53\0\1\143\24\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\2\6\1\144"+
    "\1\6\1\0\12\6\1\0\3\6\4\0\3\6\11\0"+
    "\2\6\21\0\2\6\1\145\2\6\1\0\4\6\1\0"+
    "\12\6\1\0\3\6\4\0\3\6\11\0\2\6\21\0"+
    "\2\6\1\146\2\6\1\0\4\6\1\0\12\6\1\0"+
    "\3\6\4\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\1\6\1\147\2\6\1\0\12\6\1\0\3\6\52\0"+
    "\1\150\25\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\1\6\1\151\2\6\1\0\11\6\1\152\1\0\3\6"+
    "\4\0\3\6\11\0\2\6\21\0\3\6\1\153\1\6"+
    "\1\0\3\6\1\154\1\0\12\6\1\0\3\6\4\0"+
    "\3\6\11\0\1\155\1\156\21\0\5\6\1\157\1\156"+
    "\2\6\1\160\1\0\4\6\1\155\5\6\1\0\3\6"+
    "\63\0\1\161\14\0\3\6\11\0\1\6\1\162\21\0"+
    "\5\6\1\163\1\162\3\6\1\0\12\6\1\0\3\6"+
    "\4\0\3\6\11\0\2\6\21\0\4\6\1\164\1\0"+
    "\4\6\1\0\12\6\1\0\3\6\4\0\3\6\11\0"+
    "\2\6\21\0\5\6\1\0\4\6\1\0\5\6\1\165"+
    "\4\6\1\0\3\6\4\0\3\6\11\0\2\6\21\0"+
    "\3\6\1\166\1\6\1\0\4\6\1\0\12\6\1\0"+
    "\3\6\43\0\1\167\116\0\1\170\11\0\3\6\11\0"+
    "\2\6\21\0\1\171\4\6\1\0\4\6\1\0\12\6"+
    "\1\0\3\6\4\0\3\6\11\0\2\6\21\0\5\6"+
    "\1\0\4\6\1\0\10\6\1\172\1\6\1\0\3\6"+
    "\4\0\3\6\11\0\2\6\21\0\5\6\1\0\4\6"+
    "\1\0\2\6\1\173\5\6\1\174\1\6\1\0\3\6"+
    "\53\0\1\175\24\0\3\6\11\0\2\6\21\0\5\6"+
    "\1\0\2\6\1\176\1\6\1\0\12\6\1\0\3\6"+
    "\4\0\3\6\11\0\1\6\1\177\21\0\5\6\1\200"+
    "\1\177\3\6\1\0\12\6\1\0\3\6\10\0\1\131"+
    "\64\0\6\201\1\131\4\201\1\202\60\201\14\57\1\64"+
    "\3\57\1\203\67\57\1\64\1\57\1\204\55\57\3\0"+
    "\3\6\11\0\1\6\1\205\21\0\5\6\1\206\1\205"+
    "\3\6\1\0\12\6\1\0\3\6\54\0\1\207\23\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\3\6\1\210"+
    "\1\0\12\6\1\0\3\6\4\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\1\6\1\211\2\6\1\0\12\6"+
    "\1\0\3\6\4\0\3\6\11\0\2\6\21\0\4\6"+
    "\1\212\1\0\4\6\1\0\12\6\1\0\3\6\61\0"+
    "\1\213\16\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\4\6\1\0\3\6\1\214\6\6\1\0\3\6\4\0"+
    "\3\6\11\0\2\6\21\0\3\6\1\215\1\6\1\0"+
    "\4\6\1\0\12\6\1\0\3\6\4\0\3\6\11\0"+
    "\2\6\21\0\4\6\1\216\1\0\4\6\1\0\12\6"+
    "\1\0\3\6\47\0\1\217\30\0\3\6\11\0\2\6"+
    "\21\0\1\6\1\220\2\6\1\221\1\0\4\6\1\0"+
    "\5\6\1\222\4\6\1\0\3\6\4\0\3\6\11\0"+
    "\2\6\21\0\5\6\1\0\4\6\1\0\7\6\1\223"+
    "\2\6\1\0\3\6\4\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\4\6\1\0\7\6\1\224\2\6\1\0"+
    "\3\6\4\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\4\6\1\0\3\6\1\225\6\6\1\0\3\6\4\0"+
    "\3\6\11\0\2\6\21\0\4\6\1\226\1\0\4\6"+
    "\1\0\12\6\1\0\3\6\4\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\1\6\1\227\2\6\1\0\12\6"+
    "\1\0\3\6\52\0\1\230\25\0\3\6\11\0\2\6"+
    "\21\0\4\6\1\231\1\0\4\6\1\0\12\6\1\0"+
    "\3\6\47\0\1\232\30\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\4\6\1\0\3\6\1\233\6\6\1\0"+
    "\3\6\61\0\1\234\16\0\3\6\11\0\2\6\21\0"+
    "\1\6\1\235\3\6\1\0\4\6\1\0\12\6\1\0"+
    "\3\6\4\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\4\6\1\0\3\6\1\236\6\6\1\0\3\6\4\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\4\6\1\0"+
    "\3\6\1\237\6\6\1\0\3\6\47\0\1\240\71\0"+
    "\1\241\13\0\1\242\16\0\3\6\11\0\2\6\21\0"+
    "\4\6\1\243\1\0\4\6\1\0\12\6\1\0\3\6"+
    "\4\0\3\6\11\0\2\6\21\0\2\6\1\244\2\6"+
    "\1\0\4\6\1\0\3\6\1\245\6\6\1\0\3\6"+
    "\4\0\3\6\11\0\2\6\21\0\5\6\1\0\4\6"+
    "\1\246\1\247\11\6\1\0\3\6\55\0\2\250\21\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\4\6\1\250"+
    "\1\251\11\6\1\0\3\6\4\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\1\6\1\252\2\6\1\0\12\6"+
    "\1\0\3\6\52\0\1\253\22\0\6\56\1\254\4\56"+
    "\1\133\66\56\1\255\4\56\1\133\60\56\14\57\1\256"+
    "\60\57\1\257\2\57\2\260\6\57\1\64\1\57\1\204"+
    "\2\260\21\57\5\260\1\57\4\260\1\57\12\260\1\57"+
    "\3\260\1\57\3\0\3\6\11\0\2\6\21\0\5\6"+
    "\1\0\4\6\1\0\3\6\1\261\6\6\1\0\3\6"+
    "\61\0\1\262\57\0\1\263\32\0\3\6\11\0\2\6"+
    "\21\0\2\6\1\264\2\6\1\0\4\6\1\0\12\6"+
    "\1\0\3\6\4\0\3\6\11\0\2\6\21\0\5\6"+
    "\1\0\4\6\1\265\1\266\11\6\1\0\3\6\4\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\1\6\1\267"+
    "\2\6\1\0\12\6\1\0\3\6\4\0\3\6\11\0"+
    "\2\6\21\0\1\6\1\270\3\6\1\0\4\6\1\0"+
    "\12\6\1\0\3\6\4\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\2\6\1\271\1\6\1\0\12\6\1\0"+
    "\3\6\53\0\1\272\24\0\3\6\11\0\2\6\21\0"+
    "\2\6\1\273\2\6\1\0\4\6\1\0\12\6\1\0"+
    "\3\6\4\0\3\6\11\0\2\6\21\0\2\6\1\274"+
    "\2\6\1\0\4\6\1\0\12\6\1\0\3\6\4\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\4\6\1\275"+
    "\1\276\11\6\1\0\3\6\4\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\2\6\1\277\1\6\1\0\12\6"+
    "\1\0\3\6\4\0\3\6\11\0\2\6\21\0\5\6"+
    "\1\0\1\6\1\300\2\6\1\0\12\6\1\0\3\6"+
    "\4\0\3\6\11\0\2\6\21\0\2\6\1\301\2\6"+
    "\1\0\4\6\1\0\12\6\1\0\3\6\4\0\3\6"+
    "\11\0\2\6\21\0\5\6\1\0\1\6\1\302\2\6"+
    "\1\0\12\6\1\0\3\6\4\0\3\6\11\0\2\6"+
    "\21\0\4\6\1\303\1\0\4\6\1\0\12\6\1\0"+
    "\3\6\47\0\1\304\30\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\2\6\1\305\1\6\1\0\12\6\1\0"+
    "\3\6\52\0\1\306\25\0\3\6\11\0\2\6\21\0"+
    "\2\6\1\307\2\6\1\0\4\6\1\0\12\6\1\0"+
    "\3\6\4\0\3\6\11\0\1\6\1\310\21\0\5\6"+
    "\1\311\1\310\3\6\1\0\12\6\1\0\3\6\45\0"+
    "\1\312\103\0\2\313\62\0\1\314\32\0\3\6\11\0"+
    "\2\6\21\0\2\6\1\315\2\6\1\0\4\6\1\0"+
    "\12\6\1\0\3\6\4\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\4\6\1\313\1\316\11\6\1\0\3\6"+
    "\4\0\3\6\11\0\2\6\21\0\2\6\1\317\2\6"+
    "\1\0\4\6\1\0\12\6\1\0\3\6\57\0\1\320"+
    "\20\0\3\6\11\0\2\6\21\0\5\6\1\0\4\6"+
    "\1\0\1\6\1\321\10\6\1\0\3\6\57\0\1\322"+
    "\20\0\3\6\11\0\2\6\21\0\5\6\1\0\4\6"+
    "\1\0\1\6\1\323\10\6\1\0\3\6\4\0\3\6"+
    "\11\0\2\6\21\0\1\6\1\324\3\6\1\0\4\6"+
    "\1\0\12\6\1\0\3\6\44\0\1\325\36\0\1\201"+
    "\65\0\14\57\1\64\2\57\1\326\55\57\1\257\1\57"+
    "\3\260\6\57\1\64\1\57\1\204\2\260\21\57\5\260"+
    "\1\57\4\260\1\57\12\260\1\57\3\260\1\57\43\0"+
    "\1\327\33\0\3\6\11\0\2\6\21\0\1\6\1\330"+
    "\3\6\1\0\4\6\1\0\12\6\1\0\3\6\61\0"+
    "\1\331\16\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\4\6\1\0\3\6\1\332\6\6\1\0\3\6\4\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\1\6\1\333"+
    "\2\6\1\0\12\6\1\0\3\6\4\0\3\6\11\0"+
    "\2\6\21\0\3\6\1\334\1\6\1\0\4\6\1\0"+
    "\12\6\1\0\3\6\4\0\3\6\11\0\2\6\21\0"+
    "\3\6\1\335\1\6\1\0\4\6\1\0\12\6\1\0"+
    "\3\6\46\0\1\336\31\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\4\6\1\0\11\6\1\337\1\0\3\6"+
    "\4\0\3\6\11\0\2\6\21\0\2\6\1\340\2\6"+
    "\1\0\4\6\1\0\12\6\1\0\3\6\52\0\1\341"+
    "\25\0\3\6\11\0\2\6\21\0\5\6\1\0\1\6"+
    "\1\342\2\6\1\0\12\6\1\0\3\6\4\0\3\6"+
    "\11\0\2\6\21\0\5\6\1\0\4\6\1\0\3\6"+
    "\1\343\6\6\1\0\3\6\4\0\3\6\11\0\2\6"+
    "\21\0\4\6\1\344\1\0\4\6\1\0\12\6\1\0"+
    "\3\6\4\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\2\6\1\345\1\6\1\0\12\6\1\0\3\6\4\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\3\6\1\346"+
    "\1\0\12\6\1\0\3\6\4\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\2\6\1\347\1\6\1\0\12\6"+
    "\1\0\3\6\53\0\1\350\24\0\3\6\11\0\2\6"+
    "\21\0\4\6\1\351\1\0\4\6\1\0\12\6\1\0"+
    "\3\6\52\0\1\352\25\0\3\6\11\0\2\6\21\0"+
    "\1\353\1\354\1\6\1\355\1\6\1\0\1\6\1\356"+
    "\1\6\1\357\1\360\1\361\5\6\1\362\3\6\1\0"+
    "\3\6\54\0\1\363\76\0\1\364\70\0\1\365\23\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\3\6\1\366"+
    "\1\0\12\6\1\0\3\6\4\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\4\6\1\0\1\6\1\367\10\6"+
    "\1\0\3\6\4\0\3\6\11\0\2\6\21\0\5\6"+
    "\1\0\3\6\1\370\1\0\12\6\1\0\3\6\61\0"+
    "\1\371\16\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\4\6\1\0\3\6\1\372\6\6\1\0\3\6\61\0"+
    "\1\373\16\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\4\6\1\0\3\6\1\374\6\6\1\0\3\6\4\0"+
    "\3\6\11\0\2\6\21\0\2\6\1\375\2\6\1\0"+
    "\4\6\1\0\12\6\1\0\3\6\45\0\1\376\27\0"+
    "\14\57\1\64\3\57\1\377\53\57\44\0\1\u0100\32\0"+
    "\3\6\11\0\2\6\21\0\2\6\1\u0101\2\6\1\0"+
    "\4\6\1\0\12\6\1\0\3\6\53\0\1\u0102\24\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\2\6\1\u0103"+
    "\1\6\1\0\12\6\1\0\3\6\4\0\3\6\11\0"+
    "\2\6\21\0\5\6\1\0\4\6\1\u0104\1\u0105\11\6"+
    "\1\0\3\6\4\0\3\6\11\0\2\6\21\0\4\6"+
    "\1\u0106\1\0\4\6\1\0\12\6\1\0\3\6\4\0"+
    "\3\6\11\0\2\6\21\0\4\6\1\u0107\1\0\4\6"+
    "\1\0\12\6\1\0\3\6\47\0\1\u0108\30\0\3\6"+
    "\11\0\2\6\21\0\1\6\1\u0109\3\6\1\0\4\6"+
    "\1\0\12\6\1\0\3\6\4\0\3\6\11\0\2\6"+
    "\21\0\1\6\1\u010a\3\6\1\0\4\6\1\0\12\6"+
    "\1\0\3\6\4\0\3\6\11\0\2\6\21\0\1\6"+
    "\1\u010b\3\6\1\0\4\6\1\0\12\6\1\0\3\6"+
    "\4\0\3\6\11\0\2\6\21\0\5\6\1\0\4\6"+
    "\1\0\3\6\1\u010c\6\6\1\0\3\6\4\0\3\6"+
    "\11\0\2\6\21\0\3\6\1\u010d\1\6\1\0\4\6"+
    "\1\0\12\6\1\0\3\6\46\0\1\u010e\31\0\3\6"+
    "\11\0\2\6\21\0\2\6\1\u010f\2\6\1\0\4\6"+
    "\1\0\12\6\1\0\3\6\55\0\2\u0104\21\0\3\6"+
    "\11\0\2\6\21\0\4\6\1\u0110\1\0\4\6\1\0"+
    "\12\6\1\0\3\6\4\0\3\6\11\0\2\6\21\0"+
    "\2\6\1\u0111\2\6\1\0\4\6\1\0\12\6\1\0"+
    "\3\6\4\0\3\6\11\0\2\6\21\0\4\6\1\u0112"+
    "\1\0\4\6\1\0\12\6\1\0\3\6\4\0\3\6"+
    "\11\0\2\6\21\0\1\6\1\u0113\3\6\1\0\4\6"+
    "\1\0\3\6\1\u0114\6\6\1\0\3\6\4\0\3\6"+
    "\11\0\2\6\21\0\4\6\1\u0115\1\0\4\6\1\0"+
    "\12\6\1\0\3\6\57\0\1\u0116\20\0\3\6\11\0"+
    "\2\6\21\0\5\6\1\0\4\6\1\0\1\6\1\u0117"+
    "\10\6\1\0\3\6\4\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\4\6\1\0\3\6\1\u0118\6\6\1\0"+
    "\3\6\55\0\2\u0119\72\0\2\u011a\61\0\1\u011b\33\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\4\6\1\u0119"+
    "\1\u011c\11\6\1\0\3\6\4\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\4\6\1\u011a\1\u011d\11\6\1\0"+
    "\3\6\4\0\3\6\11\0\2\6\21\0\1\6\1\u011e"+
    "\3\6\1\0\4\6\1\0\12\6\1\0\3\6\1\0"+
    "\14\57\1\u011f\57\57\60\0\1\u0120\16\0\3\6\11\0"+
    "\2\6\21\0\5\6\1\0\4\6\1\0\3\6\1\u0121"+
    "\6\6\1\0\3\6\4\0\3\6\11\0\2\6\21\0"+
    "\2\6\1\u0122\2\6\1\0\4\6\1\0\12\6\1\0"+
    "\3\6\4\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\2\6\1\u0123\1\6\1\0\12\6\1\0\3\6\53\0"+
    "\1\u0124\24\0\3\6\11\0\2\6\21\0\2\6\1\u0125"+
    "\2\6\1\0\4\6\1\0\12\6\1\0\3\6\4\0"+
    "\3\6\11\0\2\6\21\0\2\6\1\u0126\2\6\1\0"+
    "\4\6\1\0\12\6\1\0\3\6\4\0\3\6\11\0"+
    "\2\6\21\0\2\6\1\u0127\2\6\1\0\4\6\1\0"+
    "\12\6\1\0\3\6\4\0\3\6\11\0\2\6\21\0"+
    "\4\6\1\u0128\1\0\4\6\1\0\12\6\1\0\3\6"+
    "\47\0\1\u0129\30\0\3\6\11\0\2\6\21\0\5\6"+
    "\1\0\2\6\1\u012a\1\6\1\0\12\6\1\0\3\6"+
    "\4\0\3\6\11\0\2\6\21\0\2\6\1\u012b\1\6"+
    "\1\u012c\1\0\4\6\1\0\12\6\1\0\3\6\4\0"+
    "\3\6\11\0\1\6\1\u012d\21\0\5\6\1\u012e\1\u012d"+
    "\3\6\1\0\12\6\1\0\3\6\4\0\3\6\11\0"+
    "\2\6\21\0\5\6\1\0\4\6\1\0\12\6\1\0"+
    "\1\u012f\2\6\4\0\3\6\11\0\2\6\21\0\5\6"+
    "\1\0\2\6\1\u0130\1\6\1\0\12\6\1\0\3\6"+
    "\4\0\3\6\11\0\2\6\21\0\5\6\1\0\4\6"+
    "\1\0\2\6\1\u0131\7\6\1\0\3\6\44\0\1\u0132"+
    "\33\0\3\6\11\0\2\6\21\0\1\6\1\u0133\3\6"+
    "\1\0\4\6\1\0\12\6\1\0\3\6\4\0\3\6"+
    "\11\0\2\6\21\0\5\6\1\0\3\6\1\u0134\1\0"+
    "\12\6\1\0\3\6\45\0\1\u0135\73\0\1\u0136\73\0"+
    "\1\u0137\32\0\3\6\11\0\2\6\21\0\2\6\1\u0138"+
    "\2\6\1\0\4\6\1\0\12\6\1\0\3\6\4\0"+
    "\3\6\11\0\2\6\21\0\2\6\1\u0139\2\6\1\0"+
    "\4\6\1\0\12\6\1\0\3\6\4\0\3\6\11\0"+
    "\2\6\21\0\2\6\1\u013a\2\6\1\0\4\6\1\0"+
    "\12\6\1\0\3\6\53\0\1\u013b\24\0\3\6\11\0"+
    "\2\6\21\0\5\6\1\0\2\6\1\u013c\1\6\1\0"+
    "\12\6\1\0\3\6\4\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\4\6\1\0\3\6\1\u013d\6\6\1\0"+
    "\3\6\4\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\3\6\1\u013e\1\0\12\6\1\0\3\6\54\0\1\u013f"+
    "\23\0\3\6\11\0\2\6\21\0\5\6\1\0\2\6"+
    "\1\u0140\1\6\1\0\12\6\1\0\3\6\53\0\1\u0141"+
    "\24\0\3\6\11\0\2\6\21\0\5\6\1\0\3\6"+
    "\1\u0142\1\0\12\6\1\0\3\6\4\0\3\6\11\0"+
    "\2\6\21\0\1\6\1\u0143\3\6\1\0\4\6\1\0"+
    "\12\6\1\0\3\6\4\0\3\6\11\0\2\6\21\0"+
    "\1\6\1\u0144\3\6\1\0\4\6\1\0\12\6\1\0"+
    "\3\6\4\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\4\6\1\0\10\6\1\u0145\1\6\1\0\3\6\66\0"+
    "\1\u0146\11\0\3\6\11\0\2\6\21\0\1\6\1\u0147"+
    "\3\6\1\0\4\6\1\0\12\6\1\0\3\6\4\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\3\6\1\u0148"+
    "\1\0\12\6\1\0\3\6\4\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\3\6\1\u0149\1\0\12\6\1\0"+
    "\3\6\67\0\1\u014a\10\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\4\6\1\0\11\6\1\u014b\1\0\3\6"+
    "\4\0\3\6\11\0\2\6\21\0\5\6\1\0\4\6"+
    "\1\0\3\6\1\u014c\6\6\1\0\3\6\44\0\1\u014d"+
    "\33\0\3\6\11\0\2\6\21\0\1\6\1\u014e\3\6"+
    "\1\0\4\6\1\0\12\6\1\0\3\6\4\0\3\6"+
    "\11\0\2\6\21\0\4\6\1\u014f\1\0\4\6\1\0"+
    "\12\6\1\0\3\6\47\0\1\u0150\30\0\3\6\11\0"+
    "\2\6\21\0\5\6\1\0\3\6\1\u0151\1\0\12\6"+
    "\1\0\3\6\54\0\1\u0152\23\0\3\6\11\0\2\6"+
    "\21\0\1\6\1\u0153\3\6\1\0\4\6\1\0\12\6"+
    "\1\0\3\6\4\0\3\6\11\0\2\6\21\0\5\6"+
    "\1\0\4\6\1\0\12\6\1\0\1\6\1\u0154\1\6"+
    "\4\0\3\6\11\0\2\6\21\0\5\6\1\0\3\6"+
    "\1\u0155\1\0\12\6\1\0\3\6\4\0\3\6\11\0"+
    "\2\6\21\0\5\6\1\0\4\6\1\0\5\6\1\u0156"+
    "\4\6\1\0\3\6\63\0\1\u0157\14\0\3\6\11\0"+
    "\2\6\21\0\5\6\1\0\3\6\1\u0158\1\0\12\6"+
    "\1\0\3\6\4\0\3\6\11\0\2\6\21\0\2\6"+
    "\1\u0159\1\6\1\u015a\1\0\4\6\1\0\12\6\1\0"+
    "\3\6\4\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\4\6\1\0\3\6\1\u015b\6\6\1\0\3\6\47\0"+
    "\1\u015c\30\0\3\6\11\0\2\6\21\0\4\6\1\u015d"+
    "\1\0\4\6\1\0\12\6\1\0\3\6\4\0\3\6"+
    "\11\0\2\6\21\0\5\6\1\0\2\6\1\u015e\1\6"+
    "\1\0\12\6\1\0\3\6\4\0\3\6\11\0\2\6"+
    "\21\0\4\6\1\u015f\1\0\4\6\1\0\12\6\1\0"+
    "\3\6\47\0\1\u0160\30\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\2\6\1\u0161\1\6\1\0\12\6\1\0"+
    "\3\6\4\0\3\6\11\0\2\6\21\0\3\6\1\u0162"+
    "\1\6\1\0\4\6\1\0\12\6\1\0\3\6\4\0"+
    "\3\6\11\0\2\6\21\0\4\6\1\u0163\1\0\4\6"+
    "\1\0\12\6\1\0\3\6\4\0\3\6\11\0\2\6"+
    "\21\0\4\6\1\u0164\1\0\4\6\1\0\12\6\1\0"+
    "\3\6\47\0\1\u0165\30\0\3\6\11\0\2\6\21\0"+
    "\4\6\1\u0166\1\0\4\6\1\0\12\6\1\0\3\6"+
    "\4\0\3\6\11\0\2\6\21\0\5\6\1\0\4\6"+
    "\1\0\3\6\1\u0167\6\6\1\0\3\6\4\0\3\6"+
    "\11\0\2\6\21\0\5\6\1\0\2\6\1\u0168\1\6"+
    "\1\0\12\6\1\0\3\6\53\0\1\u0169\24\0\3\6"+
    "\11\0\2\6\21\0\5\6\1\0\2\6\1\u016a\1\6"+
    "\1\0\12\6\1\0\3\6\4\0\3\6\11\0\2\6"+
    "\21\0\1\6\1\u016b\3\6\1\0\4\6\1\0\12\6"+
    "\1\0\3\6\4\0\3\6\11\0\2\6\21\0\4\6"+
    "\1\u016c\1\0\4\6\1\0\12\6\1\0\3\6\4\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\4\6\1\0"+
    "\2\6\1\u016d\7\6\1\0\3\6\4\0\3\6\11\0"+
    "\2\6\21\0\5\6\1\0\4\6\1\0\11\6\1\u016e"+
    "\1\0\3\6\67\0\1\u016f\10\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\4\6\1\0\2\6\1\u0170\7\6"+
    "\1\0\3\6\4\0\3\6\11\0\2\6\21\0\5\6"+
    "\1\0\4\6\1\0\5\6\1\u0171\4\6\1\0\3\6"+
    "\4\0\3\6\11\0\2\6\21\0\4\6\1\u0172\1\0"+
    "\4\6\1\0\12\6\1\0\3\6\4\0\3\6\11\0"+
    "\1\6\1\u0173\21\0\5\6\1\u0174\1\u0173\3\6\1\0"+
    "\12\6\1\0\3\6\4\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\3\6\1\u0175\1\0\12\6\1\0\3\6"+
    "\4\0\3\6\11\0\2\6\21\0\1\6\1\u0176\3\6"+
    "\1\0\4\6\1\0\12\6\1\0\3\6\44\0\1\u0177"+
    "\33\0\3\6\11\0\2\6\21\0\5\6\1\0\3\6"+
    "\1\u0178\1\0\12\6\1\0\3\6\4\0\3\6\11\0"+
    "\2\6\21\0\5\6\1\0\2\6\1\u0179\1\6\1\0"+
    "\12\6\1\0\3\6\4\0\3\6\11\0\2\6\21\0"+
    "\3\6\1\u017a\1\6\1\0\4\6\1\0\12\6\1\0"+
    "\3\6\4\0\3\6\11\0\2\6\21\0\3\6\1\u017b"+
    "\1\6\1\0\4\6\1\0\12\6\1\0\3\6\46\0"+
    "\1\u017c\31\0\3\6\11\0\2\6\21\0\5\6\1\0"+
    "\4\6\1\0\3\6\1\u017d\6\6\1\0\3\6\4\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\4\6\1\0"+
    "\6\6\1\u017e\3\6\1\0\3\6\64\0\1\u017f\13\0"+
    "\3\6\11\0\2\6\21\0\5\6\1\0\4\6\1\0"+
    "\3\6\1\u0180\6\6\1\0\3\6\4\0\3\6\11\0"+
    "\2\6\21\0\5\6\1\0\4\6\1\0\7\6\1\u0181"+
    "\2\6\1\0\3\6\4\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\4\6\1\0\3\6\1\u0182\6\6\1\0"+
    "\3\6\4\0\3\6\11\0\2\6\21\0\4\6\1\u0183"+
    "\1\0\4\6\1\0\12\6\1\0\3\6\47\0\1\u0184"+
    "\30\0\3\6\11\0\2\6\21\0\5\6\1\0\4\6"+
    "\1\0\5\6\1\u0185\4\6\1\0\3\6\63\0\1\u0186"+
    "\14\0\3\6\11\0\2\6\21\0\5\6\1\0\4\6"+
    "\1\0\1\6\1\u0187\10\6\1\0\3\6\4\0\3\6"+
    "\11\0\2\6\21\0\2\6\1\u0188\2\6\1\0\4\6"+
    "\1\0\12\6\1\0\3\6\4\0\3\6\11\0\2\6"+
    "\21\0\1\6\1\u0189\3\6\1\0\4\6\1\0\12\6"+
    "\1\0\3\6\44\0\1\u018a\33\0\3\6\11\0\2\6"+
    "\21\0\4\6\1\u018b\1\0\4\6\1\0\12\6\1\0"+
    "\3\6\47\0\1\u018c\30\0\3\6\11\0\2\6\21\0"+
    "\4\6\1\u018d\1\0\4\6\1\0\12\6\1\0\3\6"+
    "\4\0\3\6\11\0\2\6\21\0\2\6\1\u018e\2\6"+
    "\1\0\4\6\1\0\12\6\1\0\3\6\45\0\1\u018f"+
    "\32\0\3\6\11\0\2\6\21\0\2\6\1\u0190\2\6"+
    "\1\0\4\6\1\0\12\6\1\0\3\6\4\0\3\6"+
    "\11\0\2\6\21\0\5\6\1\0\1\6\1\u0191\2\6"+
    "\1\0\12\6\1\0\3\6\52\0\1\u0192\25\0\3\6"+
    "\11\0\2\6\21\0\5\6\1\0\4\6\1\u0193\1\u0194"+
    "\11\6\1\0\3\6\4\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\4\6\1\0\12\6\1\0\2\6\1\u0195"+
    "\73\0\1\u0196\52\0\1\u0197\25\0\3\6\11\0\2\6"+
    "\21\0\5\6\1\0\1\6\1\u0198\2\6\1\0\12\6"+
    "\1\0\3\6\4\0\3\6\11\0\2\6\21\0\5\6"+
    "\1\0\4\6\1\u0199\1\u019a\11\6\1\0\3\6\55\0"+
    "\2\u0199\76\0\1\u019b\16\0\3\6\11\0\2\6\21\0"+
    "\5\6\1\0\4\6\1\0\3\6\1\u019c\6\6\1\0"+
    "\3\6\43\0\1\u019d\34\0\3\6\11\0\2\6\21\0"+
    "\1\u019e\4\6\1\0\4\6\1\0\12\6\1\0\3\6"+
    "\61\0\1\u019f\16\0\3\6\11\0\2\6\21\0\5\6"+
    "\1\0\4\6\1\0\3\6\1\u01a0\6\6\1\0\3\6"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19800];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\3\1\2\11\1\1\1\11\2\1\4\11"+
    "\3\1\1\11\5\1\4\11\14\1\1\11\10\0\1\11"+
    "\1\1\1\0\5\1\10\11\3\1\1\0\3\1\1\0"+
    "\4\1\2\0\3\1\1\0\3\1\1\11\1\1\3\0"+
    "\1\1\1\0\3\1\1\0\4\1\1\0\6\1\1\0"+
    "\1\1\1\0\1\1\1\0\3\1\2\0\4\1\1\0"+
    "\2\1\5\0\1\1\2\0\3\1\1\11\3\1\1\0"+
    "\10\1\1\0\1\1\1\0\1\1\1\11\3\1\3\0"+
    "\3\1\1\0\1\1\1\0\2\1\2\0\1\1\1\11"+
    "\2\0\1\1\1\11\1\0\1\1\1\0\4\1\1\0"+
    "\2\1\1\0\6\1\1\0\1\1\1\0\2\1\1\11"+
    "\3\0\3\1\1\0\1\1\1\0\2\1\3\0\1\1"+
    "\1\0\4\1\1\0\2\1\1\11\6\1\1\0\1\1"+
    "\1\0\5\1\1\0\2\1\3\0\3\1\1\11\1\1"+
    "\1\11\2\1\1\11\1\0\1\11\1\1\1\11\1\1"+
    "\1\0\3\1\1\0\5\1\1\0\7\1\1\0\2\1"+
    "\3\0\3\1\1\11\1\0\3\1\1\0\4\1\1\0"+
    "\4\1\1\0\3\1\1\0\2\1\3\11\3\1\1\0"+
    "\3\1\1\0\1\1\1\0\4\1\1\0\3\1\1\0"+
    "\2\1\1\11\2\1\1\11\1\1\1\0\4\1\1\0"+
    "\4\1\1\0\3\1\1\11\4\1\1\0\3\1\1\11"+
    "\5\1\1\0\4\1\1\0\2\1\1\0\4\1\1\0"+
    "\2\1\1\0\4\1\1\0\1\1\1\0\3\1\1\0"+
    "\1\1\1\11\2\1\1\0\2\1\2\0\2\1\2\0"+
    "\1\1\1\0\1\1\1\11\1\1\1\0\1\1\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[416];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexicoFS(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 236) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  private final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.out.println("Linea: " + (yyline+1) + " Columna: " + (yycolumn+1) + " - Error Lexico en: " + yytext());
        //id,archivo,tipo,descripcion,acciones,linea,columna,aux
         Errores errores=new Errores(yytext(),"lexicoFS","ERROR LEXICO","EL SIMBOLO NO PERTENECE AL LENGUAJE","NO SE REALIZARON ACCIONES",String.valueOf(yyline+1),String.valueOf(yycolumn+1),"");
         proyecto1compi2_201213580.Proyecto1Compi2_201213580.errores_lexicos.add(errores);
          }
        case 77: break;
        case 2: 
          { return new Symbol(simbolofs.pto, yyline, yycolumn,yytext());
          }
        case 78: break;
        case 3: 
          { return new Symbol(simbolofs.valor_simbolo, yyline, yycolumn,yytext());
          }
        case 79: break;
        case 4: 
          { return new Symbol(simbolofs.valor_numero_completo, yyline, yycolumn,yytext());
          }
        case 80: break;
        case 5: 
          { return new Symbol(simbolofs.valor_id, yyline, yycolumn,yytext());
          }
        case 81: break;
        case 6: 
          { return new Symbol(simbolofs.div, yyline, yycolumn,yytext());
          }
        case 82: break;
        case 7: 
          { /* ignore white space. */
          }
        case 83: break;
        case 8: 
          { return new Symbol(simbolofs.por, yyline, yycolumn,yytext());
          }
        case 84: break;
        case 9: 
          { return new Symbol(simbolofs.dospuntos, yyline, yycolumn,yytext());
          }
        case 85: break;
        case 10: 
          { return new Symbol(simbolofs.parena, yyline, yycolumn,yytext());
          }
        case 86: break;
        case 11: 
          { return new Symbol(simbolofs.parenc, yyline, yycolumn,yytext());
          }
        case 87: break;
        case 12: 
          { return new Symbol(simbolofs.llavea, yyline, yycolumn,yytext());
          }
        case 88: break;
        case 13: 
          { return new Symbol(simbolofs.llavec, yyline, yycolumn,yytext());
          }
        case 89: break;
        case 14: 
          { return new Symbol(simbolofs.igual, yyline, yycolumn,yytext());
          }
        case 90: break;
        case 15: 
          { return new Symbol(simbolofs.mas, yyline, yycolumn,yytext());
          }
        case 91: break;
        case 16: 
          { return new Symbol(simbolofs.menos, yyline, yycolumn,yytext());
          }
        case 92: break;
        case 17: 
          { return new Symbol(simbolofs.pot, yyline, yycolumn,yytext());
          }
        case 93: break;
        case 18: 
          { return new Symbol(simbolofs.mayorq, yyline, yycolumn,yytext());
          }
        case 94: break;
        case 19: 
          { return new Symbol(simbolofs.menorq, yyline, yycolumn,yytext());
          }
        case 95: break;
        case 20: 
          { return new Symbol(simbolofs.not, yyline, yycolumn,yytext());
          }
        case 96: break;
        case 21: 
          { return new Symbol(simbolofs.coma, yyline, yycolumn,yytext());
          }
        case 97: break;
        case 22: 
          { return new Symbol(simbolofs.pyc, yyline, yycolumn,yytext());
          }
        case 98: break;
        case 23: 
          { return new Symbol(simbolofs.corchea, yyline, yycolumn,yytext());
          }
        case 99: break;
        case 24: 
          { return new Symbol(simbolofs.corchec, yyline, yycolumn,yytext());
          }
        case 100: break;
        case 25: 
          { return new Symbol(simbolofs.signoi, yyline, yycolumn,yytext());
          }
        case 101: break;
        case 26: 
          { return new Symbol(simbolofs.valor_cadena, yyline, yycolumn,yytext());
          }
        case 102: break;
        case 27: 
          { return new Symbol(simbolofs.si, yyline, yycolumn,yytext());
          }
        case 103: break;
        case 28: 
          { return new Symbol(simbolofs.igualigual, yyline, yycolumn,yytext());
          }
        case 104: break;
        case 29: 
          { return new Symbol(simbolofs.incremental, yyline, yycolumn,yytext());
          }
        case 105: break;
        case 30: 
          { return new Symbol(simbolofs.decremental, yyline, yycolumn,yytext());
          }
        case 106: break;
        case 31: 
          { return new Symbol(simbolofs.mayorigualq, yyline, yycolumn,yytext());
          }
        case 107: break;
        case 32: 
          { return new Symbol(simbolofs.menorigualq, yyline, yycolumn,yytext());
          }
        case 108: break;
        case 33: 
          { return new Symbol(simbolofs.diferente, yyline, yycolumn,yytext());
          }
        case 109: break;
        case 34: 
          { return new Symbol(simbolofs.and, yyline, yycolumn,yytext());
          }
        case 110: break;
        case 35: 
          { return new Symbol(simbolofs.or, yyline, yycolumn,yytext());
          }
        case 111: break;
        case 36: 
          { return new Symbol(simbolofs.valor_numero_decimal, yyline, yycolumn,yytext());
          }
        case 112: break;
        case 37: 
          { 
          }
        case 113: break;
        case 38: 
          { return new Symbol(simbolofs.var, yyline, yycolumn,yytext());
          }
        case 114: break;
        case 39: 
          { return new Symbol(simbolofs.map, yyline, yycolumn,yytext());
          }
        case 115: break;
        case 40: 
          { return new Symbol(simbolofs.sino, yyline, yycolumn,yytext());
          }
        case 116: break;
        case 41: 
          { return new Symbol(simbolofs.caso, yyline, yycolumn,yytext());
          }
        case 117: break;
        case 42: 
          { return new Symbol(simbolofs.valor_nulo, yyline, yycolumn,yytext());
          }
        case 118: break;
        case 43: 
          { return new Symbol(simbolofs.valor_path2, yyline, yycolumn,yytext());
          }
        case 119: break;
        case 44: 
          { return new Symbol(simbolofs.valor_falso, yyline, yycolumn,yytext());
          }
        case 120: break;
        case 45: 
          { return new Symbol(simbolofs.todos, yyline, yycolumn,yytext());
          }
        case 121: break;
        case 46: 
          { return new Symbol(simbolofs.alclic, yyline, yycolumn,yytext());
          }
        case 122: break;
        case 47: 
          { return new Symbol(simbolofs.alguno, yyline, yycolumn,yytext());
          }
        case 123: break;
        case 48: 
          { return new Symbol(simbolofs.reduce, yyline, yycolumn,yytext());
          }
        case 124: break;
        case 49: 
          { return new Symbol(simbolofs.maximo, yyline, yycolumn,yytext());
          }
        case 125: break;
        case 50: 
          { return new Symbol(simbolofs.minimo, yyline, yycolumn,yytext());
          }
        case 126: break;
        case 51: 
          { return new Symbol(simbolofs.buscar, yyline, yycolumn,yytext());
          }
        case 127: break;
        case 52: 
          { return new Symbol(simbolofs.filtrar, yyline, yycolumn,yytext());
          }
        case 128: break;
        case 53: 
          { return new Symbol(simbolofs.funcion, yyline, yycolumn,yytext());
          }
        case 129: break;
        case 54: 
          { return new Symbol(simbolofs.defecto, yyline, yycolumn,yytext());
          }
        case 130: break;
        case 55: 
          { return new Symbol(simbolofs.detener, yyline, yycolumn,yytext());
          }
        case 131: break;
        case 56: 
          { return new Symbol(simbolofs.valor_path, yyline, yycolumn,yytext());
          }
        case 132: break;
        case 57: 
          { return new Symbol(simbolofs.alcargar, yyline, yycolumn,yytext());
          }
        case 133: break;
        case 58: 
          { return new Symbol(simbolofs.alcerrar, yyline, yycolumn,yytext());
          }
        case 134: break;
        case 59: 
          { return new Symbol(simbolofs.retornar, yyline, yycolumn,yytext());
          }
        case 135: break;
        case 60: 
          { return new Symbol(simbolofs.invertir, yyline, yycolumn,yytext());
          }
        case 136: break;
        case 61: 
          { return new Symbol(simbolofs.imprimir, yyline, yycolumn,yytext());
          }
        case 137: break;
        case 62: 
          { return new Symbol(simbolofs.importar, yyline, yycolumn,yytext());
          }
        case 138: break;
        case 63: 
          { return new Symbol(simbolofs.valor_verdadero, yyline, yycolumn,yytext());
          }
        case 139: break;
        case 64: 
          { return new Symbol(simbolofs.selecciona, yyline, yycolumn,yytext());
          }
        case 140: break;
        case 65: 
          { return new Symbol(simbolofs.ascendente, yyline, yycolumn,yytext());
          }
        case 141: break;
        case 66: 
          { return new Symbol(simbolofs.creartexto, yyline, yycolumn,yytext());
          }
        case 142: break;
        case 67: 
          { return new Symbol(simbolofs.crearboton, yyline, yycolumn,yytext());
          }
        case 143: break;
        case 68: 
          { return new Symbol(simbolofs.descendente, yyline, yycolumn,yytext());
          }
        case 144: break;
        case 69: 
          { return new Symbol(simbolofs.crearimagen, yyline, yycolumn,yytext());
          }
        case 145: break;
        case 70: 
          { return new Symbol(simbolofs.crearventana, yyline, yycolumn,yytext());
          }
        case 146: break;
        case 71: 
          { return new Symbol(simbolofs.crearareatexto, yyline, yycolumn,yytext());
          }
        case 147: break;
        case 72: 
          { return new Symbol(simbolofs.crearcajatexto, yyline, yycolumn,yytext());
          }
        case 148: break;
        case 73: 
          { return new Symbol(simbolofs.crearcontenedor, yyline, yycolumn,yytext());
          }
        case 149: break;
        case 74: 
          { return new Symbol(simbolofs.creardesplegable, yyline, yycolumn,yytext());
          }
        case 150: break;
        case 75: 
          { return new Symbol(simbolofs.crearcontrolnumerico, yyline, yycolumn,yytext());
          }
        case 151: break;
        case 76: 
          { return new Symbol(simbolofs.arraydesdearchivo, yyline, yycolumn,yytext());
          }
        case 152: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	return null;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
