
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 18 22:54:35 CST 2019
//----------------------------------------------------

package Analizadores.GramaticaGDATO;

import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.lang.*;
import javax.swing.JOptionPane;
import java.io.*;
import java.util.LinkedList;
import java.awt.Color;
import ArbolAST.AST;
import Auxiliares.Errores;
import ArbolAST.Componente.NodoGDATO;
import ArbolAST.Entorno.Type;
import ArbolAST.Expresiones.operacion.Aritmetica;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 18 22:54:35 CST 2019
  */
public class sintacticoGDATO extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintacticoGDATO() {super();}

  /** Constructor which sets the default scanner. */
  public sintacticoGDATO(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintacticoGDATO(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\012\000\002\002\004\000\002\002\003\000\002\003" +
    "\012\000\002\004\013\000\002\004\012\000\002\005\013" +
    "\000\002\005\012\000\002\006\003\000\002\006\003\000" +
    "\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\055\000\004\004\004\001\002\000\004\007\010\001" +
    "\002\000\004\002\000\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\005\011\001\002\000" +
    "\004\004\013\001\002\000\004\004\045\001\002\000\004" +
    "\006\014\001\002\000\004\005\015\001\002\000\004\004" +
    "\016\001\002\000\004\011\036\001\002\000\004\004\020" +
    "\001\002\000\006\010\022\011\021\001\002\000\004\005" +
    "\025\001\002\000\004\006\023\001\002\000\004\005\024" +
    "\001\002\000\004\004\ufffd\001\002\000\010\012\030\013" +
    "\027\014\026\001\002\000\004\004\ufff9\001\002\000\004" +
    "\004\ufff8\001\002\000\004\004\ufffa\001\002\000\004\004" +
    "\032\001\002\000\004\010\033\001\002\000\004\011\034" +
    "\001\002\000\004\005\035\001\002\000\004\004\ufffc\001" +
    "\002\000\004\005\037\001\002\000\010\012\030\013\027" +
    "\014\026\001\002\000\004\004\041\001\002\000\004\010" +
    "\042\001\002\000\004\011\043\001\002\000\004\005\044" +
    "\001\002\000\004\004\ufffb\001\002\000\006\006\046\010" +
    "\047\001\002\000\004\005\052\001\002\000\004\007\050" +
    "\001\002\000\004\005\051\001\002\000\004\002\uffff\001" +
    "\002\000\004\004\016\001\002\000\004\004\054\001\002" +
    "\000\006\010\055\011\021\001\002\000\004\006\056\001" +
    "\002\000\004\005\057\001\002\000\004\004\ufffe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\055\000\006\002\005\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintacticoGDATO$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintacticoGDATO$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintacticoGDATO$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<Aritmetica> root=null;
    public static int index=0;
    public void syntax_error(Symbol s){
        System.out.println("Error sintactico en la linea "+(s.left+1)+" Columna "+s.right+". Identificador "+s.value+" no reconocido"); 
        //id,archivo,tipo,descripcion,acciones,linea,columna,aux
         Errores errores=new Errores("SINTACTICO","Error en el elemento "+s.value.toString(),s.left+1,s.right+1);
         proyecto1compi2_201213580.Proyecto1Compi2_201213580.errores_fs.add(errores);
    }
    /**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        Errores errores=new Errores("SINTACTICO","Error en el elemento "+s.value.toString(),s.left+1,s.right+1);
        proyecto1compi2_201213580.Proyecto1Compi2_201213580.errores_fs.add(errores);
        javax.swing.JOptionPane.showMessageDialog(null,"Error Sintactico en la linea "+(s.right+1)+"Columna "+s.left+". Identificador"+s.value+" no reconocido.");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintacticoGDATO$actions {

  

  private final sintacticoGDATO parser;

  /** Constructor */
  CUP$sintacticoGDATO$actions(sintacticoGDATO parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintacticoGDATO$do_action(
    int                        CUP$sintacticoGDATO$act_num,
    java_cup.runtime.lr_parser CUP$sintacticoGDATO$parser,
    java.util.Stack            CUP$sintacticoGDATO$stack,
    int                        CUP$sintacticoGDATO$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintacticoGDATO$result;

      /* select the action based on the action number */
      switch (CUP$sintacticoGDATO$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO_DATO ::= valor_cadena 
            {
              NodoGDATO RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGDATO$stack.peek()).value;
		RESULT=new NodoGDATO(Type.PrimitiveType.STRING,a.replaceAll("\"","").toLowerCase());
              CUP$sintacticoGDATO$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",4, ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.peek()), RESULT);
            }
          return CUP$sintacticoGDATO$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPO_DATO ::= valor_numero_decimal 
            {
              NodoGDATO RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGDATO$stack.peek()).value;
		RESULT=new NodoGDATO(Type.PrimitiveType.DOUBLE,a.replaceAll("\"","").toLowerCase());
              CUP$sintacticoGDATO$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",4, ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.peek()), RESULT);
            }
          return CUP$sintacticoGDATO$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPO_DATO ::= valor_numero_completo 
            {
              NodoGDATO RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGDATO$stack.peek()).value;
		RESULT=new NodoGDATO(Type.PrimitiveType.INTEGER,a.replaceAll("\"","").toLowerCase());
              CUP$sintacticoGDATO$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",4, ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.peek()), RESULT);
            }
          return CUP$sintacticoGDATO$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LISTA_ELEMENTOS ::= abre valor_id cierra TIPO_DATO abre div valor_id cierra 
            {
              LinkedList<NodoGDATO> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-4)).right;
		NodoGDATO b = (NodoGDATO)((java_cup.runtime.Symbol) CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-4)).value;
		
                                                                                RESULT=new LinkedList<NodoGDATO>();
                                                                                b.setTipo(Type.PrimitiveType.GDATO);
                                                                                b.setEtiqueta(a.replaceAll("\"",""));
                                                                                RESULT.add(b);
                                                                              
              CUP$sintacticoGDATO$result = parser.getSymbolFactory().newSymbol("LISTA_ELEMENTOS",3, ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.peek()), RESULT);
            }
          return CUP$sintacticoGDATO$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LISTA_ELEMENTOS ::= LISTA_ELEMENTOS abre valor_id cierra TIPO_DATO abre div valor_id cierra 
            {
              LinkedList<NodoGDATO> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-8)).right;
		LinkedList<NodoGDATO> a = (LinkedList<NodoGDATO>)((java_cup.runtime.Symbol) CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-4)).right;
		NodoGDATO c = (NodoGDATO)((java_cup.runtime.Symbol) CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-4)).value;
		
                                                                                                    RESULT=a;
                                                                                                    c.setTipo(Type.PrimitiveType.GDATO);
                                                                                                    c.setEtiqueta(b.replaceAll("\"",""));
                                                                                                    RESULT.add(c);
                                                                                                
              CUP$sintacticoGDATO$result = parser.getSymbolFactory().newSymbol("LISTA_ELEMENTOS",3, ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.peek()), RESULT);
            }
          return CUP$sintacticoGDATO$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CONTENIDO_PRINCIPAL ::= abre principal cierra LISTA_ELEMENTOS abre div principal cierra 
            {
              LinkedList<Aritmetica> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-4)).right;
		LinkedList<NodoGDATO> a = (LinkedList<NodoGDATO>)((java_cup.runtime.Symbol) CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-4)).value;
		
                                                                                            RESULT=new LinkedList<>();
                                                                                            RESULT.add(new Aritmetica(a, Type.PrimitiveType.GDATO, aright+1, aleft+1));
                                                                                        
              CUP$sintacticoGDATO$result = parser.getSymbolFactory().newSymbol("CONTENIDO_PRINCIPAL",2, ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.peek()), RESULT);
            }
          return CUP$sintacticoGDATO$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CONTENIDO_PRINCIPAL ::= CONTENIDO_PRINCIPAL abre principal cierra LISTA_ELEMENTOS abre div principal cierra 
            {
              LinkedList<Aritmetica> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-8)).right;
		LinkedList<Aritmetica> a = (LinkedList<Aritmetica>)((java_cup.runtime.Symbol) CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-4)).right;
		LinkedList<NodoGDATO> b = (LinkedList<NodoGDATO>)((java_cup.runtime.Symbol) CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-4)).value;
		
                                                                                                                 RESULT=a;
                                                                                                                RESULT.add(new Aritmetica(b,Type.PrimitiveType.GDATO,aleft+1,aright+1));
                                                                                                              
              CUP$sintacticoGDATO$result = parser.getSymbolFactory().newSymbol("CONTENIDO_PRINCIPAL",2, ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.peek()), RESULT);
            }
          return CUP$sintacticoGDATO$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIAS_GLOBALES ::= abre lista cierra CONTENIDO_PRINCIPAL abre div lista cierra 
            {
              LinkedList<Aritmetica> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-4)).right;
		LinkedList<Aritmetica> a = (LinkedList<Aritmetica>)((java_cup.runtime.Symbol) CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-4)).value;
		
                                                                                    RESULT=a;
                                                                                   
              CUP$sintacticoGDATO$result = parser.getSymbolFactory().newSymbol("SENTENCIAS_GLOBALES",1, ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.peek()), RESULT);
            }
          return CUP$sintacticoGDATO$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIAL ::= SENTENCIAS_GLOBALES 
            {
              LinkedList<NodoGDATO> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.peek()).right;
		LinkedList<Aritmetica> a = (LinkedList<Aritmetica>)((java_cup.runtime.Symbol) CUP$sintacticoGDATO$stack.peek()).value;
		
                                this.parser.root=a;
                               
              CUP$sintacticoGDATO$result = parser.getSymbolFactory().newSymbol("INICIAL",0, ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.peek()), RESULT);
            }
          return CUP$sintacticoGDATO$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-1)).right;
		LinkedList<NodoGDATO> start_val = (LinkedList<NodoGDATO>)((java_cup.runtime.Symbol) CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-1)).value;
		RESULT = start_val;
              CUP$sintacticoGDATO$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.elementAt(CUP$sintacticoGDATO$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGDATO$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintacticoGDATO$parser.done_parsing();
          return CUP$sintacticoGDATO$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

