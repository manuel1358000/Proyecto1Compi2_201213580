
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Feb 16 22:44:42 CST 2019
//----------------------------------------------------

package Analizadores.GramaticaGXML;

import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.lang.*;
import javax.swing.JOptionPane;
import java.io.*;
import java.util.LinkedList;
import Auxiliares.NodoGXML;
import Auxiliares.NodoElemento;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Feb 16 22:44:42 CST 2019
  */
public class sintacticoGXML extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintacticoGXML() {super();}

  /** Constructor which sets the default scanner. */
  public sintacticoGXML(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintacticoGXML(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\021\004\000\002\021\003" +
    "\000\002\004\012\000\002\004\003\000\002\005\003\000" +
    "\002\005\003\000\002\022\004\000\002\022\003\000\002" +
    "\006\013\000\002\010\004\000\002\010\003\000\002\007" +
    "\007\000\002\007\007\000\002\007\007\000\002\007\012" +
    "\000\002\007\011\000\002\017\005\000\002\017\003\000" +
    "\002\020\002\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\003\000\002" +
    "\020\005\000\002\020\003\000\002\020\003\000\002\015" +
    "\003\000\002\015\003\000\002\011\004\000\002\011\003" +
    "\000\002\012\012\000\002\013\004\000\002\013\003\000" +
    "\002\014\007\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\007\000\002\014" +
    "\005\000\002\016\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\006\003\005\045\007\001\002\000\006\003" +
    "\005\045\007\001\002\000\006\003\ufffa\045\ufffa\001\002" +
    "\000\006\003\ufffc\045\ufffc\001\002\000\006\004\205\005" +
    "\017\001\002\000\006\002\ufff6\045\ufff6\001\002\000\006" +
    "\002\ufffe\045\015\001\002\000\004\002\014\001\002\000" +
    "\004\002\000\001\002\000\004\002\001\001\002\000\004" +
    "\005\017\001\002\000\006\002\ufff7\045\ufff7\001\002\000" +
    "\014\017\026\020\022\021\020\043\024\044\023\001\002" +
    "\000\004\050\201\001\002\000\016\017\026\020\022\021" +
    "\020\043\024\044\023\046\123\001\002\000\004\050\115" +
    "\001\002\000\004\050\107\001\002\000\004\050\033\001" +
    "\002\000\016\017\ufff3\020\ufff3\021\ufff3\043\ufff3\044\ufff3" +
    "\046\ufff3\001\002\000\004\050\027\001\002\000\004\051" +
    "\030\001\002\000\004\074\031\001\002\000\004\051\032" +
    "\001\002\000\016\017\ufff2\020\ufff2\021\ufff2\043\ufff2\044" +
    "\ufff2\046\ufff2\001\002\000\004\052\034\001\002\000\004" +
    "\074\035\001\002\000\004\054\036\001\002\000\052\045" +
    "\uffeb\046\uffeb\047\uffeb\051\043\055\uffeb\056\uffeb\057\uffeb" +
    "\060\uffeb\061\uffeb\062\uffeb\065\uffeb\066\uffeb\067\uffeb\070" +
    "\uffeb\071\uffeb\072\uffeb\073\uffeb\075\037\101\040\102\044" +
    "\001\002\000\042\045\uffdc\046\uffdc\047\uffdc\055\uffdc\056" +
    "\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\065\uffdc\066\uffdc" +
    "\067\uffdc\070\uffdc\071\uffdc\072\uffdc\073\uffdc\001\002\000" +
    "\042\045\uffda\046\uffda\047\uffda\055\uffda\056\uffda\057\uffda" +
    "\060\uffda\061\uffda\062\uffda\065\uffda\066\uffda\067\uffda\070" +
    "\uffda\071\uffda\072\uffda\073\uffda\001\002\000\042\045\067" +
    "\046\064\047\053\055\uffec\056\uffec\057\066\060\057\061" +
    "\063\062\052\065\065\066\062\067\060\070\061\071\055" +
    "\072\056\073\054\001\002\000\006\055\047\056\050\001" +
    "\002\000\004\074\045\001\002\000\042\045\uffd9\046\uffd9" +
    "\047\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062" +
    "\uffd9\065\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9\072\uffd9" +
    "\073\uffd9\001\002\000\004\051\046\001\002\000\042\045" +
    "\uffdb\046\uffdb\047\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb" +
    "\061\uffdb\062\uffdb\065\uffdb\066\uffdb\067\uffdb\070\uffdb\071" +
    "\uffdb\072\uffdb\073\uffdb\001\002\000\004\053\106\001\002" +
    "\000\052\045\uffeb\046\uffeb\047\uffeb\051\043\055\uffeb\056" +
    "\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\065\uffeb\066\uffeb" +
    "\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\075\037\101" +
    "\040\102\044\001\002\000\042\045\067\046\064\047\053" +
    "\055\uffed\056\uffed\057\066\060\057\061\063\062\052\065" +
    "\065\066\062\067\060\070\061\071\055\072\056\073\054" +
    "\001\002\000\052\045\uffeb\046\uffeb\047\uffeb\051\043\055" +
    "\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\065\uffeb" +
    "\066\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\075" +
    "\037\101\040\102\044\001\002\000\052\045\uffeb\046\uffeb" +
    "\047\uffeb\051\043\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061" +
    "\uffeb\062\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb" +
    "\072\uffeb\073\uffeb\075\037\101\040\102\044\001\002\000" +
    "\052\045\uffeb\046\uffeb\047\uffeb\051\043\055\uffeb\056\uffeb" +
    "\057\uffeb\060\uffeb\061\uffeb\062\uffeb\065\uffeb\066\uffeb\067" +
    "\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\075\037\101\040" +
    "\102\044\001\002\000\052\045\uffeb\046\uffeb\047\uffeb\051" +
    "\043\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb" +
    "\065\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073" +
    "\uffeb\075\037\101\040\102\044\001\002\000\052\045\uffeb" +
    "\046\uffeb\047\uffeb\051\043\055\uffeb\056\uffeb\057\uffeb\060" +
    "\uffeb\061\uffeb\062\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb" +
    "\071\uffeb\072\uffeb\073\uffeb\075\037\101\040\102\044\001" +
    "\002\000\052\045\uffeb\046\uffeb\047\uffeb\051\043\055\uffeb" +
    "\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\065\uffeb\066" +
    "\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\075\037" +
    "\101\040\102\044\001\002\000\052\045\uffeb\046\uffeb\047" +
    "\uffeb\051\043\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb" +
    "\062\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb\072" +
    "\uffeb\073\uffeb\075\037\101\040\102\044\001\002\000\052" +
    "\045\uffeb\046\uffeb\047\uffeb\051\043\055\uffeb\056\uffeb\057" +
    "\uffeb\060\uffeb\061\uffeb\062\uffeb\065\uffeb\066\uffeb\067\uffeb" +
    "\070\uffeb\071\uffeb\072\uffeb\073\uffeb\075\037\101\040\102" +
    "\044\001\002\000\052\045\uffeb\046\uffeb\047\uffeb\051\043" +
    "\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\065" +
    "\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb" +
    "\075\037\101\040\102\044\001\002\000\052\045\uffeb\046" +
    "\uffeb\047\uffeb\051\043\055\uffeb\056\uffeb\057\uffeb\060\uffeb" +
    "\061\uffeb\062\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\071" +
    "\uffeb\072\uffeb\073\uffeb\075\037\101\040\102\044\001\002" +
    "\000\052\045\uffeb\046\uffeb\047\uffeb\051\043\055\uffeb\056" +
    "\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\065\uffeb\066\uffeb" +
    "\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\075\037\101" +
    "\040\102\044\001\002\000\052\045\uffeb\046\uffeb\047\uffeb" +
    "\051\043\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062" +
    "\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb" +
    "\073\uffeb\075\037\101\040\102\044\001\002\000\052\045" +
    "\uffeb\046\uffeb\047\uffeb\051\043\055\uffeb\056\uffeb\057\uffeb" +
    "\060\uffeb\061\uffeb\062\uffeb\065\uffeb\066\uffeb\067\uffeb\070" +
    "\uffeb\071\uffeb\072\uffeb\073\uffeb\075\037\101\040\102\044" +
    "\001\002\000\052\045\uffeb\046\uffeb\047\uffeb\051\043\055" +
    "\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\065\uffeb" +
    "\066\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\075" +
    "\037\101\040\102\044\001\002\000\042\045\uffe5\046\uffe5" +
    "\047\053\055\uffe5\056\uffe5\057\066\060\057\061\063\062" +
    "\052\065\uffe5\066\uffe5\067\uffe5\070\uffe5\071\uffe5\072\uffe5" +
    "\073\uffe5\001\002\000\042\045\uffea\046\uffea\047\053\055" +
    "\uffea\056\uffea\057\uffea\060\uffea\061\063\062\052\065\uffea" +
    "\066\uffea\067\uffea\070\uffea\071\uffea\072\uffea\073\uffea\001" +
    "\002\000\042\045\uffe3\046\uffe3\047\053\055\uffe3\056\uffe3" +
    "\057\066\060\057\061\063\062\052\065\uffe3\066\uffe3\067" +
    "\uffe3\070\uffe3\071\uffe3\072\uffe3\073\uffe3\001\002\000\042" +
    "\045\uffe4\046\uffe4\047\053\055\uffe4\056\uffe4\057\066\060" +
    "\057\061\063\062\052\065\uffe4\066\uffe4\067\uffe4\070\uffe4" +
    "\071\uffe4\072\uffe4\073\uffe4\001\002\000\042\045\uffe8\046" +
    "\uffe8\047\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8" +
    "\062\052\065\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\072" +
    "\uffe8\073\uffe8\001\002\000\042\045\uffe2\046\uffe2\047\053" +
    "\055\uffe2\056\uffe2\057\066\060\057\061\063\062\052\065" +
    "\uffe2\066\uffe2\067\uffe2\070\uffe2\071\uffe2\072\uffe2\073\uffe2" +
    "\001\002\000\042\045\uffe0\046\uffe0\047\053\055\uffe0\056" +
    "\uffe0\057\066\060\057\061\063\062\052\065\uffe0\066\uffe0" +
    "\067\uffe0\070\uffe0\071\uffe0\072\uffe0\073\uffe0\001\002\000" +
    "\042\045\uffe1\046\uffe1\047\053\055\uffe1\056\uffe1\057\066" +
    "\060\057\061\063\062\052\065\uffe1\066\uffe1\067\uffe1\070" +
    "\uffe1\071\uffe1\072\uffe1\073\uffe1\001\002\000\042\045\uffe9" +
    "\046\uffe9\047\053\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061" +
    "\063\062\052\065\uffe9\066\uffe9\067\uffe9\070\uffe9\071\uffe9" +
    "\072\uffe9\073\uffe9\001\002\000\042\045\067\046\064\047" +
    "\053\055\uffde\056\uffde\057\066\060\057\061\063\062\052" +
    "\065\065\066\062\067\060\070\061\071\uffde\072\uffde\073" +
    "\054\001\002\000\042\045\067\046\064\047\053\055\uffdf" +
    "\056\uffdf\057\066\060\057\061\063\062\052\065\065\066" +
    "\062\067\060\070\061\071\uffdf\072\056\073\054\001\002" +
    "\000\042\045\067\046\064\047\053\055\uffdd\056\uffdd\057" +
    "\066\060\057\061\063\062\052\065\065\066\062\067\060" +
    "\070\061\071\uffdd\072\uffdd\073\054\001\002\000\042\045" +
    "\uffe7\046\uffe7\047\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7" +
    "\061\uffe7\062\052\065\uffe7\066\uffe7\067\uffe7\070\uffe7\071" +
    "\uffe7\072\uffe7\073\uffe7\001\002\000\042\045\uffe6\046\uffe6" +
    "\047\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062" +
    "\uffe6\065\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6\072\uffe6" +
    "\073\uffe6\001\002\000\016\017\uffef\020\uffef\021\uffef\043" +
    "\uffef\044\uffef\046\uffef\001\002\000\004\052\110\001\002" +
    "\000\004\074\111\001\002\000\004\054\112\001\002\000" +
    "\052\045\uffeb\046\uffeb\047\uffeb\051\043\055\uffeb\056\uffeb" +
    "\057\uffeb\060\uffeb\061\uffeb\062\uffeb\065\uffeb\066\uffeb\067" +
    "\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\075\037\101\040" +
    "\102\044\001\002\000\006\055\114\056\050\001\002\000" +
    "\016\017\uffee\020\uffee\021\uffee\043\uffee\044\uffee\046\uffee" +
    "\001\002\000\004\051\116\001\002\000\006\040\120\041" +
    "\121\001\002\000\004\051\122\001\002\000\004\051\uffd8" +
    "\001\002\000\004\051\uffd7\001\002\000\016\017\ufff1\020" +
    "\ufff1\021\ufff1\043\ufff1\044\ufff1\046\ufff1\001\002\000\004" +
    "\045\126\001\002\000\016\017\ufff4\020\ufff4\021\ufff4\043" +
    "\ufff4\044\ufff4\046\ufff4\001\002\000\004\045\174\001\002" +
    "\000\004\006\130\001\002\000\004\045\uffd5\001\002\000" +
    "\020\017\131\021\133\022\137\023\136\024\141\025\134" +
    "\026\132\001\002\000\004\050\170\001\002\000\004\050" +
    "\164\001\002\000\004\050\160\001\002\000\004\050\156" +
    "\001\002\000\022\017\131\021\133\022\137\023\136\024" +
    "\141\025\134\026\132\046\151\001\002\000\004\050\146" +
    "\001\002\000\004\050\144\001\002\000\022\017\uffd2\021" +
    "\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\046\uffd2" +
    "\001\002\000\004\050\142\001\002\000\004\075\143\001" +
    "\002\000\022\017\uffce\021\uffce\022\uffce\023\uffce\024\uffce" +
    "\025\uffce\026\uffce\046\uffce\001\002\000\004\075\145\001" +
    "\002\000\022\017\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0" +
    "\025\uffd0\026\uffd0\046\uffd0\001\002\000\004\075\147\001" +
    "\002\000\022\017\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\026\uffcf\046\uffcf\001\002\000\022\017\uffd3\021" +
    "\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\046\uffd3" +
    "\001\002\000\004\045\152\001\002\000\004\047\153\001" +
    "\002\000\004\006\154\001\002\000\004\046\155\001\002" +
    "\000\004\045\uffd4\001\002\000\004\075\157\001\002\000" +
    "\022\017\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\046\uffcd\001\002\000\004\051\161\001\002\000" +
    "\004\100\162\001\002\000\004\051\163\001\002\000\022" +
    "\017\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026" +
    "\uffcc\046\uffcc\001\002\000\006\101\165\102\167\001\002" +
    "\000\022\017\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025" +
    "\uffca\026\uffca\046\uffca\001\002\000\022\017\uffcb\021\uffcb" +
    "\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\046\uffcb\001" +
    "\002\000\022\017\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9" +
    "\025\uffc9\026\uffc9\046\uffc9\001\002\000\004\051\171\001" +
    "\002\000\004\074\172\001\002\000\004\051\173\001\002" +
    "\000\022\017\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\046\uffd1\001\002\000\006\006\130\047\176" +
    "\001\002\000\004\045\uffd6\001\002\000\004\005\177\001" +
    "\002\000\004\046\200\001\002\000\006\002\ufff5\045\ufff5" +
    "\001\002\000\004\051\202\001\002\000\004\100\203\001" +
    "\002\000\004\051\204\001\002\000\016\017\ufff0\020\ufff0" +
    "\021\ufff0\043\ufff0\044\ufff0\046\ufff0\001\002\000\004\046" +
    "\206\001\002\000\006\076\211\077\210\001\002\000\004" +
    "\045\212\001\002\000\004\045\ufff8\001\002\000\004\045" +
    "\ufff9\001\002\000\004\047\213\001\002\000\004\004\214" +
    "\001\002\000\004\046\215\001\002\000\006\003\ufffb\045" +
    "\ufffb\001\002\000\006\003\ufffd\045\ufffd\001\002\000\006" +
    "\002\uffff\045\015\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\016\002\011\003\012\004\005\006\007\021" +
    "\003\022\010\001\001\000\010\004\215\006\007\022\216" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\024\010\020\001\001" +
    "\000\002\001\001\000\004\007\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\041\020\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\050\001\001\000\002\001\001\000\004\020\104\001" +
    "\001\000\004\020\103\001\001\000\004\020\102\001\001" +
    "\000\004\020\101\001\001\000\004\020\100\001\001\000" +
    "\004\020\077\001\001\000\004\020\076\001\001\000\004" +
    "\020\075\001\001\000\004\020\074\001\001\000\004\020" +
    "\073\001\001\000\004\020\072\001\001\000\004\020\071" +
    "\001\001\000\004\020\070\001\001\000\004\020\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\112\020" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\124\012\126\001\001\000\002\001\001\000\004\012" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\134\014\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\015\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintacticoGXML$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintacticoGXML$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintacticoGXML$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public NodoGXML root;
    public static int index=0;
    public void syntax_error(Symbol s){
        System.out.println("Error en la linea "+(s.right+1)+" Columna "+s.left+". Identificador "+s.value+" no reconocido"); 
    }
    /**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        javax.swing.JOptionPane.showMessageDialog(null,"Error Sintactico en la linea "+(s.right+1)+"Columna "+s.left+". Identificador"+s.value+" no reconocido.");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintacticoGXML$actions {

  

  private final sintacticoGXML parser;

  /** Constructor */
  CUP$sintacticoGXML$actions(sintacticoGXML parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintacticoGXML$do_action(
    int                        CUP$sintacticoGXML$act_num,
    java_cup.runtime.lr_parser CUP$sintacticoGXML$parser,
    java.util.Stack            CUP$sintacticoGXML$stack,
    int                        CUP$sintacticoGXML$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintacticoGXML$result;

      /* select the action based on the action number */
      switch (CUP$sintacticoGXML$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPO_BORDE ::= valor_falso 
            {
              String RESULT =null;
		
                            RESULT="falso";
                         
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("TIPO_BORDE",12, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPO_BORDE ::= valor_verdadero 
            {
              String RESULT =null;
		
                                RESULT="verdadero";
                             
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("TIPO_BORDE",12, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ELEMENTO_CONTENEDOR ::= borde igual TIPO_BORDE 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                //tipo,valor/nombre
                                                RESULT=new NodoElemento("ELEMENTO",a.toString(),"borde");
                                               
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ELEMENTO_CONTENEDOR ::= color igual comilladoble valor_hexa comilladoble 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		
                                                                            //tipo,valor/nombre
                                                                            RESULT=new NodoElemento("ELEMENTO",a.toString(),"color");
                                                                         
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ELEMENTO_CONTENEDOR ::= ancho igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                            //tipo,valor/nombre
                                                            RESULT=new NodoElemento("ELEMENTO",a.toString(),"ancho");
                                                          
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ELEMENTO_CONTENEDOR ::= alto igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                            //tipo,valor/nombre
                                                            RESULT=new NodoElemento("ELEMENTO",a.toString(),"alto");
                                                         
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELEMENTO_CONTENEDOR ::= y igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                        //tipo,valor/nombre
                                                        RESULT=new NodoElemento("ELEMENTO",a.toString(),"y");
                                                      
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELEMENTO_CONTENEDOR ::= x igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                        //tipo,valor/nombre
                                                        RESULT=new NodoElemento("ELEMENTO",a.toString(),"x");
                                                      
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELEMENTO_CONTENEDOR ::= id igual comilladoble valor_id comilladoble 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		
                                                                        //tipo,valor/nombre
                                                                        RESULT=new NodoElemento("ELEMENTO",a.toString(),"id");
                                                                    
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELEMENTOS_CONTENEDORES ::= ELEMENTO_CONTENEDOR 
            {
              LinkedList<NodoElemento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoElemento a = (NodoElemento)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                RESULT=new LinkedList<NodoElemento>();
                                                RESULT.add(a);
                                               
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CONTENEDORES",9, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELEMENTOS_CONTENEDORES ::= ELEMENTOS_CONTENEDORES ELEMENTO_CONTENEDOR 
            {
              LinkedList<NodoElemento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<NodoElemento> a = (LinkedList<NodoElemento>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoElemento b = (NodoElemento)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                                        RESULT=a;
                                                                        RESULT.add(b);
                                                                        
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CONTENEDORES",9, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ETIQUETA_CONTENEDOR ::= abre e_contenedor ELEMENTOS_CONTENEDORES cierra abre div e_contenedor cierra 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-5)).right;
		LinkedList<NodoElemento> b = (LinkedList<NodoElemento>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-5)).value;
		
                                                                                                        RESULT=new NodoGXML(this.parser.index,a.toString(),a.toString(),b);
                                                                                                        this.parser.index++;
                                                                                                        //vamos a verificar los elementos del contenedor
                                                                                                        String respuesta=RESULT.elementosContenedor(RESULT.elementos);
                                                                                                        if(respuesta.equals("")){ 
                                                                                                        }else{
                                                                                                            RESULT=null;
                                                                                                            System.out.println(respuesta);
                                                                                                        }
                                                                                                      
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETA_CONTENEDOR",8, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONTENIDO_VENTANA ::= ETIQUETA_CONTENEDOR 
            {
              LinkedList<NodoGXML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML a = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                            RESULT=new LinkedList<NodoGXML>();
                                            if(a!=null){
                                                RESULT.add(a);
                                            }
                                          
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_VENTANA",7, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONTENIDO_VENTANA ::= CONTENIDO_VENTANA ETIQUETA_CONTENEDOR 
            {
              LinkedList<NodoGXML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<NodoGXML> a = (LinkedList<NodoGXML>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML b = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                                RESULT=a;
                                                                if(b!=null){
                                                                    a.add(b);
                                                                }
                                                              
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_VENTANA",7, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO_TIPO ::= secundaria 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                            RESULT="secundaria";        
                         
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("TIPO_TIPO",11, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO_TIPO ::= principal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                            RESULT="principal";
                        
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("TIPO_TIPO",11, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PARAMETRO ::= valor_falso 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARAMETRO ::= valor_verdadero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARAMETRO ::= comilladoble valor_id comilladoble 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAMETRO ::= valor_numero_completo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAMETRO ::= PARAMETRO not PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAMETRO ::= PARAMETRO and PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAMETRO ::= PARAMETRO or PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAMETRO ::= PARAMETRO diferente PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAMETRO ::= PARAMETRO igualigual PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAMETRO ::= PARAMETRO menorigualq PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PARAMETRO ::= PARAMETRO mayorigualq PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PARAMETRO ::= PARAMETRO cierra PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PARAMETRO ::= PARAMETRO abre PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARAMETRO ::= PARAMETRO potencia PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAMETRO ::= PARAMETRO div PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAMETRO ::= PARAMETRO por PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMETRO ::= PARAMETRO menos PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMETRO ::= PARAMETRO mas PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMETRO ::= 
            {
              String RESULT =null;
		RESULT="";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",14, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTA_PARAMETROS ::= PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTA_PARAMETROS ::= LISTA_PARAMETROS coma PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ELEMENTO_VENTANA ::= accionfinal igual llavea valor_id parena LISTA_PARAMETROS parenc 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		
                                                                                            RESULT=new NodoElemento("ELEMENTO",a.toString()+"("+b.toString()+")","accicionfinal"); 
                                                                                        
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",5, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ELEMENTO_VENTANA ::= accioninicial igual llavea valor_id parena LISTA_PARAMETROS parenc llavec 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		
                                                                                               RESULT=new NodoElemento("ELEMENTO",a.toString()+"("+b.toString()+")","accicioninicial"); 
                                                                                             
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",5, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ELEMENTO_VENTANA ::= color igual comilladoble valor_hexa comilladoble 
            {
              NodoElemento RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		
                                                                        RESULT=new NodoElemento("ELEMENTO",b.toString(),"color");
                                                                        
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",5, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ELEMENTO_VENTANA ::= tipo igual comilladoble TIPO_TIPO comilladoble 
            {
              NodoElemento RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		
                                                                        RESULT=new NodoElemento("ELEMENTO",b.toString(),"tipo");
                                                                      
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",5, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ELEMENTO_VENTANA ::= id igual comilladoble valor_id comilladoble 
            {
              NodoElemento RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		
                                                                        RESULT=new NodoElemento("ELEMENTO",b.toString(),"id");
                                                                   
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",5, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ELEMENTOS_VENTANAS ::= ELEMENTO_VENTANA 
            {
              LinkedList<NodoElemento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoElemento a = (NodoElemento)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                        RESULT=new LinkedList<NodoElemento>();
                                        RESULT.add(a);
                                        
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_VENTANAS",6, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ELEMENTOS_VENTANAS ::= ELEMENTOS_VENTANAS ELEMENTO_VENTANA 
            {
              LinkedList<NodoElemento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<NodoElemento> a = (LinkedList<NodoElemento>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoElemento b = (NodoElemento)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                                RESULT=a;
                                                                RESULT.add(b);
                                                             
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_VENTANAS",6, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ETIQUETA_VENTANA ::= abre e_ventana ELEMENTOS_VENTANAS cierra CONTENIDO_VENTANA abre div e_ventana cierra 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).right;
		LinkedList<NodoElemento> b = (LinkedList<NodoElemento>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).right;
		LinkedList<NodoGXML> c = (LinkedList<NodoGXML>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).value;
		
                                                                                                                RESULT=new NodoGXML(this.parser.index,a.toString(),a.toString(),b);
                                                                                                                this.parser.index++;
                                                                                                                RESULT.nodos=c;
                                                                                                                //vamos a verificar los elementos de la ventana
                                                                                                                String respuesta=RESULT.elementosVentana(RESULT.elementos);
                                                                                                                if(respuesta.equals("")){
                                                                                                                }else{
                                                                                                                    RESULT=null;
                                                                                                                    System.out.println(respuesta);
                                                                                                                }
                                                                                                              
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETA_VENTANA",4, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEFINICION_GENERAL ::= ETIQUETA_VENTANA 
            {
              LinkedList<NodoGXML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML a = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                        RESULT=new LinkedList<NodoGXML>();
                                        if(a!=null){
                                            RESULT.add(a);
                                        }
                                        
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("DEFINICION_GENERAL",16, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEFINICION_GENERAL ::= DEFINICION_GENERAL ETIQUETA_VENTANA 
            {
              LinkedList<NodoGXML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<NodoGXML> a = (LinkedList<NodoGXML>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML b = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                                RESULT=a;
                                                                if(b!=null){
                                                                    a.add(b);
                                                                }
                                                             
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("DEFINICION_GENERAL",16, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTENIDO_IMPORTAR ::= valor_path2 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                        RESULT=new NodoGXML();
                                        RESULT.valor=a.toString();
                                        RESULT.index=this.parser.index;
                                        this.parser.index++;
                                   
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IMPORTAR",3, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTENIDO_IMPORTAR ::= valor_path 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                    RESULT=new NodoGXML();
                                    RESULT.valor=a.toString();
                                    RESULT.index=this.parser.index;
                                    this.parser.index++;
                                  
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IMPORTAR",3, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ETIQUETA_IMPORTAR ::= error 
            {
              NodoGXML RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETA_IMPORTAR",2, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ETIQUETA_IMPORTAR ::= abre e_importar cierra CONTENIDO_IMPORTAR abre div e_importar cierra 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).right;
		NodoGXML b = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).value;
		
                                                                                                RESULT=b;
                                                                                                RESULT.tipo_etiqueta=a.toString();
                                                                                                RESULT.id=a.toString();
                                                                                            
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETA_IMPORTAR",2, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEFINICION_IMPORTAR ::= ETIQUETA_IMPORTAR 
            {
              LinkedList<NodoGXML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML a = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                            
                                            RESULT=new LinkedList<NodoGXML>();
                                            if(a!=null){
                                                RESULT.add(a);
                                            }
                                            
                                          
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("DEFINICION_IMPORTAR",15, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DEFINICION_IMPORTAR ::= DEFINICION_IMPORTAR ETIQUETA_IMPORTAR 
            {
              LinkedList<NodoGXML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<NodoGXML> a = (LinkedList<NodoGXML>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML b = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                                RESULT=a;
                                                                if(b!=null){
                                                                    RESULT.add(b);
                                                                }
                                                                
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("DEFINICION_IMPORTAR",15, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // GENERAL ::= DEFINICION_GENERAL 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		LinkedList<NodoGXML> a = (LinkedList<NodoGXML>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                RESULT=new NodoGXML();
                                RESULT.nodos=a;
                               
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("GENERAL",1, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // GENERAL ::= DEFINICION_IMPORTAR DEFINICION_GENERAL 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<NodoGXML> a = (LinkedList<NodoGXML>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		LinkedList<NodoGXML> b = (LinkedList<NodoGXML>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                    RESULT=new NodoGXML();
                                                    RESULT.id="RAIZ";
                                                    RESULT.nodos=a;
                                                    RESULT.AgregarNodos(b);
                                                   
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("GENERAL",1, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIAL ::= GENERAL 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML a = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                    this.parser.root=a;
                 
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("INICIAL",0, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		NodoGXML start_val = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		RESULT = start_val;
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintacticoGXML$parser.done_parsing();
          return CUP$sintacticoGXML$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

