
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Mar 09 04:07:47 CST 2019
//----------------------------------------------------

package Analizadores.GramaticaGXML;

import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.lang.*;
import javax.swing.JOptionPane;
import java.io.*;
import java.util.LinkedList;
import ArbolAST.Componente.NodoElemento;
import ArbolAST.Componente.NodoGXML;
import java.awt.Color;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Mar 09 04:07:47 CST 2019
  */
public class sintacticoGXML extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintacticoGXML() {super();}

  /** Constructor which sets the default scanner. */
  public sintacticoGXML(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintacticoGXML(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\311\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\027\004\000\002\027\003" +
    "\000\002\004\012\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\030\004\000\002" +
    "\030\003\000\002\006\013\000\002\010\004\000\002\010" +
    "\003\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\012\000" +
    "\002\007\012\000\002\007\006\000\002\007\006\000\002" +
    "\016\005\000\002\016\003\000\002\017\002\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\011\004\000\002\011\003\000" +
    "\002\012\013\000\002\013\004\000\002\013\003\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\015\003\000\002\015\003\000\002\020\004\000" +
    "\002\020\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\022" +
    "\013\000\002\031\004\000\002\031\003\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\023\013\000\002\023\012\000\002\035" +
    "\012\000\002\035\022\000\002\035\012\000\002\044\004" +
    "\000\002\044\003\000\002\045\012\000\002\034\004\000" +
    "\002\034\003\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\024\012\000\002\041\004\000\002" +
    "\041\003\000\002\042\005\000\002\042\005\000\002\042" +
    "\005\000\002\042\005\000\002\042\005\000\002\042\005" +
    "\000\002\042\005\000\002\042\005\000\002\025\013\000" +
    "\002\040\005\000\002\040\005\000\002\040\005\000\002" +
    "\040\005\000\002\040\005\000\002\040\005\000\002\040" +
    "\012\000\002\047\003\000\002\047\003\000\002\037\004" +
    "\000\002\037\003\000\002\026\013\000\002\050\004\000" +
    "\002\050\003\000\002\051\005\000\002\051\005\000\002" +
    "\051\005\000\002\051\005\000\002\051\005\000\002\051" +
    "\005\000\002\051\012\000\002\036\004\000\002\036\003" +
    "\000\002\052\003\000\002\052\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01b8\000\004\051\007\001\002\000\004\051\007\001" +
    "\002\000\004\051\ufffc\001\002\000\006\002\ufff5\051\ufff5" +
    "\001\002\000\006\004\u01ae\005\016\001\002\000\006\002" +
    "\ufffe\051\015\001\002\000\004\002\013\001\002\000\004" +
    "\002\000\001\002\000\004\002\001\001\002\000\006\002" +
    "\ufff6\051\ufff6\001\002\000\004\005\016\001\002\000\020" +
    "\017\017\020\026\021\022\024\027\025\023\045\021\046" +
    "\024\001\002\000\004\054\u01ac\001\002\000\022\017\ufff2" +
    "\020\ufff2\021\ufff2\024\ufff2\025\ufff2\045\ufff2\046\ufff2\052" +
    "\ufff2\001\002\000\004\054\u01a4\001\002\000\004\054\u01a2" +
    "\001\002\000\004\054\u01a0\001\002\000\004\054\u0198\001" +
    "\002\000\022\017\017\020\026\021\022\024\027\025\023" +
    "\045\021\046\024\052\035\001\002\000\004\054\032\001" +
    "\002\000\004\054\030\001\002\000\004\106\031\001\002" +
    "\000\022\017\uffee\020\uffee\021\uffee\024\uffee\025\uffee\045" +
    "\uffee\046\uffee\052\uffee\001\002\000\004\113\033\001\002" +
    "\000\022\017\ufff0\020\ufff0\021\ufff0\024\ufff0\025\ufff0\045" +
    "\ufff0\046\ufff0\052\ufff0\001\002\000\022\017\ufff3\020\ufff3" +
    "\021\ufff3\024\ufff3\025\ufff3\045\ufff3\046\ufff3\052\ufff3\001" +
    "\002\000\004\051\037\001\002\000\004\051\u0193\001\002" +
    "\000\004\006\041\001\002\000\004\051\uffd2\001\002\000" +
    "\020\017\042\021\044\022\050\023\047\024\052\025\045" +
    "\026\043\001\002\000\004\054\u0191\001\002\000\004\054" +
    "\u018f\001\002\000\004\054\u018d\001\002\000\004\054\u018b" +
    "\001\002\000\022\017\042\021\044\022\050\023\047\024" +
    "\052\025\045\026\043\052\062\001\002\000\004\054\057" +
    "\001\002\000\004\054\055\001\002\000\022\017\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\052\uffcf" +
    "\001\002\000\004\054\053\001\002\000\004\106\054\001" +
    "\002\000\022\017\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb" +
    "\025\uffcb\026\uffcb\052\uffcb\001\002\000\004\106\056\001" +
    "\002\000\022\017\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd" +
    "\025\uffcd\026\uffcd\052\uffcd\001\002\000\004\106\060\001" +
    "\002\000\022\017\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\052\uffcc\001\002\000\022\017\uffd0\021" +
    "\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\052\uffd0" +
    "\001\002\000\004\051\066\001\002\000\004\051\uffc4\001" +
    "\002\000\004\051\uffbf\001\002\000\004\051\uffc1\001\002" +
    "\000\014\007\076\010\075\014\102\015\077\016\100\001" +
    "\002\000\004\051\uffc3\001\002\000\004\051\uffc0\001\002" +
    "\000\004\051\uffc2\001\002\000\004\051\074\001\002\000" +
    "\004\051\uffc5\001\002\000\016\007\076\010\075\014\102" +
    "\015\077\016\100\053\101\001\002\000\034\020\u0140\021" +
    "\u0139\022\u013e\023\u013d\024\u0145\025\u013a\027\u0143\030\u0144" +
    "\031\u013c\035\u0137\036\u0138\037\u013f\040\u013b\001\002\000" +
    "\022\021\u0118\022\u011d\023\u011b\027\u011e\030\u011f\031\u011c" +
    "\035\u0116\036\u0117\001\002\000\020\022\367\023\365\024" +
    "\371\025\363\027\370\047\362\050\366\001\002\000\020" +
    "\022\155\023\153\024\157\025\151\027\156\047\147\050" +
    "\154\001\002\000\004\006\145\001\002\000\022\020\110" +
    "\022\107\023\106\024\114\025\105\027\112\041\113\042" +
    "\104\001\002\000\024\020\uff9a\022\uff9a\023\uff9a\024\uff9a" +
    "\025\uff9a\027\uff9a\041\uff9a\042\uff9a\052\uff9a\001\002\000" +
    "\004\054\141\001\002\000\004\054\137\001\002\000\004" +
    "\054\135\001\002\000\004\054\133\001\002\000\004\054" +
    "\131\001\002\000\024\020\110\022\107\023\106\024\114" +
    "\025\105\027\112\041\113\042\104\052\124\001\002\000" +
    "\004\054\121\001\002\000\004\054\117\001\002\000\004" +
    "\054\115\001\002\000\004\106\116\001\002\000\024\020" +
    "\uff94\022\uff94\023\uff94\024\uff94\025\uff94\027\uff94\041\uff94" +
    "\042\uff94\052\uff94\001\002\000\004\113\120\001\002\000" +
    "\024\020\uff99\022\uff99\023\uff99\024\uff99\025\uff99\027\uff99" +
    "\041\uff99\042\uff99\052\uff99\001\002\000\004\113\122\001" +
    "\002\000\024\020\uff97\022\uff97\023\uff97\024\uff97\025\uff97" +
    "\027\uff97\041\uff97\042\uff97\052\uff97\001\002\000\024\020" +
    "\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\027\uff9b\041\uff9b" +
    "\042\uff9b\052\uff9b\001\002\000\004\051\125\001\002\000" +
    "\004\053\126\001\002\000\004\014\127\001\002\000\004" +
    "\052\130\001\002\000\004\051\uff9c\001\002\000\004\113" +
    "\132\001\002\000\024\020\uff98\022\uff98\023\uff98\024\uff98" +
    "\025\uff98\027\uff98\041\uff98\042\uff98\052\uff98\001\002\000" +
    "\004\106\134\001\002\000\024\020\uff96\022\uff96\023\uff96" +
    "\024\uff96\025\uff96\027\uff96\041\uff96\042\uff96\052\uff96\001" +
    "\002\000\004\106\136\001\002\000\024\020\uff95\022\uff95" +
    "\023\uff95\024\uff95\025\uff95\027\uff95\041\uff95\042\uff95\052" +
    "\uff95\001\002\000\004\106\140\001\002\000\024\020\uff93" +
    "\022\uff93\023\uff93\024\uff93\025\uff93\027\uff93\041\uff93\042" +
    "\uff93\052\uff93\001\002\000\006\114\143\115\144\001\002" +
    "\000\024\020\uff92\022\uff92\023\uff92\024\uff92\025\uff92\027" +
    "\uff92\041\uff92\042\uff92\052\uff92\001\002\000\046\017\uffc7" +
    "\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026" +
    "\uffc7\027\uffc7\030\uffc7\031\uffc7\035\uffc7\036\uffc7\037\uffc7" +
    "\040\uffc7\041\uffc7\042\uffc7\052\uffc7\001\002\000\046\017" +
    "\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6" +
    "\026\uffc6\027\uffc6\030\uffc6\031\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\042\uffc6\052\uffc6\001\002\000\004" +
    "\052\146\001\002\000\004\051\uffd1\001\002\000\004\054" +
    "\357\001\002\000\022\022\155\023\153\024\157\025\151" +
    "\027\156\047\147\050\154\052\245\001\002\000\004\054" +
    "\242\001\002\000\022\022\uff83\023\uff83\024\uff83\025\uff83" +
    "\027\uff83\047\uff83\050\uff83\052\uff83\001\002\000\004\054" +
    "\240\001\002\000\004\054\166\001\002\000\004\054\164" +
    "\001\002\000\004\054\162\001\002\000\004\054\160\001" +
    "\002\000\004\106\161\001\002\000\022\022\uff7f\023\uff7f" +
    "\024\uff7f\025\uff7f\027\uff7f\047\uff7f\050\uff7f\052\uff7f\001" +
    "\002\000\004\113\163\001\002\000\022\022\uff82\023\uff82" +
    "\024\uff82\025\uff82\027\uff82\047\uff82\050\uff82\052\uff82\001" +
    "\002\000\004\106\165\001\002\000\022\022\uff81\023\uff81" +
    "\024\uff81\025\uff81\027\uff81\047\uff81\050\uff81\052\uff81\001" +
    "\002\000\004\056\167\001\002\000\004\105\170\001\002" +
    "\000\004\060\171\001\002\000\052\051\uffe6\052\uffe6\053" +
    "\uffe6\061\uffe6\062\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6" +
    "\072\uffe6\073\uffe6\074\uffe6\075\uffe6\076\uffe6\077\uffe6\100" +
    "\uffe6\106\172\113\173\114\174\115\177\001\002\000\042" +
    "\051\uffd7\052\uffd7\053\uffd7\061\uffd7\062\uffd7\064\uffd7\065" +
    "\uffd7\066\uffd7\067\uffd7\072\uffd7\073\uffd7\074\uffd7\075\uffd7" +
    "\076\uffd7\077\uffd7\100\uffd7\001\002\000\042\051\uffd6\052" +
    "\uffd6\053\uffd6\061\uffd6\062\uffd6\064\uffd6\065\uffd6\066\uffd6" +
    "\067\uffd6\072\uffd6\073\uffd6\074\uffd6\075\uffd6\076\uffd6\077" +
    "\uffd6\100\uffd6\001\002\000\042\051\uffd5\052\uffd5\053\uffd5" +
    "\061\uffd5\062\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\072" +
    "\uffd5\073\uffd5\074\uffd5\075\uffd5\076\uffd5\077\uffd5\100\uffd5" +
    "\001\002\000\042\051\220\052\215\053\204\061\uffe7\062" +
    "\uffe7\064\217\065\207\066\213\067\203\072\216\073\214" +
    "\074\211\075\212\076\206\077\210\100\205\001\002\000" +
    "\006\061\200\062\201\001\002\000\042\051\uffd4\052\uffd4" +
    "\053\uffd4\061\uffd4\062\uffd4\064\uffd4\065\uffd4\066\uffd4\067" +
    "\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4" +
    "\100\uffd4\001\002\000\004\057\237\001\002\000\052\051" +
    "\uffe6\052\uffe6\053\uffe6\061\uffe6\062\uffe6\064\uffe6\065\uffe6" +
    "\066\uffe6\067\uffe6\072\uffe6\073\uffe6\074\uffe6\075\uffe6\076" +
    "\uffe6\077\uffe6\100\uffe6\106\172\113\173\114\174\115\177" +
    "\001\002\000\042\051\220\052\215\053\204\061\uffe8\062" +
    "\uffe8\064\217\065\207\066\213\067\203\072\216\073\214" +
    "\074\211\075\212\076\206\077\210\100\205\001\002\000" +
    "\052\051\uffe6\052\uffe6\053\uffe6\061\uffe6\062\uffe6\064\uffe6" +
    "\065\uffe6\066\uffe6\067\uffe6\072\uffe6\073\uffe6\074\uffe6\075" +
    "\uffe6\076\uffe6\077\uffe6\100\uffe6\106\172\113\173\114\174" +
    "\115\177\001\002\000\052\051\uffe6\052\uffe6\053\uffe6\061" +
    "\uffe6\062\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\072\uffe6" +
    "\073\uffe6\074\uffe6\075\uffe6\076\uffe6\077\uffe6\100\uffe6\106" +
    "\172\113\173\114\174\115\177\001\002\000\052\051\uffe6" +
    "\052\uffe6\053\uffe6\061\uffe6\062\uffe6\064\uffe6\065\uffe6\066" +
    "\uffe6\067\uffe6\072\uffe6\073\uffe6\074\uffe6\075\uffe6\076\uffe6" +
    "\077\uffe6\100\uffe6\106\172\113\173\114\174\115\177\001" +
    "\002\000\052\051\uffe6\052\uffe6\053\uffe6\061\uffe6\062\uffe6" +
    "\064\uffe6\065\uffe6\066\uffe6\067\uffe6\072\uffe6\073\uffe6\074" +
    "\uffe6\075\uffe6\076\uffe6\077\uffe6\100\uffe6\106\172\113\173" +
    "\114\174\115\177\001\002\000\052\051\uffe6\052\uffe6\053" +
    "\uffe6\061\uffe6\062\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6" +
    "\072\uffe6\073\uffe6\074\uffe6\075\uffe6\076\uffe6\077\uffe6\100" +
    "\uffe6\106\172\113\173\114\174\115\177\001\002\000\052" +
    "\051\uffe6\052\uffe6\053\uffe6\061\uffe6\062\uffe6\064\uffe6\065" +
    "\uffe6\066\uffe6\067\uffe6\072\uffe6\073\uffe6\074\uffe6\075\uffe6" +
    "\076\uffe6\077\uffe6\100\uffe6\106\172\113\173\114\174\115" +
    "\177\001\002\000\052\051\uffe6\052\uffe6\053\uffe6\061\uffe6" +
    "\062\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\072\uffe6\073" +
    "\uffe6\074\uffe6\075\uffe6\076\uffe6\077\uffe6\100\uffe6\106\172" +
    "\113\173\114\174\115\177\001\002\000\052\051\uffe6\052" +
    "\uffe6\053\uffe6\061\uffe6\062\uffe6\064\uffe6\065\uffe6\066\uffe6" +
    "\067\uffe6\072\uffe6\073\uffe6\074\uffe6\075\uffe6\076\uffe6\077" +
    "\uffe6\100\uffe6\106\172\113\173\114\174\115\177\001\002" +
    "\000\052\051\uffe6\052\uffe6\053\uffe6\061\uffe6\062\uffe6\064" +
    "\uffe6\065\uffe6\066\uffe6\067\uffe6\072\uffe6\073\uffe6\074\uffe6" +
    "\075\uffe6\076\uffe6\077\uffe6\100\uffe6\106\172\113\173\114" +
    "\174\115\177\001\002\000\052\051\uffe6\052\uffe6\053\uffe6" +
    "\061\uffe6\062\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\072" +
    "\uffe6\073\uffe6\074\uffe6\075\uffe6\076\uffe6\077\uffe6\100\uffe6" +
    "\106\172\113\173\114\174\115\177\001\002\000\052\051" +
    "\uffe6\052\uffe6\053\uffe6\061\uffe6\062\uffe6\064\uffe6\065\uffe6" +
    "\066\uffe6\067\uffe6\072\uffe6\073\uffe6\074\uffe6\075\uffe6\076" +
    "\uffe6\077\uffe6\100\uffe6\106\172\113\173\114\174\115\177" +
    "\001\002\000\052\051\uffe6\052\uffe6\053\uffe6\061\uffe6\062" +
    "\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\072\uffe6\073\uffe6" +
    "\074\uffe6\075\uffe6\076\uffe6\077\uffe6\100\uffe6\106\172\113" +
    "\173\114\174\115\177\001\002\000\052\051\uffe6\052\uffe6" +
    "\053\uffe6\061\uffe6\062\uffe6\064\uffe6\065\uffe6\066\uffe6\067" +
    "\uffe6\072\uffe6\073\uffe6\074\uffe6\075\uffe6\076\uffe6\077\uffe6" +
    "\100\uffe6\106\172\113\173\114\174\115\177\001\002\000" +
    "\052\051\uffe6\052\uffe6\053\uffe6\061\uffe6\062\uffe6\064\uffe6" +
    "\065\uffe6\066\uffe6\067\uffe6\072\uffe6\073\uffe6\074\uffe6\075" +
    "\uffe6\076\uffe6\077\uffe6\100\uffe6\106\172\113\173\114\174" +
    "\115\177\001\002\000\042\051\uffe0\052\uffe0\053\204\061" +
    "\uffe0\062\uffe0\064\217\065\207\066\213\067\203\072\uffe0" +
    "\073\uffe0\074\uffe0\075\uffe0\076\uffe0\077\uffe0\100\uffe0\001" +
    "\002\000\042\051\uffe5\052\uffe5\053\204\061\uffe5\062\uffe5" +
    "\064\uffe5\065\uffe5\066\213\067\203\072\uffe5\073\uffe5\074" +
    "\uffe5\075\uffe5\076\uffe5\077\uffe5\100\uffe5\001\002\000\042" +
    "\051\uffde\052\uffde\053\204\061\uffde\062\uffde\064\217\065" +
    "\207\066\213\067\203\072\uffde\073\uffde\074\uffde\075\uffde" +
    "\076\uffde\077\uffde\100\uffde\001\002\000\042\051\uffdf\052" +
    "\uffdf\053\204\061\uffdf\062\uffdf\064\217\065\207\066\213" +
    "\067\203\072\uffdf\073\uffdf\074\uffdf\075\uffdf\076\uffdf\077" +
    "\uffdf\100\uffdf\001\002\000\042\051\uffdd\052\uffdd\053\204" +
    "\061\uffdd\062\uffdd\064\217\065\207\066\213\067\203\072" +
    "\uffdd\073\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd\100\uffdd" +
    "\001\002\000\042\051\uffe3\052\uffe3\053\uffe3\061\uffe3\062" +
    "\uffe3\064\uffe3\065\uffe3\066\uffe3\067\203\072\uffe3\073\uffe3" +
    "\074\uffe3\075\uffe3\076\uffe3\077\uffe3\100\uffe3\001\002\000" +
    "\042\051\uffdb\052\uffdb\053\204\061\uffdb\062\uffdb\064\217" +
    "\065\207\066\213\067\203\072\uffdb\073\uffdb\074\uffdb\075" +
    "\uffdb\076\uffdb\077\uffdb\100\uffdb\001\002\000\042\051\uffdc" +
    "\052\uffdc\053\204\061\uffdc\062\uffdc\064\217\065\207\066" +
    "\213\067\203\072\uffdc\073\uffdc\074\uffdc\075\uffdc\076\uffdc" +
    "\077\uffdc\100\uffdc\001\002\000\042\051\220\052\215\053" +
    "\204\061\uffd9\062\uffd9\064\217\065\207\066\213\067\203" +
    "\072\216\073\214\074\211\075\212\076\uffd9\077\uffd9\100" +
    "\205\001\002\000\042\051\uffe4\052\uffe4\053\204\061\uffe4" +
    "\062\uffe4\064\uffe4\065\uffe4\066\213\067\203\072\uffe4\073" +
    "\uffe4\074\uffe4\075\uffe4\076\uffe4\077\uffe4\100\uffe4\001\002" +
    "\000\042\051\220\052\215\053\204\061\uffda\062\uffda\064" +
    "\217\065\207\066\213\067\203\072\216\073\214\074\211" +
    "\075\212\076\uffda\077\210\100\205\001\002\000\042\051" +
    "\220\052\215\053\204\061\uffd8\062\uffd8\064\217\065\207" +
    "\066\213\067\203\072\216\073\214\074\211\075\212\076" +
    "\uffd8\077\uffd8\100\205\001\002\000\042\051\uffe2\052\uffe2" +
    "\053\uffe2\061\uffe2\062\uffe2\064\uffe2\065\uffe2\066\uffe2\067" +
    "\203\072\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2\077\uffe2" +
    "\100\uffe2\001\002\000\042\051\uffe1\052\uffe1\053\uffe1\061" +
    "\uffe1\062\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\072\uffe1" +
    "\073\uffe1\074\uffe1\075\uffe1\076\uffe1\077\uffe1\100\uffe1\001" +
    "\002\000\022\022\uff7c\023\uff7c\024\uff7c\025\uff7c\027\uff7c" +
    "\047\uff7c\050\uff7c\052\uff7c\001\002\000\004\106\241\001" +
    "\002\000\022\022\uff80\023\uff80\024\uff80\025\uff80\027\uff80" +
    "\047\uff80\050\uff80\052\uff80\001\002\000\004\106\243\001" +
    "\002\000\022\022\uff7e\023\uff7e\024\uff7e\025\uff7e\027\uff7e" +
    "\047\uff7e\050\uff7e\052\uff7e\001\002\000\022\022\uff84\023" +
    "\uff84\024\uff84\025\uff84\027\uff84\047\uff84\050\uff84\052\uff84" +
    "\001\002\000\202\004\337\005\267\006\257\007\254\010" +
    "\345\011\340\012\351\013\342\014\255\015\265\016\311" +
    "\017\320\020\324\021\307\022\323\023\322\024\272\025" +
    "\247\026\336\027\305\030\300\031\325\032\256\033\346" +
    "\034\260\035\350\036\347\037\253\040\326\041\330\042" +
    "\251\043\343\044\321\045\270\046\250\047\306\050\252" +
    "\051\262\052\276\053\341\054\263\056\275\057\274\060" +
    "\301\061\277\062\261\063\335\064\304\065\302\066\314" +
    "\067\317\074\246\075\331\076\310\077\334\100\333\101" +
    "\316\102\303\103\313\104\312\105\273\106\266\113\327" +
    "\116\332\001\002\000\202\004\uff51\005\uff51\006\uff51\007" +
    "\uff51\010\uff51\011\uff51\012\uff51\013\uff51\014\uff51\015\uff51" +
    "\016\uff51\017\uff51\020\uff51\021\uff51\022\uff51\023\uff51\024" +
    "\uff51\025\uff51\026\uff51\027\uff51\030\uff51\031\uff51\032\uff51" +
    "\033\uff51\034\uff51\035\uff51\036\uff51\037\uff51\040\uff51\041" +
    "\uff51\042\uff51\043\uff51\044\uff51\045\uff51\046\uff51\047\uff51" +
    "\050\uff51\051\uff51\052\uff51\053\uff51\054\uff51\056\uff51\057" +
    "\uff51\060\uff51\061\uff51\062\uff51\063\uff51\064\uff51\065\uff51" +
    "\066\uff51\067\uff51\074\uff51\075\uff51\076\uff51\077\uff51\100" +
    "\uff51\101\uff51\102\uff51\103\uff51\104\uff51\105\uff51\106\uff51" +
    "\113\uff51\116\uff51\001\002\000\202\004\uff6d\005\uff6d\006" +
    "\uff6d\007\uff6d\010\uff6d\011\uff6d\012\uff6d\013\uff6d\014\uff6d" +
    "\015\uff6d\016\uff6d\017\uff6d\020\uff6d\021\uff6d\022\uff6d\023" +
    "\uff6d\024\uff6d\025\uff6d\026\uff6d\027\uff6d\030\uff6d\031\uff6d" +
    "\032\uff6d\033\uff6d\034\uff6d\035\uff6d\036\uff6d\037\uff6d\040" +
    "\uff6d\041\uff6d\042\uff6d\043\uff6d\044\uff6d\045\uff6d\046\uff6d" +
    "\047\uff6d\050\uff6d\051\uff6d\052\uff6d\053\uff6d\054\uff6d\056" +
    "\uff6d\057\uff6d\060\uff6d\061\uff6d\062\uff6d\063\uff6d\064\uff6d" +
    "\065\uff6d\066\uff6d\067\uff6d\074\uff6d\075\uff6d\076\uff6d\077" +
    "\uff6d\100\uff6d\101\uff6d\102\uff6d\103\uff6d\104\uff6d\105\uff6d" +
    "\106\uff6d\113\uff6d\116\uff6d\001\002\000\202\004\uff5e\005" +
    "\uff5e\006\uff5e\007\uff5e\010\uff5e\011\uff5e\012\uff5e\013\uff5e" +
    "\014\uff5e\015\uff5e\016\uff5e\017\uff5e\020\uff5e\021\uff5e\022" +
    "\uff5e\023\uff5e\024\uff5e\025\uff5e\026\uff5e\027\uff5e\030\uff5e" +
    "\031\uff5e\032\uff5e\033\uff5e\034\uff5e\035\uff5e\036\uff5e\037" +
    "\uff5e\040\uff5e\041\uff5e\042\uff5e\043\uff5e\044\uff5e\045\uff5e" +
    "\046\uff5e\047\uff5e\050\uff5e\051\uff5e\052\uff5e\053\uff5e\054" +
    "\uff5e\056\uff5e\057\uff5e\060\uff5e\061\uff5e\062\uff5e\063\uff5e" +
    "\064\uff5e\065\uff5e\066\uff5e\067\uff5e\074\uff5e\075\uff5e\076" +
    "\uff5e\077\uff5e\100\uff5e\101\uff5e\102\uff5e\103\uff5e\104\uff5e" +
    "\105\uff5e\106\uff5e\113\uff5e\116\uff5e\001\002\000\202\004" +
    "\uff63\005\uff63\006\uff63\007\uff63\010\uff63\011\uff63\012\uff63" +
    "\013\uff63\014\uff63\015\uff63\016\uff63\017\uff63\020\uff63\021" +
    "\uff63\022\uff63\023\uff63\024\uff63\025\uff63\026\uff63\027\uff63" +
    "\030\uff63\031\uff63\032\uff63\033\uff63\034\uff63\035\uff63\036" +
    "\uff63\037\uff63\040\uff63\041\uff63\042\uff63\043\uff63\044\uff63" +
    "\045\uff63\046\uff63\047\uff63\050\uff63\051\uff63\052\uff63\053" +
    "\uff63\054\uff63\056\uff63\057\uff63\060\uff63\061\uff63\062\uff63" +
    "\063\uff63\064\uff63\065\uff63\066\uff63\067\uff63\074\uff63\075" +
    "\uff63\076\uff63\077\uff63\100\uff63\101\uff63\102\uff63\103\uff63" +
    "\104\uff63\105\uff63\106\uff63\113\uff63\116\uff63\001\002\000" +
    "\202\004\uff60\005\uff60\006\uff60\007\uff60\010\uff60\011\uff60" +
    "\012\uff60\013\uff60\014\uff60\015\uff60\016\uff60\017\uff60\020" +
    "\uff60\021\uff60\022\uff60\023\uff60\024\uff60\025\uff60\026\uff60" +
    "\027\uff60\030\uff60\031\uff60\032\uff60\033\uff60\034\uff60\035" +
    "\uff60\036\uff60\037\uff60\040\uff60\041\uff60\042\uff60\043\uff60" +
    "\044\uff60\045\uff60\046\uff60\047\uff60\050\uff60\051\uff60\052" +
    "\uff60\053\uff60\054\uff60\056\uff60\057\uff60\060\uff60\061\uff60" +
    "\062\uff60\063\uff60\064\uff60\065\uff60\066\uff60\067\uff60\074" +
    "\uff60\075\uff60\076\uff60\077\uff60\100\uff60\101\uff60\102\uff60" +
    "\103\uff60\104\uff60\105\uff60\106\uff60\113\uff60\116\uff60\001" +
    "\002\000\202\004\uff66\005\uff66\006\uff66\007\uff66\010\uff66" +
    "\011\uff66\012\uff66\013\uff66\014\uff66\015\uff66\016\uff66\017" +
    "\uff66\020\uff66\021\uff66\022\uff66\023\uff66\024\uff66\025\uff66" +
    "\026\uff66\027\uff66\030\uff66\031\uff66\032\uff66\033\uff66\034" +
    "\uff66\035\uff66\036\uff66\037\uff66\040\uff66\041\uff66\042\uff66" +
    "\043\uff66\044\uff66\045\uff66\046\uff66\047\uff66\050\uff66\051" +
    "\uff66\052\uff66\053\uff66\054\uff66\056\uff66\057\uff66\060\uff66" +
    "\061\uff66\062\uff66\063\uff66\064\uff66\065\uff66\066\uff66\067" +
    "\uff66\074\uff66\075\uff66\076\uff66\077\uff66\100\uff66\101\uff66" +
    "\102\uff66\103\uff66\104\uff66\105\uff66\106\uff66\113\uff66\116" +
    "\uff66\001\002\000\202\004\uff45\005\uff45\006\uff45\007\uff45" +
    "\010\uff45\011\uff45\012\uff45\013\uff45\014\uff45\015\uff45\016" +
    "\uff45\017\uff45\020\uff45\021\uff45\022\uff45\023\uff45\024\uff45" +
    "\025\uff45\026\uff45\027\uff45\030\uff45\031\uff45\032\uff45\033" +
    "\uff45\034\uff45\035\uff45\036\uff45\037\uff45\040\uff45\041\uff45" +
    "\042\uff45\043\uff45\044\uff45\045\uff45\046\uff45\047\uff45\050" +
    "\uff45\051\uff45\052\uff45\053\uff45\054\uff45\056\uff45\057\uff45" +
    "\060\uff45\061\uff45\062\uff45\063\uff45\064\uff45\065\uff45\066" +
    "\uff45\067\uff45\074\uff45\075\uff45\076\uff45\077\uff45\100\uff45" +
    "\101\uff45\102\uff45\103\uff45\104\uff45\105\uff45\106\uff45\113" +
    "\uff45\116\uff45\001\002\000\202\004\uff41\005\uff41\006\uff41" +
    "\007\uff41\010\uff41\011\uff41\012\uff41\013\uff41\014\uff41\015" +
    "\uff41\016\uff41\017\uff41\020\uff41\021\uff41\022\uff41\023\uff41" +
    "\024\uff41\025\uff41\026\uff41\027\uff41\030\uff41\031\uff41\032" +
    "\uff41\033\uff41\034\uff41\035\uff41\036\uff41\037\uff41\040\uff41" +
    "\041\uff41\042\uff41\043\uff41\044\uff41\045\uff41\046\uff41\047" +
    "\uff41\050\uff41\051\uff41\052\uff41\053\uff41\054\uff41\056\uff41" +
    "\057\uff41\060\uff41\061\uff41\062\uff41\063\uff41\064\uff41\065" +
    "\uff41\066\uff41\067\uff41\074\uff41\075\uff41\076\uff41\077\uff41" +
    "\100\uff41\101\uff41\102\uff41\103\uff41\104\uff41\105\uff41\106" +
    "\uff41\113\uff41\116\uff41\001\002\000\202\004\uff4c\005\uff4c" +
    "\006\uff4c\007\uff4c\010\uff4c\011\uff4c\012\uff4c\013\uff4c\014" +
    "\uff4c\015\uff4c\016\uff4c\017\uff4c\020\uff4c\021\uff4c\022\uff4c" +
    "\023\uff4c\024\uff4c\025\uff4c\026\uff4c\027\uff4c\030\uff4c\031" +
    "\uff4c\032\uff4c\033\uff4c\034\uff4c\035\uff4c\036\uff4c\037\uff4c" +
    "\040\uff4c\041\uff4c\042\uff4c\043\uff4c\044\uff4c\045\uff4c\046" +
    "\uff4c\047\uff4c\050\uff4c\051\uff4c\052\uff4c\053\uff4c\054\uff4c" +
    "\056\uff4c\057\uff4c\060\uff4c\061\uff4c\062\uff4c\063\uff4c\064" +
    "\uff4c\065\uff4c\066\uff4c\067\uff4c\074\uff4c\075\uff4c\076\uff4c" +
    "\077\uff4c\100\uff4c\101\uff4c\102\uff4c\103\uff4c\104\uff4c\105" +
    "\uff4c\106\uff4c\113\uff4c\116\uff4c\001\002\000\202\004\uff46" +
    "\005\uff46\006\uff46\007\uff46\010\uff46\011\uff46\012\uff46\013" +
    "\uff46\014\uff46\015\uff46\016\uff46\017\uff46\020\uff46\021\uff46" +
    "\022\uff46\023\uff46\024\uff46\025\uff46\026\uff46\027\uff46\030" +
    "\uff46\031\uff46\032\uff46\033\uff46\034\uff46\035\uff46\036\uff46" +
    "\037\uff46\040\uff46\041\uff46\042\uff46\043\uff46\044\uff46\045" +
    "\uff46\046\uff46\047\uff46\050\uff46\051\uff46\052\uff46\053\uff46" +
    "\054\uff46\056\uff46\057\uff46\060\uff46\061\uff46\062\uff46\063" +
    "\uff46\064\uff46\065\uff46\066\uff46\067\uff46\074\uff46\075\uff46" +
    "\076\uff46\077\uff46\100\uff46\101\uff46\102\uff46\103\uff46\104" +
    "\uff46\105\uff46\106\uff46\113\uff46\116\uff46\001\002\000\202" +
    "\004\uff4a\005\uff4a\006\uff4a\007\uff4a\010\uff4a\011\uff4a\012" +
    "\uff4a\013\uff4a\014\uff4a\015\uff4a\016\uff4a\017\uff4a\020\uff4a" +
    "\021\uff4a\022\uff4a\023\uff4a\024\uff4a\025\uff4a\026\uff4a\027" +
    "\uff4a\030\uff4a\031\uff4a\032\uff4a\033\uff4a\034\uff4a\035\uff4a" +
    "\036\uff4a\037\uff4a\040\uff4a\041\uff4a\042\uff4a\043\uff4a\044" +
    "\uff4a\045\uff4a\046\uff4a\047\uff4a\050\uff4a\051\uff4a\052\uff4a" +
    "\053\uff4a\054\uff4a\056\uff4a\057\uff4a\060\uff4a\061\uff4a\062" +
    "\uff4a\063\uff4a\064\uff4a\065\uff4a\066\uff4a\067\uff4a\074\uff4a" +
    "\075\uff4a\076\uff4a\077\uff4a\100\uff4a\101\uff4a\102\uff4a\103" +
    "\uff4a\104\uff4a\105\uff4a\106\uff4a\113\uff4a\116\uff4a\001\002" +
    "\000\202\004\uff56\005\uff56\006\uff56\007\uff56\010\uff56\011" +
    "\uff56\012\uff56\013\uff56\014\uff56\015\uff56\016\uff56\017\uff56" +
    "\020\uff56\021\uff56\022\uff56\023\uff56\024\uff56\025\uff56\026" +
    "\uff56\027\uff56\030\uff56\031\uff56\032\uff56\033\uff56\034\uff56" +
    "\035\uff56\036\uff56\037\uff56\040\uff56\041\uff56\042\uff56\043" +
    "\uff56\044\uff56\045\uff56\046\uff56\047\uff56\050\uff56\051\uff56" +
    "\052\uff56\053\uff56\054\uff56\056\uff56\057\uff56\060\uff56\061" +
    "\uff56\062\uff56\063\uff56\064\uff56\065\uff56\066\uff56\067\uff56" +
    "\074\uff56\075\uff56\076\uff56\077\uff56\100\uff56\101\uff56\102" +
    "\uff56\103\uff56\104\uff56\105\uff56\106\uff56\113\uff56\116\uff56" +
    "\001\002\000\004\007\076\001\002\000\202\004\uff5b\005" +
    "\uff5b\006\uff5b\007\uff5b\010\uff5b\011\uff5b\012\uff5b\013\uff5b" +
    "\014\uff5b\015\uff5b\016\uff5b\017\uff5b\020\uff5b\021\uff5b\022" +
    "\uff5b\023\uff5b\024\uff5b\025\uff5b\026\uff5b\027\uff5b\030\uff5b" +
    "\031\uff5b\032\uff5b\033\uff5b\034\uff5b\035\uff5b\036\uff5b\037" +
    "\uff5b\040\uff5b\041\uff5b\042\uff5b\043\uff5b\044\uff5b\045\uff5b" +
    "\046\uff5b\047\uff5b\050\uff5b\051\uff5b\052\uff5b\053\uff5b\054" +
    "\uff5b\056\uff5b\057\uff5b\060\uff5b\061\uff5b\062\uff5b\063\uff5b" +
    "\064\uff5b\065\uff5b\066\uff5b\067\uff5b\074\uff5b\075\uff5b\076" +
    "\uff5b\077\uff5b\100\uff5b\101\uff5b\102\uff5b\103\uff5b\104\uff5b" +
    "\105\uff5b\106\uff5b\113\uff5b\116\uff5b\001\002\000\202\004" +
    "\337\005\267\006\257\007\254\010\345\011\340\012\351" +
    "\013\342\014\255\015\265\016\311\017\320\020\324\021" +
    "\307\022\323\023\322\024\272\025\247\026\336\027\305" +
    "\030\300\031\325\032\256\033\346\034\260\035\350\036" +
    "\347\037\253\040\326\041\330\042\251\043\343\044\321" +
    "\045\270\046\250\047\306\050\252\051\uff78\052\276\053" +
    "\341\054\263\056\275\057\274\060\301\061\277\062\261" +
    "\063\335\064\304\065\302\066\314\067\317\074\246\075" +
    "\331\076\310\077\334\100\333\101\316\102\303\103\313" +
    "\104\312\105\273\106\266\113\327\116\332\001\002\000" +
    "\202\004\uff40\005\uff40\006\uff40\007\uff40\010\uff40\011\uff40" +
    "\012\uff40\013\uff40\014\uff40\015\uff40\016\uff40\017\uff40\020" +
    "\uff40\021\uff40\022\uff40\023\uff40\024\uff40\025\uff40\026\uff40" +
    "\027\uff40\030\uff40\031\uff40\032\uff40\033\uff40\034\uff40\035" +
    "\uff40\036\uff40\037\uff40\040\uff40\041\uff40\042\uff40\043\uff40" +
    "\044\uff40\045\uff40\046\uff40\047\uff40\050\uff40\051\uff40\052" +
    "\uff40\053\uff40\054\uff40\056\uff40\057\uff40\060\uff40\061\uff40" +
    "\062\uff40\063\uff40\064\uff40\065\uff40\066\uff40\067\uff40\074" +
    "\uff40\075\uff40\076\uff40\077\uff40\100\uff40\101\uff40\102\uff40" +
    "\103\uff40\104\uff40\105\uff40\106\uff40\113\uff40\116\uff40\001" +
    "\002\000\202\004\uff75\005\uff75\006\uff75\007\uff75\010\uff75" +
    "\011\uff75\012\uff75\013\uff75\014\uff75\015\uff75\016\uff75\017" +
    "\uff75\020\uff75\021\uff75\022\uff75\023\uff75\024\uff75\025\uff75" +
    "\026\uff75\027\uff75\030\uff75\031\uff75\032\uff75\033\uff75\034" +
    "\uff75\035\uff75\036\uff75\037\uff75\040\uff75\041\uff75\042\uff75" +
    "\043\uff75\044\uff75\045\uff75\046\uff75\047\uff75\050\uff75\051" +
    "\uff75\052\uff75\053\uff75\054\uff75\056\uff75\057\uff75\060\uff75" +
    "\061\uff75\062\uff75\063\uff75\064\uff75\065\uff75\066\uff75\067" +
    "\uff75\074\uff75\075\uff75\076\uff75\077\uff75\100\uff75\101\uff75" +
    "\102\uff75\103\uff75\104\uff75\105\uff75\106\uff75\113\uff75\116" +
    "\uff75\001\002\000\202\004\uff47\005\uff47\006\uff47\007\uff47" +
    "\010\uff47\011\uff47\012\uff47\013\uff47\014\uff47\015\uff47\016" +
    "\uff47\017\uff47\020\uff47\021\uff47\022\uff47\023\uff47\024\uff47" +
    "\025\uff47\026\uff47\027\uff47\030\uff47\031\uff47\032\uff47\033" +
    "\uff47\034\uff47\035\uff47\036\uff47\037\uff47\040\uff47\041\uff47" +
    "\042\uff47\043\uff47\044\uff47\045\uff47\046\uff47\047\uff47\050" +
    "\uff47\051\uff47\052\uff47\053\uff47\054\uff47\056\uff47\057\uff47" +
    "\060\uff47\061\uff47\062\uff47\063\uff47\064\uff47\065\uff47\066" +
    "\uff47\067\uff47\074\uff47\075\uff47\076\uff47\077\uff47\100\uff47" +
    "\101\uff47\102\uff47\103\uff47\104\uff47\105\uff47\106\uff47\113" +
    "\uff47\116\uff47\001\002\000\202\004\uff5f\005\uff5f\006\uff5f" +
    "\007\uff5f\010\uff5f\011\uff5f\012\uff5f\013\uff5f\014\uff5f\015" +
    "\uff5f\016\uff5f\017\uff5f\020\uff5f\021\uff5f\022\uff5f\023\uff5f" +
    "\024\uff5f\025\uff5f\026\uff5f\027\uff5f\030\uff5f\031\uff5f\032" +
    "\uff5f\033\uff5f\034\uff5f\035\uff5f\036\uff5f\037\uff5f\040\uff5f" +
    "\041\uff5f\042\uff5f\043\uff5f\044\uff5f\045\uff5f\046\uff5f\047" +
    "\uff5f\050\uff5f\051\uff5f\052\uff5f\053\uff5f\054\uff5f\056\uff5f" +
    "\057\uff5f\060\uff5f\061\uff5f\062\uff5f\063\uff5f\064\uff5f\065" +
    "\uff5f\066\uff5f\067\uff5f\074\uff5f\075\uff5f\076\uff5f\077\uff5f" +
    "\100\uff5f\101\uff5f\102\uff5f\103\uff5f\104\uff5f\105\uff5f\106" +
    "\uff5f\113\uff5f\116\uff5f\001\002\000\004\051\352\001\002" +
    "\000\202\004\uff6e\005\uff6e\006\uff6e\007\uff6e\010\uff6e\011" +
    "\uff6e\012\uff6e\013\uff6e\014\uff6e\015\uff6e\016\uff6e\017\uff6e" +
    "\020\uff6e\021\uff6e\022\uff6e\023\uff6e\024\uff6e\025\uff6e\026" +
    "\uff6e\027\uff6e\030\uff6e\031\uff6e\032\uff6e\033\uff6e\034\uff6e" +
    "\035\uff6e\036\uff6e\037\uff6e\040\uff6e\041\uff6e\042\uff6e\043" +
    "\uff6e\044\uff6e\045\uff6e\046\uff6e\047\uff6e\050\uff6e\051\uff6e" +
    "\052\uff6e\053\uff6e\054\uff6e\056\uff6e\057\uff6e\060\uff6e\061" +
    "\uff6e\062\uff6e\063\uff6e\064\uff6e\065\uff6e\066\uff6e\067\uff6e" +
    "\074\uff6e\075\uff6e\076\uff6e\077\uff6e\100\uff6e\101\uff6e\102" +
    "\uff6e\103\uff6e\104\uff6e\105\uff6e\106\uff6e\113\uff6e\116\uff6e" +
    "\001\002\000\202\004\uff76\005\uff76\006\uff76\007\uff76\010" +
    "\uff76\011\uff76\012\uff76\013\uff76\014\uff76\015\uff76\016\uff76" +
    "\017\uff76\020\uff76\021\uff76\022\uff76\023\uff76\024\uff76\025" +
    "\uff76\026\uff76\027\uff76\030\uff76\031\uff76\032\uff76\033\uff76" +
    "\034\uff76\035\uff76\036\uff76\037\uff76\040\uff76\041\uff76\042" +
    "\uff76\043\uff76\044\uff76\045\uff76\046\uff76\047\uff76\050\uff76" +
    "\051\uff76\052\uff76\053\uff76\054\uff76\056\uff76\057\uff76\060" +
    "\uff76\061\uff76\062\uff76\063\uff76\064\uff76\065\uff76\066\uff76" +
    "\067\uff76\074\uff76\075\uff76\076\uff76\077\uff76\100\uff76\101" +
    "\uff76\102\uff76\103\uff76\104\uff76\105\uff76\106\uff76\113\uff76" +
    "\116\uff76\001\002\000\202\004\uff59\005\uff59\006\uff59\007" +
    "\uff59\010\uff59\011\uff59\012\uff59\013\uff59\014\uff59\015\uff59" +
    "\016\uff59\017\uff59\020\uff59\021\uff59\022\uff59\023\uff59\024" +
    "\uff59\025\uff59\026\uff59\027\uff59\030\uff59\031\uff59\032\uff59" +
    "\033\uff59\034\uff59\035\uff59\036\uff59\037\uff59\040\uff59\041" +
    "\uff59\042\uff59\043\uff59\044\uff59\045\uff59\046\uff59\047\uff59" +
    "\050\uff59\051\uff59\052\uff59\053\uff59\054\uff59\056\uff59\057" +
    "\uff59\060\uff59\061\uff59\062\uff59\063\uff59\064\uff59\065\uff59" +
    "\066\uff59\067\uff59\074\uff59\075\uff59\076\uff59\077\uff59\100" +
    "\uff59\101\uff59\102\uff59\103\uff59\104\uff59\105\uff59\106\uff59" +
    "\113\uff59\116\uff59\001\002\000\202\004\uff5a\005\uff5a\006" +
    "\uff5a\007\uff5a\010\uff5a\011\uff5a\012\uff5a\013\uff5a\014\uff5a" +
    "\015\uff5a\016\uff5a\017\uff5a\020\uff5a\021\uff5a\022\uff5a\023" +
    "\uff5a\024\uff5a\025\uff5a\026\uff5a\027\uff5a\030\uff5a\031\uff5a" +
    "\032\uff5a\033\uff5a\034\uff5a\035\uff5a\036\uff5a\037\uff5a\040" +
    "\uff5a\041\uff5a\042\uff5a\043\uff5a\044\uff5a\045\uff5a\046\uff5a" +
    "\047\uff5a\050\uff5a\051\uff5a\052\uff5a\053\uff5a\054\uff5a\056" +
    "\uff5a\057\uff5a\060\uff5a\061\uff5a\062\uff5a\063\uff5a\064\uff5a" +
    "\065\uff5a\066\uff5a\067\uff5a\074\uff5a\075\uff5a\076\uff5a\077" +
    "\uff5a\100\uff5a\101\uff5a\102\uff5a\103\uff5a\104\uff5a\105\uff5a" +
    "\106\uff5a\113\uff5a\116\uff5a\001\002\000\202\004\uff3e\005" +
    "\uff3e\006\uff3e\007\uff3e\010\uff3e\011\uff3e\012\uff3e\013\uff3e" +
    "\014\uff3e\015\uff3e\016\uff3e\017\uff3e\020\uff3e\021\uff3e\022" +
    "\uff3e\023\uff3e\024\uff3e\025\uff3e\026\uff3e\027\uff3e\030\uff3e" +
    "\031\uff3e\032\uff3e\033\uff3e\034\uff3e\035\uff3e\036\uff3e\037" +
    "\uff3e\040\uff3e\041\uff3e\042\uff3e\043\uff3e\044\uff3e\045\uff3e" +
    "\046\uff3e\047\uff3e\050\uff3e\051\uff3e\052\uff3e\053\uff3e\054" +
    "\uff3e\056\uff3e\057\uff3e\060\uff3e\061\uff3e\062\uff3e\063\uff3e" +
    "\064\uff3e\065\uff3e\066\uff3e\067\uff3e\074\uff3e\075\uff3e\076" +
    "\uff3e\077\uff3e\100\uff3e\101\uff3e\102\uff3e\103\uff3e\104\uff3e" +
    "\105\uff3e\106\uff3e\113\uff3e\116\uff3e\001\002\000\202\004" +
    "\uff57\005\uff57\006\uff57\007\uff57\010\uff57\011\uff57\012\uff57" +
    "\013\uff57\014\uff57\015\uff57\016\uff57\017\uff57\020\uff57\021" +
    "\uff57\022\uff57\023\uff57\024\uff57\025\uff57\026\uff57\027\uff57" +
    "\030\uff57\031\uff57\032\uff57\033\uff57\034\uff57\035\uff57\036" +
    "\uff57\037\uff57\040\uff57\041\uff57\042\uff57\043\uff57\044\uff57" +
    "\045\uff57\046\uff57\047\uff57\050\uff57\051\uff57\052\uff57\053" +
    "\uff57\054\uff57\056\uff57\057\uff57\060\uff57\061\uff57\062\uff57" +
    "\063\uff57\064\uff57\065\uff57\066\uff57\067\uff57\074\uff57\075" +
    "\uff57\076\uff57\077\uff57\100\uff57\101\uff57\102\uff57\103\uff57" +
    "\104\uff57\105\uff57\106\uff57\113\uff57\116\uff57\001\002\000" +
    "\202\004\uff6a\005\uff6a\006\uff6a\007\uff6a\010\uff6a\011\uff6a" +
    "\012\uff6a\013\uff6a\014\uff6a\015\uff6a\016\uff6a\017\uff6a\020" +
    "\uff6a\021\uff6a\022\uff6a\023\uff6a\024\uff6a\025\uff6a\026\uff6a" +
    "\027\uff6a\030\uff6a\031\uff6a\032\uff6a\033\uff6a\034\uff6a\035" +
    "\uff6a\036\uff6a\037\uff6a\040\uff6a\041\uff6a\042\uff6a\043\uff6a" +
    "\044\uff6a\045\uff6a\046\uff6a\047\uff6a\050\uff6a\051\uff6a\052" +
    "\uff6a\053\uff6a\054\uff6a\056\uff6a\057\uff6a\060\uff6a\061\uff6a" +
    "\062\uff6a\063\uff6a\064\uff6a\065\uff6a\066\uff6a\067\uff6a\074" +
    "\uff6a\075\uff6a\076\uff6a\077\uff6a\100\uff6a\101\uff6a\102\uff6a" +
    "\103\uff6a\104\uff6a\105\uff6a\106\uff6a\113\uff6a\116\uff6a\001" +
    "\002\000\202\004\uff58\005\uff58\006\uff58\007\uff58\010\uff58" +
    "\011\uff58\012\uff58\013\uff58\014\uff58\015\uff58\016\uff58\017" +
    "\uff58\020\uff58\021\uff58\022\uff58\023\uff58\024\uff58\025\uff58" +
    "\026\uff58\027\uff58\030\uff58\031\uff58\032\uff58\033\uff58\034" +
    "\uff58\035\uff58\036\uff58\037\uff58\040\uff58\041\uff58\042\uff58" +
    "\043\uff58\044\uff58\045\uff58\046\uff58\047\uff58\050\uff58\051" +
    "\uff58\052\uff58\053\uff58\054\uff58\056\uff58\057\uff58\060\uff58" +
    "\061\uff58\062\uff58\063\uff58\064\uff58\065\uff58\066\uff58\067" +
    "\uff58\074\uff58\075\uff58\076\uff58\077\uff58\100\uff58\101\uff58" +
    "\102\uff58\103\uff58\104\uff58\105\uff58\106\uff58\113\uff58\116" +
    "\uff58\001\002\000\202\004\uff54\005\uff54\006\uff54\007\uff54" +
    "\010\uff54\011\uff54\012\uff54\013\uff54\014\uff54\015\uff54\016" +
    "\uff54\017\uff54\020\uff54\021\uff54\022\uff54\023\uff54\024\uff54" +
    "\025\uff54\026\uff54\027\uff54\030\uff54\031\uff54\032\uff54\033" +
    "\uff54\034\uff54\035\uff54\036\uff54\037\uff54\040\uff54\041\uff54" +
    "\042\uff54\043\uff54\044\uff54\045\uff54\046\uff54\047\uff54\050" +
    "\uff54\051\uff54\052\uff54\053\uff54\054\uff54\056\uff54\057\uff54" +
    "\060\uff54\061\uff54\062\uff54\063\uff54\064\uff54\065\uff54\066" +
    "\uff54\067\uff54\074\uff54\075\uff54\076\uff54\077\uff54\100\uff54" +
    "\101\uff54\102\uff54\103\uff54\104\uff54\105\uff54\106\uff54\113" +
    "\uff54\116\uff54\001\002\000\202\004\uff3b\005\uff3b\006\uff3b" +
    "\007\uff3b\010\uff3b\011\uff3b\012\uff3b\013\uff3b\014\uff3b\015" +
    "\uff3b\016\uff3b\017\uff3b\020\uff3b\021\uff3b\022\uff3b\023\uff3b" +
    "\024\uff3b\025\uff3b\026\uff3b\027\uff3b\030\uff3b\031\uff3b\032" +
    "\uff3b\033\uff3b\034\uff3b\035\uff3b\036\uff3b\037\uff3b\040\uff3b" +
    "\041\uff3b\042\uff3b\043\uff3b\044\uff3b\045\uff3b\046\uff3b\047" +
    "\uff3b\050\uff3b\051\uff3b\052\uff3b\053\uff3b\054\uff3b\056\uff3b" +
    "\057\uff3b\060\uff3b\061\uff3b\062\uff3b\063\uff3b\064\uff3b\065" +
    "\uff3b\066\uff3b\067\uff3b\074\uff3b\075\uff3b\076\uff3b\077\uff3b" +
    "\100\uff3b\101\uff3b\102\uff3b\103\uff3b\104\uff3b\105\uff3b\106" +
    "\uff3b\113\uff3b\116\uff3b\001\002\000\202\004\uff55\005\uff55" +
    "\006\uff55\007\uff55\010\uff55\011\uff55\012\uff55\013\uff55\014" +
    "\uff55\015\uff55\016\uff55\017\uff55\020\uff55\021\uff55\022\uff55" +
    "\023\uff55\024\uff55\025\uff55\026\uff55\027\uff55\030\uff55\031" +
    "\uff55\032\uff55\033\uff55\034\uff55\035\uff55\036\uff55\037\uff55" +
    "\040\uff55\041\uff55\042\uff55\043\uff55\044\uff55\045\uff55\046" +
    "\uff55\047\uff55\050\uff55\051\uff55\052\uff55\053\uff55\054\uff55" +
    "\056\uff55\057\uff55\060\uff55\061\uff55\062\uff55\063\uff55\064" +
    "\uff55\065\uff55\066\uff55\067\uff55\074\uff55\075\uff55\076\uff55" +
    "\077\uff55\100\uff55\101\uff55\102\uff55\103\uff55\104\uff55\105" +
    "\uff55\106\uff55\113\uff55\116\uff55\001\002\000\202\004\uff6b" +
    "\005\uff6b\006\uff6b\007\uff6b\010\uff6b\011\uff6b\012\uff6b\013" +
    "\uff6b\014\uff6b\015\uff6b\016\uff6b\017\uff6b\020\uff6b\021\uff6b" +
    "\022\uff6b\023\uff6b\024\uff6b\025\uff6b\026\uff6b\027\uff6b\030" +
    "\uff6b\031\uff6b\032\uff6b\033\uff6b\034\uff6b\035\uff6b\036\uff6b" +
    "\037\uff6b\040\uff6b\041\uff6b\042\uff6b\043\uff6b\044\uff6b\045" +
    "\uff6b\046\uff6b\047\uff6b\050\uff6b\051\uff6b\052\uff6b\053\uff6b" +
    "\054\uff6b\056\uff6b\057\uff6b\060\uff6b\061\uff6b\062\uff6b\063" +
    "\uff6b\064\uff6b\065\uff6b\066\uff6b\067\uff6b\074\uff6b\075\uff6b" +
    "\076\uff6b\077\uff6b\100\uff6b\101\uff6b\102\uff6b\103\uff6b\104" +
    "\uff6b\105\uff6b\106\uff6b\113\uff6b\116\uff6b\001\002\000\202" +
    "\004\uff5d\005\uff5d\006\uff5d\007\uff5d\010\uff5d\011\uff5d\012" +
    "\uff5d\013\uff5d\014\uff5d\015\uff5d\016\uff5d\017\uff5d\020\uff5d" +
    "\021\uff5d\022\uff5d\023\uff5d\024\uff5d\025\uff5d\026\uff5d\027" +
    "\uff5d\030\uff5d\031\uff5d\032\uff5d\033\uff5d\034\uff5d\035\uff5d" +
    "\036\uff5d\037\uff5d\040\uff5d\041\uff5d\042\uff5d\043\uff5d\044" +
    "\uff5d\045\uff5d\046\uff5d\047\uff5d\050\uff5d\051\uff5d\052\uff5d" +
    "\053\uff5d\054\uff5d\056\uff5d\057\uff5d\060\uff5d\061\uff5d\062" +
    "\uff5d\063\uff5d\064\uff5d\065\uff5d\066\uff5d\067\uff5d\074\uff5d" +
    "\075\uff5d\076\uff5d\077\uff5d\100\uff5d\101\uff5d\102\uff5d\103" +
    "\uff5d\104\uff5d\105\uff5d\106\uff5d\113\uff5d\116\uff5d\001\002" +
    "\000\202\004\uff71\005\uff71\006\uff71\007\uff71\010\uff71\011" +
    "\uff71\012\uff71\013\uff71\014\uff71\015\uff71\016\uff71\017\uff71" +
    "\020\uff71\021\uff71\022\uff71\023\uff71\024\uff71\025\uff71\026" +
    "\uff71\027\uff71\030\uff71\031\uff71\032\uff71\033\uff71\034\uff71" +
    "\035\uff71\036\uff71\037\uff71\040\uff71\041\uff71\042\uff71\043" +
    "\uff71\044\uff71\045\uff71\046\uff71\047\uff71\050\uff71\051\uff71" +
    "\052\uff71\053\uff71\054\uff71\056\uff71\057\uff71\060\uff71\061" +
    "\uff71\062\uff71\063\uff71\064\uff71\065\uff71\066\uff71\067\uff71" +
    "\074\uff71\075\uff71\076\uff71\077\uff71\100\uff71\101\uff71\102" +
    "\uff71\103\uff71\104\uff71\105\uff71\106\uff71\113\uff71\116\uff71" +
    "\001\002\000\202\004\uff4f\005\uff4f\006\uff4f\007\uff4f\010" +
    "\uff4f\011\uff4f\012\uff4f\013\uff4f\014\uff4f\015\uff4f\016\uff4f" +
    "\017\uff4f\020\uff4f\021\uff4f\022\uff4f\023\uff4f\024\uff4f\025" +
    "\uff4f\026\uff4f\027\uff4f\030\uff4f\031\uff4f\032\uff4f\033\uff4f" +
    "\034\uff4f\035\uff4f\036\uff4f\037\uff4f\040\uff4f\041\uff4f\042" +
    "\uff4f\043\uff4f\044\uff4f\045\uff4f\046\uff4f\047\uff4f\050\uff4f" +
    "\051\uff4f\052\uff4f\053\uff4f\054\uff4f\056\uff4f\057\uff4f\060" +
    "\uff4f\061\uff4f\062\uff4f\063\uff4f\064\uff4f\065\uff4f\066\uff4f" +
    "\067\uff4f\074\uff4f\075\uff4f\076\uff4f\077\uff4f\100\uff4f\101" +
    "\uff4f\102\uff4f\103\uff4f\104\uff4f\105\uff4f\106\uff4f\113\uff4f" +
    "\116\uff4f\001\002\000\202\004\uff3f\005\uff3f\006\uff3f\007" +
    "\uff3f\010\uff3f\011\uff3f\012\uff3f\013\uff3f\014\uff3f\015\uff3f" +
    "\016\uff3f\017\uff3f\020\uff3f\021\uff3f\022\uff3f\023\uff3f\024" +
    "\uff3f\025\uff3f\026\uff3f\027\uff3f\030\uff3f\031\uff3f\032\uff3f" +
    "\033\uff3f\034\uff3f\035\uff3f\036\uff3f\037\uff3f\040\uff3f\041" +
    "\uff3f\042\uff3f\043\uff3f\044\uff3f\045\uff3f\046\uff3f\047\uff3f" +
    "\050\uff3f\051\uff3f\052\uff3f\053\uff3f\054\uff3f\056\uff3f\057" +
    "\uff3f\060\uff3f\061\uff3f\062\uff3f\063\uff3f\064\uff3f\065\uff3f" +
    "\066\uff3f\067\uff3f\074\uff3f\075\uff3f\076\uff3f\077\uff3f\100" +
    "\uff3f\101\uff3f\102\uff3f\103\uff3f\104\uff3f\105\uff3f\106\uff3f" +
    "\113\uff3f\116\uff3f\001\002\000\202\004\uff39\005\uff39\006" +
    "\uff39\007\uff39\010\uff39\011\uff39\012\uff39\013\uff39\014\uff39" +
    "\015\uff39\016\uff39\017\uff39\020\uff39\021\uff39\022\uff39\023" +
    "\uff39\024\uff39\025\uff39\026\uff39\027\uff39\030\uff39\031\uff39" +
    "\032\uff39\033\uff39\034\uff39\035\uff39\036\uff39\037\uff39\040" +
    "\uff39\041\uff39\042\uff39\043\uff39\044\uff39\045\uff39\046\uff39" +
    "\047\uff39\050\uff39\051\uff39\052\uff39\053\uff39\054\uff39\056" +
    "\uff39\057\uff39\060\uff39\061\uff39\062\uff39\063\uff39\064\uff39" +
    "\065\uff39\066\uff39\067\uff39\074\uff39\075\uff39\076\uff39\077" +
    "\uff39\100\uff39\101\uff39\102\uff39\103\uff39\104\uff39\105\uff39" +
    "\106\uff39\113\uff39\116\uff39\001\002\000\202\004\uff3a\005" +
    "\uff3a\006\uff3a\007\uff3a\010\uff3a\011\uff3a\012\uff3a\013\uff3a" +
    "\014\uff3a\015\uff3a\016\uff3a\017\uff3a\020\uff3a\021\uff3a\022" +
    "\uff3a\023\uff3a\024\uff3a\025\uff3a\026\uff3a\027\uff3a\030\uff3a" +
    "\031\uff3a\032\uff3a\033\uff3a\034\uff3a\035\uff3a\036\uff3a\037" +
    "\uff3a\040\uff3a\041\uff3a\042\uff3a\043\uff3a\044\uff3a\045\uff3a" +
    "\046\uff3a\047\uff3a\050\uff3a\051\uff3a\052\uff3a\053\uff3a\054" +
    "\uff3a\056\uff3a\057\uff3a\060\uff3a\061\uff3a\062\uff3a\063\uff3a" +
    "\064\uff3a\065\uff3a\066\uff3a\067\uff3a\074\uff3a\075\uff3a\076" +
    "\uff3a\077\uff3a\100\uff3a\101\uff3a\102\uff3a\103\uff3a\104\uff3a" +
    "\105\uff3a\106\uff3a\113\uff3a\116\uff3a\001\002\000\202\004" +
    "\uff53\005\uff53\006\uff53\007\uff53\010\uff53\011\uff53\012\uff53" +
    "\013\uff53\014\uff53\015\uff53\016\uff53\017\uff53\020\uff53\021" +
    "\uff53\022\uff53\023\uff53\024\uff53\025\uff53\026\uff53\027\uff53" +
    "\030\uff53\031\uff53\032\uff53\033\uff53\034\uff53\035\uff53\036" +
    "\uff53\037\uff53\040\uff53\041\uff53\042\uff53\043\uff53\044\uff53" +
    "\045\uff53\046\uff53\047\uff53\050\uff53\051\uff53\052\uff53\053" +
    "\uff53\054\uff53\056\uff53\057\uff53\060\uff53\061\uff53\062\uff53" +
    "\063\uff53\064\uff53\065\uff53\066\uff53\067\uff53\074\uff53\075" +
    "\uff53\076\uff53\077\uff53\100\uff53\101\uff53\102\uff53\103\uff53" +
    "\104\uff53\105\uff53\106\uff53\113\uff53\116\uff53\001\002\000" +
    "\004\051\uff79\001\002\000\202\004\uff3c\005\uff3c\006\uff3c" +
    "\007\uff3c\010\uff3c\011\uff3c\012\uff3c\013\uff3c\014\uff3c\015" +
    "\uff3c\016\uff3c\017\uff3c\020\uff3c\021\uff3c\022\uff3c\023\uff3c" +
    "\024\uff3c\025\uff3c\026\uff3c\027\uff3c\030\uff3c\031\uff3c\032" +
    "\uff3c\033\uff3c\034\uff3c\035\uff3c\036\uff3c\037\uff3c\040\uff3c" +
    "\041\uff3c\042\uff3c\043\uff3c\044\uff3c\045\uff3c\046\uff3c\047" +
    "\uff3c\050\uff3c\051\uff3c\052\uff3c\053\uff3c\054\uff3c\056\uff3c" +
    "\057\uff3c\060\uff3c\061\uff3c\062\uff3c\063\uff3c\064\uff3c\065" +
    "\uff3c\066\uff3c\067\uff3c\074\uff3c\075\uff3c\076\uff3c\077\uff3c" +
    "\100\uff3c\101\uff3c\102\uff3c\103\uff3c\104\uff3c\105\uff3c\106" +
    "\uff3c\113\uff3c\116\uff3c\001\002\000\202\004\uff52\005\uff52" +
    "\006\uff52\007\uff52\010\uff52\011\uff52\012\uff52\013\uff52\014" +
    "\uff52\015\uff52\016\uff52\017\uff52\020\uff52\021\uff52\022\uff52" +
    "\023\uff52\024\uff52\025\uff52\026\uff52\027\uff52\030\uff52\031" +
    "\uff52\032\uff52\033\uff52\034\uff52\035\uff52\036\uff52\037\uff52" +
    "\040\uff52\041\uff52\042\uff52\043\uff52\044\uff52\045\uff52\046" +
    "\uff52\047\uff52\050\uff52\051\uff52\052\uff52\053\uff52\054\uff52" +
    "\056\uff52\057\uff52\060\uff52\061\uff52\062\uff52\063\uff52\064" +
    "\uff52\065\uff52\066\uff52\067\uff52\074\uff52\075\uff52\076\uff52" +
    "\077\uff52\100\uff52\101\uff52\102\uff52\103\uff52\104\uff52\105" +
    "\uff52\106\uff52\113\uff52\116\uff52\001\002\000\202\004\uff73" +
    "\005\uff73\006\uff73\007\uff73\010\uff73\011\uff73\012\uff73\013" +
    "\uff73\014\uff73\015\uff73\016\uff73\017\uff73\020\uff73\021\uff73" +
    "\022\uff73\023\uff73\024\uff73\025\uff73\026\uff73\027\uff73\030" +
    "\uff73\031\uff73\032\uff73\033\uff73\034\uff73\035\uff73\036\uff73" +
    "\037\uff73\040\uff73\041\uff73\042\uff73\043\uff73\044\uff73\045" +
    "\uff73\046\uff73\047\uff73\050\uff73\051\uff73\052\uff73\053\uff73" +
    "\054\uff73\056\uff73\057\uff73\060\uff73\061\uff73\062\uff73\063" +
    "\uff73\064\uff73\065\uff73\066\uff73\067\uff73\074\uff73\075\uff73" +
    "\076\uff73\077\uff73\100\uff73\101\uff73\102\uff73\103\uff73\104" +
    "\uff73\105\uff73\106\uff73\113\uff73\116\uff73\001\002\000\202" +
    "\004\uff61\005\uff61\006\uff61\007\uff61\010\uff61\011\uff61\012" +
    "\uff61\013\uff61\014\uff61\015\uff61\016\uff61\017\uff61\020\uff61" +
    "\021\uff61\022\uff61\023\uff61\024\uff61\025\uff61\026\uff61\027" +
    "\uff61\030\uff61\031\uff61\032\uff61\033\uff61\034\uff61\035\uff61" +
    "\036\uff61\037\uff61\040\uff61\041\uff61\042\uff61\043\uff61\044" +
    "\uff61\045\uff61\046\uff61\047\uff61\050\uff61\051\uff61\052\uff61" +
    "\053\uff61\054\uff61\056\uff61\057\uff61\060\uff61\061\uff61\062" +
    "\uff61\063\uff61\064\uff61\065\uff61\066\uff61\067\uff61\074\uff61" +
    "\075\uff61\076\uff61\077\uff61\100\uff61\101\uff61\102\uff61\103" +
    "\uff61\104\uff61\105\uff61\106\uff61\113\uff61\116\uff61\001\002" +
    "\000\202\004\uff6f\005\uff6f\006\uff6f\007\uff6f\010\uff6f\011" +
    "\uff6f\012\uff6f\013\uff6f\014\uff6f\015\uff6f\016\uff6f\017\uff6f" +
    "\020\uff6f\021\uff6f\022\uff6f\023\uff6f\024\uff6f\025\uff6f\026" +
    "\uff6f\027\uff6f\030\uff6f\031\uff6f\032\uff6f\033\uff6f\034\uff6f" +
    "\035\uff6f\036\uff6f\037\uff6f\040\uff6f\041\uff6f\042\uff6f\043" +
    "\uff6f\044\uff6f\045\uff6f\046\uff6f\047\uff6f\050\uff6f\051\uff6f" +
    "\052\uff6f\053\uff6f\054\uff6f\056\uff6f\057\uff6f\060\uff6f\061" +
    "\uff6f\062\uff6f\063\uff6f\064\uff6f\065\uff6f\066\uff6f\067\uff6f" +
    "\074\uff6f\075\uff6f\076\uff6f\077\uff6f\100\uff6f\101\uff6f\102" +
    "\uff6f\103\uff6f\104\uff6f\105\uff6f\106\uff6f\113\uff6f\116\uff6f" +
    "\001\002\000\202\004\uff70\005\uff70\006\uff70\007\uff70\010" +
    "\uff70\011\uff70\012\uff70\013\uff70\014\uff70\015\uff70\016\uff70" +
    "\017\uff70\020\uff70\021\uff70\022\uff70\023\uff70\024\uff70\025" +
    "\uff70\026\uff70\027\uff70\030\uff70\031\uff70\032\uff70\033\uff70" +
    "\034\uff70\035\uff70\036\uff70\037\uff70\040\uff70\041\uff70\042" +
    "\uff70\043\uff70\044\uff70\045\uff70\046\uff70\047\uff70\050\uff70" +
    "\051\uff70\052\uff70\053\uff70\054\uff70\056\uff70\057\uff70\060" +
    "\uff70\061\uff70\062\uff70\063\uff70\064\uff70\065\uff70\066\uff70" +
    "\067\uff70\074\uff70\075\uff70\076\uff70\077\uff70\100\uff70\101" +
    "\uff70\102\uff70\103\uff70\104\uff70\105\uff70\106\uff70\113\uff70" +
    "\116\uff70\001\002\000\202\004\uff72\005\uff72\006\uff72\007" +
    "\uff72\010\uff72\011\uff72\012\uff72\013\uff72\014\uff72\015\uff72" +
    "\016\uff72\017\uff72\020\uff72\021\uff72\022\uff72\023\uff72\024" +
    "\uff72\025\uff72\026\uff72\027\uff72\030\uff72\031\uff72\032\uff72" +
    "\033\uff72\034\uff72\035\uff72\036\uff72\037\uff72\040\uff72\041" +
    "\uff72\042\uff72\043\uff72\044\uff72\045\uff72\046\uff72\047\uff72" +
    "\050\uff72\051\uff72\052\uff72\053\uff72\054\uff72\056\uff72\057" +
    "\uff72\060\uff72\061\uff72\062\uff72\063\uff72\064\uff72\065\uff72" +
    "\066\uff72\067\uff72\074\uff72\075\uff72\076\uff72\077\uff72\100" +
    "\uff72\101\uff72\102\uff72\103\uff72\104\uff72\105\uff72\106\uff72" +
    "\113\uff72\116\uff72\001\002\000\202\004\uff69\005\uff69\006" +
    "\uff69\007\uff69\010\uff69\011\uff69\012\uff69\013\uff69\014\uff69" +
    "\015\uff69\016\uff69\017\uff69\020\uff69\021\uff69\022\uff69\023" +
    "\uff69\024\uff69\025\uff69\026\uff69\027\uff69\030\uff69\031\uff69" +
    "\032\uff69\033\uff69\034\uff69\035\uff69\036\uff69\037\uff69\040" +
    "\uff69\041\uff69\042\uff69\043\uff69\044\uff69\045\uff69\046\uff69" +
    "\047\uff69\050\uff69\051\uff69\052\uff69\053\uff69\054\uff69\056" +
    "\uff69\057\uff69\060\uff69\061\uff69\062\uff69\063\uff69\064\uff69" +
    "\065\uff69\066\uff69\067\uff69\074\uff69\075\uff69\076\uff69\077" +
    "\uff69\100\uff69\101\uff69\102\uff69\103\uff69\104\uff69\105\uff69" +
    "\106\uff69\113\uff69\116\uff69\001\002\000\202\004\uff65\005" +
    "\uff65\006\uff65\007\uff65\010\uff65\011\uff65\012\uff65\013\uff65" +
    "\014\uff65\015\uff65\016\uff65\017\uff65\020\uff65\021\uff65\022" +
    "\uff65\023\uff65\024\uff65\025\uff65\026\uff65\027\uff65\030\uff65" +
    "\031\uff65\032\uff65\033\uff65\034\uff65\035\uff65\036\uff65\037" +
    "\uff65\040\uff65\041\uff65\042\uff65\043\uff65\044\uff65\045\uff65" +
    "\046\uff65\047\uff65\050\uff65\051\uff65\052\uff65\053\uff65\054" +
    "\uff65\056\uff65\057\uff65\060\uff65\061\uff65\062\uff65\063\uff65" +
    "\064\uff65\065\uff65\066\uff65\067\uff65\074\uff65\075\uff65\076" +
    "\uff65\077\uff65\100\uff65\101\uff65\102\uff65\103\uff65\104\uff65" +
    "\105\uff65\106\uff65\113\uff65\116\uff65\001\002\000\202\004" +
    "\uff77\005\uff77\006\uff77\007\uff77\010\uff77\011\uff77\012\uff77" +
    "\013\uff77\014\uff77\015\uff77\016\uff77\017\uff77\020\uff77\021" +
    "\uff77\022\uff77\023\uff77\024\uff77\025\uff77\026\uff77\027\uff77" +
    "\030\uff77\031\uff77\032\uff77\033\uff77\034\uff77\035\uff77\036" +
    "\uff77\037\uff77\040\uff77\041\uff77\042\uff77\043\uff77\044\uff77" +
    "\045\uff77\046\uff77\047\uff77\050\uff77\051\uff77\052\uff77\053" +
    "\uff77\054\uff77\056\uff77\057\uff77\060\uff77\061\uff77\062\uff77" +
    "\063\uff77\064\uff77\065\uff77\066\uff77\067\uff77\074\uff77\075" +
    "\uff77\076\uff77\077\uff77\100\uff77\101\uff77\102\uff77\103\uff77" +
    "\104\uff77\105\uff77\106\uff77\113\uff77\116\uff77\001\002\000" +
    "\202\004\uff64\005\uff64\006\uff64\007\uff64\010\uff64\011\uff64" +
    "\012\uff64\013\uff64\014\uff64\015\uff64\016\uff64\017\uff64\020" +
    "\uff64\021\uff64\022\uff64\023\uff64\024\uff64\025\uff64\026\uff64" +
    "\027\uff64\030\uff64\031\uff64\032\uff64\033\uff64\034\uff64\035" +
    "\uff64\036\uff64\037\uff64\040\uff64\041\uff64\042\uff64\043\uff64" +
    "\044\uff64\045\uff64\046\uff64\047\uff64\050\uff64\051\uff64\052" +
    "\uff64\053\uff64\054\uff64\056\uff64\057\uff64\060\uff64\061\uff64" +
    "\062\uff64\063\uff64\064\uff64\065\uff64\066\uff64\067\uff64\074" +
    "\uff64\075\uff64\076\uff64\077\uff64\100\uff64\101\uff64\102\uff64" +
    "\103\uff64\104\uff64\105\uff64\106\uff64\113\uff64\116\uff64\001" +
    "\002\000\202\004\uff50\005\uff50\006\uff50\007\uff50\010\uff50" +
    "\011\uff50\012\uff50\013\uff50\014\uff50\015\uff50\016\uff50\017" +
    "\uff50\020\uff50\021\uff50\022\uff50\023\uff50\024\uff50\025\uff50" +
    "\026\uff50\027\uff50\030\uff50\031\uff50\032\uff50\033\uff50\034" +
    "\uff50\035\uff50\036\uff50\037\uff50\040\uff50\041\uff50\042\uff50" +
    "\043\uff50\044\uff50\045\uff50\046\uff50\047\uff50\050\uff50\051" +
    "\uff50\052\uff50\053\uff50\054\uff50\056\uff50\057\uff50\060\uff50" +
    "\061\uff50\062\uff50\063\uff50\064\uff50\065\uff50\066\uff50\067" +
    "\uff50\074\uff50\075\uff50\076\uff50\077\uff50\100\uff50\101\uff50" +
    "\102\uff50\103\uff50\104\uff50\105\uff50\106\uff50\113\uff50\116" +
    "\uff50\001\002\000\202\004\uff74\005\uff74\006\uff74\007\uff74" +
    "\010\uff74\011\uff74\012\uff74\013\uff74\014\uff74\015\uff74\016" +
    "\uff74\017\uff74\020\uff74\021\uff74\022\uff74\023\uff74\024\uff74" +
    "\025\uff74\026\uff74\027\uff74\030\uff74\031\uff74\032\uff74\033" +
    "\uff74\034\uff74\035\uff74\036\uff74\037\uff74\040\uff74\041\uff74" +
    "\042\uff74\043\uff74\044\uff74\045\uff74\046\uff74\047\uff74\050" +
    "\uff74\051\uff74\052\uff74\053\uff74\054\uff74\056\uff74\057\uff74" +
    "\060\uff74\061\uff74\062\uff74\063\uff74\064\uff74\065\uff74\066" +
    "\uff74\067\uff74\074\uff74\075\uff74\076\uff74\077\uff74\100\uff74" +
    "\101\uff74\102\uff74\103\uff74\104\uff74\105\uff74\106\uff74\113" +
    "\uff74\116\uff74\001\002\000\202\004\uff4d\005\uff4d\006\uff4d" +
    "\007\uff4d\010\uff4d\011\uff4d\012\uff4d\013\uff4d\014\uff4d\015" +
    "\uff4d\016\uff4d\017\uff4d\020\uff4d\021\uff4d\022\uff4d\023\uff4d" +
    "\024\uff4d\025\uff4d\026\uff4d\027\uff4d\030\uff4d\031\uff4d\032" +
    "\uff4d\033\uff4d\034\uff4d\035\uff4d\036\uff4d\037\uff4d\040\uff4d" +
    "\041\uff4d\042\uff4d\043\uff4d\044\uff4d\045\uff4d\046\uff4d\047" +
    "\uff4d\050\uff4d\051\uff4d\052\uff4d\053\uff4d\054\uff4d\056\uff4d" +
    "\057\uff4d\060\uff4d\061\uff4d\062\uff4d\063\uff4d\064\uff4d\065" +
    "\uff4d\066\uff4d\067\uff4d\074\uff4d\075\uff4d\076\uff4d\077\uff4d" +
    "\100\uff4d\101\uff4d\102\uff4d\103\uff4d\104\uff4d\105\uff4d\106" +
    "\uff4d\113\uff4d\116\uff4d\001\002\000\202\004\uff4e\005\uff4e" +
    "\006\uff4e\007\uff4e\010\uff4e\011\uff4e\012\uff4e\013\uff4e\014" +
    "\uff4e\015\uff4e\016\uff4e\017\uff4e\020\uff4e\021\uff4e\022\uff4e" +
    "\023\uff4e\024\uff4e\025\uff4e\026\uff4e\027\uff4e\030\uff4e\031" +
    "\uff4e\032\uff4e\033\uff4e\034\uff4e\035\uff4e\036\uff4e\037\uff4e" +
    "\040\uff4e\041\uff4e\042\uff4e\043\uff4e\044\uff4e\045\uff4e\046" +
    "\uff4e\047\uff4e\050\uff4e\051\uff4e\052\uff4e\053\uff4e\054\uff4e" +
    "\056\uff4e\057\uff4e\060\uff4e\061\uff4e\062\uff4e\063\uff4e\064" +
    "\uff4e\065\uff4e\066\uff4e\067\uff4e\074\uff4e\075\uff4e\076\uff4e" +
    "\077\uff4e\100\uff4e\101\uff4e\102\uff4e\103\uff4e\104\uff4e\105" +
    "\uff4e\106\uff4e\113\uff4e\116\uff4e\001\002\000\202\004\uff3d" +
    "\005\uff3d\006\uff3d\007\uff3d\010\uff3d\011\uff3d\012\uff3d\013" +
    "\uff3d\014\uff3d\015\uff3d\016\uff3d\017\uff3d\020\uff3d\021\uff3d" +
    "\022\uff3d\023\uff3d\024\uff3d\025\uff3d\026\uff3d\027\uff3d\030" +
    "\uff3d\031\uff3d\032\uff3d\033\uff3d\034\uff3d\035\uff3d\036\uff3d" +
    "\037\uff3d\040\uff3d\041\uff3d\042\uff3d\043\uff3d\044\uff3d\045" +
    "\uff3d\046\uff3d\047\uff3d\050\uff3d\051\uff3d\052\uff3d\053\uff3d" +
    "\054\uff3d\056\uff3d\057\uff3d\060\uff3d\061\uff3d\062\uff3d\063" +
    "\uff3d\064\uff3d\065\uff3d\066\uff3d\067\uff3d\074\uff3d\075\uff3d" +
    "\076\uff3d\077\uff3d\100\uff3d\101\uff3d\102\uff3d\103\uff3d\104" +
    "\uff3d\105\uff3d\106\uff3d\113\uff3d\116\uff3d\001\002\000\202" +
    "\004\uff6c\005\uff6c\006\uff6c\007\uff6c\010\uff6c\011\uff6c\012" +
    "\uff6c\013\uff6c\014\uff6c\015\uff6c\016\uff6c\017\uff6c\020\uff6c" +
    "\021\uff6c\022\uff6c\023\uff6c\024\uff6c\025\uff6c\026\uff6c\027" +
    "\uff6c\030\uff6c\031\uff6c\032\uff6c\033\uff6c\034\uff6c\035\uff6c" +
    "\036\uff6c\037\uff6c\040\uff6c\041\uff6c\042\uff6c\043\uff6c\044" +
    "\uff6c\045\uff6c\046\uff6c\047\uff6c\050\uff6c\051\uff6c\052\uff6c" +
    "\053\uff6c\054\uff6c\056\uff6c\057\uff6c\060\uff6c\061\uff6c\062" +
    "\uff6c\063\uff6c\064\uff6c\065\uff6c\066\uff6c\067\uff6c\074\uff6c" +
    "\075\uff6c\076\uff6c\077\uff6c\100\uff6c\101\uff6c\102\uff6c\103" +
    "\uff6c\104\uff6c\105\uff6c\106\uff6c\113\uff6c\116\uff6c\001\002" +
    "\000\202\004\uff48\005\uff48\006\uff48\007\uff48\010\uff48\011" +
    "\uff48\012\uff48\013\uff48\014\uff48\015\uff48\016\uff48\017\uff48" +
    "\020\uff48\021\uff48\022\uff48\023\uff48\024\uff48\025\uff48\026" +
    "\uff48\027\uff48\030\uff48\031\uff48\032\uff48\033\uff48\034\uff48" +
    "\035\uff48\036\uff48\037\uff48\040\uff48\041\uff48\042\uff48\043" +
    "\uff48\044\uff48\045\uff48\046\uff48\047\uff48\050\uff48\051\uff48" +
    "\052\uff48\053\uff48\054\uff48\056\uff48\057\uff48\060\uff48\061" +
    "\uff48\062\uff48\063\uff48\064\uff48\065\uff48\066\uff48\067\uff48" +
    "\074\uff48\075\uff48\076\uff48\077\uff48\100\uff48\101\uff48\102" +
    "\uff48\103\uff48\104\uff48\105\uff48\106\uff48\113\uff48\116\uff48" +
    "\001\002\000\202\004\uff49\005\uff49\006\uff49\007\uff49\010" +
    "\uff49\011\uff49\012\uff49\013\uff49\014\uff49\015\uff49\016\uff49" +
    "\017\uff49\020\uff49\021\uff49\022\uff49\023\uff49\024\uff49\025" +
    "\uff49\026\uff49\027\uff49\030\uff49\031\uff49\032\uff49\033\uff49" +
    "\034\uff49\035\uff49\036\uff49\037\uff49\040\uff49\041\uff49\042" +
    "\uff49\043\uff49\044\uff49\045\uff49\046\uff49\047\uff49\050\uff49" +
    "\051\uff49\052\uff49\053\uff49\054\uff49\056\uff49\057\uff49\060" +
    "\uff49\061\uff49\062\uff49\063\uff49\064\uff49\065\uff49\066\uff49" +
    "\067\uff49\074\uff49\075\uff49\076\uff49\077\uff49\100\uff49\101" +
    "\uff49\102\uff49\103\uff49\104\uff49\105\uff49\106\uff49\113\uff49" +
    "\116\uff49\001\002\000\202\004\uff5c\005\uff5c\006\uff5c\007" +
    "\uff5c\010\uff5c\011\uff5c\012\uff5c\013\uff5c\014\uff5c\015\uff5c" +
    "\016\uff5c\017\uff5c\020\uff5c\021\uff5c\022\uff5c\023\uff5c\024" +
    "\uff5c\025\uff5c\026\uff5c\027\uff5c\030\uff5c\031\uff5c\032\uff5c" +
    "\033\uff5c\034\uff5c\035\uff5c\036\uff5c\037\uff5c\040\uff5c\041" +
    "\uff5c\042\uff5c\043\uff5c\044\uff5c\045\uff5c\046\uff5c\047\uff5c" +
    "\050\uff5c\051\uff5c\052\uff5c\053\uff5c\054\uff5c\056\uff5c\057" +
    "\uff5c\060\uff5c\061\uff5c\062\uff5c\063\uff5c\064\uff5c\065\uff5c" +
    "\066\uff5c\067\uff5c\074\uff5c\075\uff5c\076\uff5c\077\uff5c\100" +
    "\uff5c\101\uff5c\102\uff5c\103\uff5c\104\uff5c\105\uff5c\106\uff5c" +
    "\113\uff5c\116\uff5c\001\002\000\202\004\uff42\005\uff42\006" +
    "\uff42\007\uff42\010\uff42\011\uff42\012\uff42\013\uff42\014\uff42" +
    "\015\uff42\016\uff42\017\uff42\020\uff42\021\uff42\022\uff42\023" +
    "\uff42\024\uff42\025\uff42\026\uff42\027\uff42\030\uff42\031\uff42" +
    "\032\uff42\033\uff42\034\uff42\035\uff42\036\uff42\037\uff42\040" +
    "\uff42\041\uff42\042\uff42\043\uff42\044\uff42\045\uff42\046\uff42" +
    "\047\uff42\050\uff42\051\uff42\052\uff42\053\uff42\054\uff42\056" +
    "\uff42\057\uff42\060\uff42\061\uff42\062\uff42\063\uff42\064\uff42" +
    "\065\uff42\066\uff42\067\uff42\074\uff42\075\uff42\076\uff42\077" +
    "\uff42\100\uff42\101\uff42\102\uff42\103\uff42\104\uff42\105\uff42" +
    "\106\uff42\113\uff42\116\uff42\001\002\000\202\004\uff62\005" +
    "\uff62\006\uff62\007\uff62\010\uff62\011\uff62\012\uff62\013\uff62" +
    "\014\uff62\015\uff62\016\uff62\017\uff62\020\uff62\021\uff62\022" +
    "\uff62\023\uff62\024\uff62\025\uff62\026\uff62\027\uff62\030\uff62" +
    "\031\uff62\032\uff62\033\uff62\034\uff62\035\uff62\036\uff62\037" +
    "\uff62\040\uff62\041\uff62\042\uff62\043\uff62\044\uff62\045\uff62" +
    "\046\uff62\047\uff62\050\uff62\051\uff62\052\uff62\053\uff62\054" +
    "\uff62\056\uff62\057\uff62\060\uff62\061\uff62\062\uff62\063\uff62" +
    "\064\uff62\065\uff62\066\uff62\067\uff62\074\uff62\075\uff62\076" +
    "\uff62\077\uff62\100\uff62\101\uff62\102\uff62\103\uff62\104\uff62" +
    "\105\uff62\106\uff62\113\uff62\116\uff62\001\002\000\202\004" +
    "\uff7a\005\uff7a\006\uff7a\007\uff7a\010\uff7a\011\uff7a\012\uff7a" +
    "\013\uff7a\014\uff7a\015\uff7a\016\uff7a\017\uff7a\020\uff7a\021" +
    "\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a\026\uff7a\027\uff7a" +
    "\030\uff7a\031\uff7a\032\uff7a\033\uff7a\034\uff7a\035\uff7a\036" +
    "\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a\043\uff7a\044\uff7a" +
    "\045\uff7a\046\uff7a\047\uff7a\050\uff7a\051\uff7a\052\uff7a\053" +
    "\uff7a\054\uff7a\056\uff7a\057\uff7a\060\uff7a\061\uff7a\062\uff7a" +
    "\063\uff7a\064\uff7a\065\uff7a\066\uff7a\067\uff7a\074\uff7a\075" +
    "\uff7a\076\uff7a\077\uff7a\100\uff7a\101\uff7a\102\uff7a\103\uff7a" +
    "\104\uff7a\105\uff7a\106\uff7a\113\uff7a\116\uff7a\001\002\000" +
    "\202\004\uff44\005\uff44\006\uff44\007\uff44\010\uff44\011\uff44" +
    "\012\uff44\013\uff44\014\uff44\015\uff44\016\uff44\017\uff44\020" +
    "\uff44\021\uff44\022\uff44\023\uff44\024\uff44\025\uff44\026\uff44" +
    "\027\uff44\030\uff44\031\uff44\032\uff44\033\uff44\034\uff44\035" +
    "\uff44\036\uff44\037\uff44\040\uff44\041\uff44\042\uff44\043\uff44" +
    "\044\uff44\045\uff44\046\uff44\047\uff44\050\uff44\051\uff44\052" +
    "\uff44\053\uff44\054\uff44\056\uff44\057\uff44\060\uff44\061\uff44" +
    "\062\uff44\063\uff44\064\uff44\065\uff44\066\uff44\067\uff44\074" +
    "\uff44\075\uff44\076\uff44\077\uff44\100\uff44\101\uff44\102\uff44" +
    "\103\uff44\104\uff44\105\uff44\106\uff44\113\uff44\116\uff44\001" +
    "\002\000\202\004\uff4b\005\uff4b\006\uff4b\007\uff4b\010\uff4b" +
    "\011\uff4b\012\uff4b\013\uff4b\014\uff4b\015\uff4b\016\uff4b\017" +
    "\uff4b\020\uff4b\021\uff4b\022\uff4b\023\uff4b\024\uff4b\025\uff4b" +
    "\026\uff4b\027\uff4b\030\uff4b\031\uff4b\032\uff4b\033\uff4b\034" +
    "\uff4b\035\uff4b\036\uff4b\037\uff4b\040\uff4b\041\uff4b\042\uff4b" +
    "\043\uff4b\044\uff4b\045\uff4b\046\uff4b\047\uff4b\050\uff4b\051" +
    "\uff4b\052\uff4b\053\uff4b\054\uff4b\056\uff4b\057\uff4b\060\uff4b" +
    "\061\uff4b\062\uff4b\063\uff4b\064\uff4b\065\uff4b\066\uff4b\067" +
    "\uff4b\074\uff4b\075\uff4b\076\uff4b\077\uff4b\100\uff4b\101\uff4b" +
    "\102\uff4b\103\uff4b\104\uff4b\105\uff4b\106\uff4b\113\uff4b\116" +
    "\uff4b\001\002\000\202\004\uff67\005\uff67\006\uff67\007\uff67" +
    "\010\uff67\011\uff67\012\uff67\013\uff67\014\uff67\015\uff67\016" +
    "\uff67\017\uff67\020\uff67\021\uff67\022\uff67\023\uff67\024\uff67" +
    "\025\uff67\026\uff67\027\uff67\030\uff67\031\uff67\032\uff67\033" +
    "\uff67\034\uff67\035\uff67\036\uff67\037\uff67\040\uff67\041\uff67" +
    "\042\uff67\043\uff67\044\uff67\045\uff67\046\uff67\047\uff67\050" +
    "\uff67\051\uff67\052\uff67\053\uff67\054\uff67\056\uff67\057\uff67" +
    "\060\uff67\061\uff67\062\uff67\063\uff67\064\uff67\065\uff67\066" +
    "\uff67\067\uff67\074\uff67\075\uff67\076\uff67\077\uff67\100\uff67" +
    "\101\uff67\102\uff67\103\uff67\104\uff67\105\uff67\106\uff67\113" +
    "\uff67\116\uff67\001\002\000\202\004\uff68\005\uff68\006\uff68" +
    "\007\uff68\010\uff68\011\uff68\012\uff68\013\uff68\014\uff68\015" +
    "\uff68\016\uff68\017\uff68\020\uff68\021\uff68\022\uff68\023\uff68" +
    "\024\uff68\025\uff68\026\uff68\027\uff68\030\uff68\031\uff68\032" +
    "\uff68\033\uff68\034\uff68\035\uff68\036\uff68\037\uff68\040\uff68" +
    "\041\uff68\042\uff68\043\uff68\044\uff68\045\uff68\046\uff68\047" +
    "\uff68\050\uff68\051\uff68\052\uff68\053\uff68\054\uff68\056\uff68" +
    "\057\uff68\060\uff68\061\uff68\062\uff68\063\uff68\064\uff68\065" +
    "\uff68\066\uff68\067\uff68\074\uff68\075\uff68\076\uff68\077\uff68" +
    "\100\uff68\101\uff68\102\uff68\103\uff68\104\uff68\105\uff68\106" +
    "\uff68\113\uff68\116\uff68\001\002\000\202\004\uff43\005\uff43" +
    "\006\uff43\007\uff43\010\uff43\011\uff43\012\uff43\013\uff43\014" +
    "\uff43\015\uff43\016\uff43\017\uff43\020\uff43\021\uff43\022\uff43" +
    "\023\uff43\024\uff43\025\uff43\026\uff43\027\uff43\030\uff43\031" +
    "\uff43\032\uff43\033\uff43\034\uff43\035\uff43\036\uff43\037\uff43" +
    "\040\uff43\041\uff43\042\uff43\043\uff43\044\uff43\045\uff43\046" +
    "\uff43\047\uff43\050\uff43\051\uff43\052\uff43\053\uff43\054\uff43" +
    "\056\uff43\057\uff43\060\uff43\061\uff43\062\uff43\063\uff43\064" +
    "\uff43\065\uff43\066\uff43\067\uff43\074\uff43\075\uff43\076\uff43" +
    "\077\uff43\100\uff43\101\uff43\102\uff43\103\uff43\104\uff43\105" +
    "\uff43\106\uff43\113\uff43\116\uff43\001\002\000\004\053\353" +
    "\001\002\000\004\016\354\001\002\000\004\052\355\001" +
    "\002\000\004\051\uff85\001\002\000\202\004\uff7b\005\uff7b" +
    "\006\uff7b\007\uff7b\010\uff7b\011\uff7b\012\uff7b\013\uff7b\014" +
    "\uff7b\015\uff7b\016\uff7b\017\uff7b\020\uff7b\021\uff7b\022\uff7b" +
    "\023\uff7b\024\uff7b\025\uff7b\026\uff7b\027\uff7b\030\uff7b\031" +
    "\uff7b\032\uff7b\033\uff7b\034\uff7b\035\uff7b\036\uff7b\037\uff7b" +
    "\040\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b\046" +
    "\uff7b\047\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b\054\uff7b" +
    "\056\uff7b\057\uff7b\060\uff7b\061\uff7b\062\uff7b\063\uff7b\064" +
    "\uff7b\065\uff7b\066\uff7b\067\uff7b\074\uff7b\075\uff7b\076\uff7b" +
    "\077\uff7b\100\uff7b\101\uff7b\102\uff7b\103\uff7b\104\uff7b\105" +
    "\uff7b\106\uff7b\113\uff7b\116\uff7b\001\002\000\004\113\360" +
    "\001\002\000\022\022\uff7d\023\uff7d\024\uff7d\025\uff7d\027" +
    "\uff7d\047\uff7d\050\uff7d\052\uff7d\001\002\000\022\022\367" +
    "\023\365\024\371\025\363\027\370\047\362\050\366\052" +
    "\u010e\001\002\000\004\054\u010b\001\002\000\004\054\u0109" +
    "\001\002\000\022\022\uff86\023\uff86\024\uff86\025\uff86\027" +
    "\uff86\047\uff86\050\uff86\052\uff86\001\002\000\004\054\u0107" +
    "\001\002\000\004\054\u0100\001\002\000\004\054\376\001" +
    "\002\000\004\054\374\001\002\000\004\054\372\001\002" +
    "\000\004\106\373\001\002\000\022\022\uff8d\023\uff8d\024" +
    "\uff8d\025\uff8d\027\uff8d\047\uff8d\050\uff8d\052\uff8d\001\002" +
    "\000\004\113\375\001\002\000\022\022\uff90\023\uff90\024" +
    "\uff90\025\uff90\027\uff90\047\uff90\050\uff90\052\uff90\001\002" +
    "\000\004\106\377\001\002\000\022\022\uff8f\023\uff8f\024" +
    "\uff8f\025\uff8f\027\uff8f\047\uff8f\050\uff8f\052\uff8f\001\002" +
    "\000\004\056\u0101\001\002\000\004\105\u0102\001\002\000" +
    "\004\060\u0103\001\002\000\052\051\uffe6\052\uffe6\053\uffe6" +
    "\061\uffe6\062\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\072" +
    "\uffe6\073\uffe6\074\uffe6\075\uffe6\076\uffe6\077\uffe6\100\uffe6" +
    "\106\172\113\173\114\174\115\177\001\002\000\006\061" +
    "\u0105\062\201\001\002\000\004\057\u0106\001\002\000\022" +
    "\022\uff8a\023\uff8a\024\uff8a\025\uff8a\027\uff8a\047\uff8a\050" +
    "\uff8a\052\uff8a\001\002\000\004\106\u0108\001\002\000\022" +
    "\022\uff8e\023\uff8e\024\uff8e\025\uff8e\027\uff8e\047\uff8e\050" +
    "\uff8e\052\uff8e\001\002\000\004\106\u010a\001\002\000\022" +
    "\022\uff8c\023\uff8c\024\uff8c\025\uff8c\027\uff8c\047\uff8c\050" +
    "\uff8c\052\uff8c\001\002\000\004\113\u010c\001\002\000\022" +
    "\022\uff8b\023\uff8b\024\uff8b\025\uff8b\027\uff8b\047\uff8b\050" +
    "\uff8b\052\uff8b\001\002\000\022\022\uff87\023\uff87\024\uff87" +
    "\025\uff87\027\uff87\047\uff87\050\uff87\052\uff87\001\002\000" +
    "\202\004\337\005\267\006\257\007\254\010\345\011\340" +
    "\012\351\013\342\014\255\015\265\016\311\017\320\020" +
    "\324\021\307\022\323\023\322\024\272\025\247\026\336" +
    "\027\305\030\300\031\325\032\256\033\346\034\260\035" +
    "\350\036\347\037\253\040\326\041\330\042\251\043\343" +
    "\044\321\045\270\046\250\047\306\050\252\051\262\052" +
    "\276\053\341\054\263\056\275\057\274\060\301\061\277" +
    "\062\261\063\335\064\304\065\302\066\314\067\317\074" +
    "\246\075\331\076\310\077\334\100\333\101\316\102\303" +
    "\103\313\104\312\105\273\106\266\113\327\116\332\001" +
    "\002\000\202\004\337\005\267\006\257\007\254\010\345" +
    "\011\340\012\351\013\342\014\255\015\265\016\311\017" +
    "\320\020\324\021\307\022\323\023\322\024\272\025\247" +
    "\026\336\027\305\030\300\031\325\032\256\033\346\034" +
    "\260\035\350\036\347\037\253\040\326\041\330\042\251" +
    "\043\343\044\321\045\270\046\250\047\306\050\252\051" +
    "\uff88\052\276\053\341\054\263\056\275\057\274\060\301" +
    "\061\277\062\261\063\335\064\304\065\302\066\314\067" +
    "\317\074\246\075\331\076\310\077\334\100\333\101\316" +
    "\102\303\103\313\104\312\105\273\106\266\113\327\116" +
    "\332\001\002\000\004\051\u0112\001\002\000\004\051\uff89" +
    "\001\002\000\004\053\u0113\001\002\000\004\015\u0114\001" +
    "\002\000\004\052\u0115\001\002\000\004\051\uff91\001\002" +
    "\000\004\054\u0135\001\002\000\004\054\u0133\001\002\000" +
    "\004\054\u0131\001\002\000\024\021\uffbc\022\uffbc\023\uffbc" +
    "\027\uffbc\030\uffbc\031\uffbc\035\uffbc\036\uffbc\052\uffbc\001" +
    "\002\000\024\021\u0118\022\u011d\023\u011b\027\u011e\030\u011f" +
    "\031\u011c\035\u0116\036\u0117\052\u012b\001\002\000\004\054" +
    "\u0128\001\002\000\004\054\u0126\001\002\000\004\054\u0124" +
    "\001\002\000\004\054\u0122\001\002\000\004\054\u0120\001" +
    "\002\000\004\113\u0121\001\002\000\024\021\uffb8\022\uffb8" +
    "\023\uffb8\027\uffb8\030\uffb8\031\uffb8\035\uffb8\036\uffb8\052" +
    "\uffb8\001\002\000\004\113\u0123\001\002\000\024\021\uffbb" +
    "\022\uffbb\023\uffbb\027\uffbb\030\uffbb\031\uffbb\035\uffbb\036" +
    "\uffbb\052\uffbb\001\002\000\004\106\u0125\001\002\000\024" +
    "\021\uffba\022\uffba\023\uffba\027\uffba\030\uffba\031\uffba\035" +
    "\uffba\036\uffba\052\uffba\001\002\000\004\106\u0127\001\002" +
    "\000\024\021\uffb7\022\uffb7\023\uffb7\027\uffb7\030\uffb7\031" +
    "\uffb7\035\uffb7\036\uffb7\052\uffb7\001\002\000\004\106\u0129" +
    "\001\002\000\024\021\uffb9\022\uffb9\023\uffb9\027\uffb9\030" +
    "\uffb9\031\uffb9\035\uffb9\036\uffb9\052\uffb9\001\002\000\024" +
    "\021\uffbd\022\uffbd\023\uffbd\027\uffbd\030\uffbd\031\uffbd\035" +
    "\uffbd\036\uffbd\052\uffbd\001\002\000\200\004\337\005\267" +
    "\006\257\007\254\010\345\011\340\012\351\013\342\014" +
    "\255\015\265\016\311\017\320\020\324\021\307\022\323" +
    "\023\322\024\272\025\247\026\336\027\305\030\300\031" +
    "\325\032\256\033\346\034\260\035\350\036\347\037\253" +
    "\040\326\041\330\042\251\043\343\044\321\045\270\046" +
    "\250\047\306\050\252\052\276\053\341\054\263\056\275" +
    "\057\274\060\301\061\277\062\261\063\335\064\304\065" +
    "\302\066\314\067\317\074\246\075\331\076\310\077\334" +
    "\100\333\101\316\102\303\103\313\104\312\105\273\106" +
    "\266\113\327\116\332\001\002\000\202\004\337\005\267" +
    "\006\257\007\254\010\345\011\340\012\351\013\342\014" +
    "\255\015\265\016\311\017\320\020\324\021\307\022\323" +
    "\023\322\024\272\025\247\026\336\027\305\030\300\031" +
    "\325\032\256\033\346\034\260\035\350\036\347\037\253" +
    "\040\326\041\330\042\251\043\343\044\321\045\270\046" +
    "\250\047\306\050\252\051\u012d\052\276\053\341\054\263" +
    "\056\275\057\274\060\301\061\277\062\261\063\335\064" +
    "\304\065\302\066\314\067\317\074\246\075\331\076\310" +
    "\077\334\100\333\101\316\102\303\103\313\104\312\105" +
    "\273\106\266\113\327\116\332\001\002\000\004\053\u012e" +
    "\001\002\000\004\007\u012f\001\002\000\004\052\u0130\001" +
    "\002\000\004\051\uffbe\001\002\000\004\113\u0132\001\002" +
    "\000\024\021\uffb6\022\uffb6\023\uffb6\027\uffb6\030\uffb6\031" +
    "\uffb6\035\uffb6\036\uffb6\052\uffb6\001\002\000\006\114\143" +
    "\115\144\001\002\000\024\021\uffb4\022\uffb4\023\uffb4\027" +
    "\uffb4\030\uffb4\031\uffb4\035\uffb4\036\uffb4\052\uffb4\001\002" +
    "\000\006\114\143\115\144\001\002\000\024\021\uffb5\022" +
    "\uffb5\023\uffb5\027\uffb5\030\uffb5\031\uffb5\035\uffb5\036\uffb5" +
    "\052\uffb5\001\002\000\004\054\u0189\001\002\000\004\054" +
    "\u0187\001\002\000\004\054\u0185\001\002\000\004\054\u0183" +
    "\001\002\000\004\054\u0181\001\002\000\004\054\u017f\001" +
    "\002\000\004\054\u017d\001\002\000\004\054\u017b\001\002" +
    "\000\004\054\u0179\001\002\000\004\054\u0177\001\002\000" +
    "\036\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa" +
    "\027\uffaa\030\uffaa\031\uffaa\035\uffaa\036\uffaa\037\uffaa\040" +
    "\uffaa\052\uffaa\001\002\000\036\020\u0140\021\u0139\022\u013e" +
    "\023\u013d\024\u0145\025\u013a\027\u0143\030\u0144\031\u013c\035" +
    "\u0137\036\u0138\037\u013f\040\u013b\052\u014d\001\002\000\004" +
    "\054\u014a\001\002\000\004\054\u0148\001\002\000\004\054" +
    "\u0146\001\002\000\004\106\u0147\001\002\000\036\020\uffa5" +
    "\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\027\uffa5\030" +
    "\uffa5\031\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\052\uffa5" +
    "\001\002\000\004\113\u0149\001\002\000\036\020\uffa3\021" +
    "\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\027\uffa3\030\uffa3" +
    "\031\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\052\uffa3\001" +
    "\002\000\004\113\u014b\001\002\000\036\020\uffa8\021\uffa8" +
    "\022\uffa8\023\uffa8\024\uffa8\025\uffa8\027\uffa8\030\uffa8\031" +
    "\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\052\uffa8\001\002" +
    "\000\036\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025" +
    "\uffab\027\uffab\030\uffab\031\uffab\035\uffab\036\uffab\037\uffab" +
    "\040\uffab\052\uffab\001\002\000\004\051\u014f\001\002\000" +
    "\004\051\u0173\001\002\000\010\011\u0150\012\u0151\053\u0152" +
    "\001\002\000\004\052\u016d\001\002\000\004\052\u0155\001" +
    "\002\000\004\010\u0153\001\002\000\004\052\u0154\001\002" +
    "\000\004\051\uffb2\001\002\000\004\051\u0157\001\002\000" +
    "\004\051\uffad\001\002\000\004\013\u015b\001\002\000\004" +
    "\051\u015a\001\002\000\004\051\uffae\001\002\000\006\013" +
    "\u015b\053\u015c\001\002\000\004\052\u0167\001\002\000\004" +
    "\012\u015d\001\002\000\004\052\u015e\001\002\000\004\051" +
    "\uffaf\001\002\000\004\011\u0160\001\002\000\004\052\u0161" +
    "\001\002\000\200\004\337\005\267\006\257\007\254\010" +
    "\345\011\340\012\351\013\342\014\255\015\265\016\311" +
    "\017\320\020\324\021\307\022\323\023\322\024\272\025" +
    "\247\026\336\027\305\030\300\031\325\032\256\033\346" +
    "\034\260\035\350\036\347\037\253\040\326\041\330\042" +
    "\251\043\343\044\321\045\270\046\250\047\306\050\252" +
    "\052\276\053\341\054\263\056\275\057\274\060\301\061" +
    "\277\062\261\063\335\064\304\065\302\066\314\067\317" +
    "\074\246\075\331\076\310\077\334\100\333\101\316\102" +
    "\303\103\313\104\312\105\273\106\266\113\327\116\332" +
    "\001\002\000\202\004\337\005\267\006\257\007\254\010" +
    "\345\011\340\012\351\013\342\014\255\015\265\016\311" +
    "\017\320\020\324\021\307\022\323\023\322\024\272\025" +
    "\247\026\336\027\305\030\300\031\325\032\256\033\346" +
    "\034\260\035\350\036\347\037\253\040\326\041\330\042" +
    "\251\043\343\044\321\045\270\046\250\047\306\050\252" +
    "\051\u0163\052\276\053\341\054\263\056\275\057\274\060" +
    "\301\061\277\062\261\063\335\064\304\065\302\066\314" +
    "\067\317\074\246\075\331\076\310\077\334\100\333\101" +
    "\316\102\303\103\313\104\312\105\273\106\266\113\327" +
    "\116\332\001\002\000\004\053\u0164\001\002\000\004\011" +
    "\u0165\001\002\000\004\052\u0166\001\002\000\004\051\uffb0" +
    "\001\002\000\200\004\337\005\267\006\257\007\254\010" +
    "\345\011\340\012\351\013\342\014\255\015\265\016\311" +
    "\017\320\020\324\021\307\022\323\023\322\024\272\025" +
    "\247\026\336\027\305\030\300\031\325\032\256\033\346" +
    "\034\260\035\350\036\347\037\253\040\326\041\330\042" +
    "\251\043\343\044\321\045\270\046\250\047\306\050\252" +
    "\052\276\053\341\054\263\056\275\057\274\060\301\061" +
    "\277\062\261\063\335\064\304\065\302\066\314\067\317" +
    "\074\246\075\331\076\310\077\334\100\333\101\316\102" +
    "\303\103\313\104\312\105\273\106\266\113\327\116\332" +
    "\001\002\000\202\004\337\005\267\006\257\007\254\010" +
    "\345\011\340\012\351\013\342\014\255\015\265\016\311" +
    "\017\320\020\324\021\307\022\323\023\322\024\272\025" +
    "\247\026\336\027\305\030\300\031\325\032\256\033\346" +
    "\034\260\035\350\036\347\037\253\040\326\041\330\042" +
    "\251\043\343\044\321\045\270\046\250\047\306\050\252" +
    "\051\u0169\052\276\053\341\054\263\056\275\057\274\060" +
    "\301\061\277\062\261\063\335\064\304\065\302\066\314" +
    "\067\317\074\246\075\331\076\310\077\334\100\333\101" +
    "\316\102\303\103\313\104\312\105\273\106\266\113\327" +
    "\116\332\001\002\000\004\053\u016a\001\002\000\004\013" +
    "\u016b\001\002\000\004\052\u016c\001\002\000\004\051\uffac" +
    "\001\002\000\200\004\337\005\267\006\257\007\254\010" +
    "\345\011\340\012\351\013\342\014\255\015\265\016\311" +
    "\017\320\020\324\021\307\022\323\023\322\024\272\025" +
    "\247\026\336\027\305\030\300\031\325\032\256\033\346" +
    "\034\260\035\350\036\347\037\253\040\326\041\330\042" +
    "\251\043\343\044\321\045\270\046\250\047\306\050\252" +
    "\052\276\053\341\054\263\056\275\057\274\060\301\061" +
    "\277\062\261\063\335\064\304\065\302\066\314\067\317" +
    "\074\246\075\331\076\310\077\334\100\333\101\316\102" +
    "\303\103\313\104\312\105\273\106\266\113\327\116\332" +
    "\001\002\000\202\004\337\005\267\006\257\007\254\010" +
    "\345\011\340\012\351\013\342\014\255\015\265\016\311" +
    "\017\320\020\324\021\307\022\323\023\322\024\272\025" +
    "\247\026\336\027\305\030\300\031\325\032\256\033\346" +
    "\034\260\035\350\036\347\037\253\040\326\041\330\042" +
    "\251\043\343\044\321\045\270\046\250\047\306\050\252" +
    "\051\u016f\052\276\053\341\054\263\056\275\057\274\060" +
    "\301\061\277\062\261\063\335\064\304\065\302\066\314" +
    "\067\317\074\246\075\331\076\310\077\334\100\333\101" +
    "\316\102\303\103\313\104\312\105\273\106\266\113\327" +
    "\116\332\001\002\000\004\053\u0170\001\002\000\004\011" +
    "\u0171\001\002\000\004\052\u0172\001\002\000\004\051\uffb1" +
    "\001\002\000\004\053\u0174\001\002\000\004\010\u0175\001" +
    "\002\000\004\052\u0176\001\002\000\004\051\uffb3\001\002" +
    "\000\004\113\u0178\001\002\000\036\020\uffa9\021\uffa9\022" +
    "\uffa9\023\uffa9\024\uffa9\025\uffa9\027\uffa9\030\uffa9\031\uffa9" +
    "\035\uffa9\036\uffa9\037\uffa9\040\uffa9\052\uffa9\001\002\000" +
    "\004\106\u017a\001\002\000\036\020\uff9e\021\uff9e\022\uff9e" +
    "\023\uff9e\024\uff9e\025\uff9e\027\uff9e\030\uff9e\031\uff9e\035" +
    "\uff9e\036\uff9e\037\uff9e\040\uff9e\052\uff9e\001\002\000\004" +
    "\106\u017c\001\002\000\036\020\uffa7\021\uffa7\022\uffa7\023" +
    "\uffa7\024\uffa7\025\uffa7\027\uffa7\030\uffa7\031\uffa7\035\uffa7" +
    "\036\uffa7\037\uffa7\040\uffa7\052\uffa7\001\002\000\004\106" +
    "\u017e\001\002\000\036\020\uffa6\021\uffa6\022\uffa6\023\uffa6" +
    "\024\uffa6\025\uffa6\027\uffa6\030\uffa6\031\uffa6\035\uffa6\036" +
    "\uffa6\037\uffa6\040\uffa6\052\uffa6\001\002\000\004\106\u0180" +
    "\001\002\000\036\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024" +
    "\uffa2\025\uffa2\027\uffa2\030\uffa2\031\uffa2\035\uffa2\036\uffa2" +
    "\037\uffa2\040\uffa2\052\uffa2\001\002\000\004\106\u0182\001" +
    "\002\000\036\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d" +
    "\025\uff9d\027\uff9d\030\uff9d\031\uff9d\035\uff9d\036\uff9d\037" +
    "\uff9d\040\uff9d\052\uff9d\001\002\000\004\106\u0184\001\002" +
    "\000\036\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025" +
    "\uffa4\027\uffa4\030\uffa4\031\uffa4\035\uffa4\036\uffa4\037\uffa4" +
    "\040\uffa4\052\uffa4\001\002\000\004\113\u0186\001\002\000" +
    "\036\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1" +
    "\027\uffa1\030\uffa1\031\uffa1\035\uffa1\036\uffa1\037\uffa1\040" +
    "\uffa1\052\uffa1\001\002\000\006\114\143\115\144\001\002" +
    "\000\036\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025" +
    "\uff9f\027\uff9f\030\uff9f\031\uff9f\035\uff9f\036\uff9f\037\uff9f" +
    "\040\uff9f\052\uff9f\001\002\000\006\114\143\115\144\001" +
    "\002\000\036\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0" +
    "\025\uffa0\027\uffa0\030\uffa0\031\uffa0\035\uffa0\036\uffa0\037" +
    "\uffa0\040\uffa0\052\uffa0\001\002\000\004\106\u018c\001\002" +
    "\000\022\017\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025" +
    "\uffca\026\uffca\052\uffca\001\002\000\004\113\u018e\001\002" +
    "\000\022\017\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025" +
    "\uffc9\026\uffc9\052\uffc9\001\002\000\006\114\143\115\144" +
    "\001\002\000\022\017\uffc8\021\uffc8\022\uffc8\023\uffc8\024" +
    "\uffc8\025\uffc8\026\uffc8\052\uffc8\001\002\000\004\113\u0192" +
    "\001\002\000\022\017\uffce\021\uffce\022\uffce\023\uffce\024" +
    "\uffce\025\uffce\026\uffce\052\uffce\001\002\000\006\006\041" +
    "\053\u0195\001\002\000\004\051\uffd3\001\002\000\004\005" +
    "\u0196\001\002\000\004\052\u0197\001\002\000\006\002\ufff4" +
    "\051\ufff4\001\002\000\004\056\u0199\001\002\000\006\057" +
    "\u019b\105\u019a\001\002\000\004\060\u019c\001\002\000\022" +
    "\017\uffe9\020\uffe9\021\uffe9\024\uffe9\025\uffe9\045\uffe9\046" +
    "\uffe9\052\uffe9\001\002\000\052\051\uffe6\052\uffe6\053\uffe6" +
    "\061\uffe6\062\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\072" +
    "\uffe6\073\uffe6\074\uffe6\075\uffe6\076\uffe6\077\uffe6\100\uffe6" +
    "\106\172\113\173\114\174\115\177\001\002\000\006\061" +
    "\u019e\062\201\001\002\000\004\057\u019f\001\002\000\022" +
    "\017\uffeb\020\uffeb\021\uffeb\024\uffeb\025\uffeb\045\uffeb\046" +
    "\uffeb\052\uffeb\001\002\000\004\106\u01a1\001\002\000\022" +
    "\017\uffed\020\uffed\021\uffed\024\uffed\025\uffed\045\uffed\046" +
    "\uffed\052\uffed\001\002\000\004\113\u01a3\001\002\000\022" +
    "\017\uffef\020\uffef\021\uffef\024\uffef\025\uffef\045\uffef\046" +
    "\uffef\052\uffef\001\002\000\004\056\u01a5\001\002\000\006" +
    "\057\u01a7\105\u01a6\001\002\000\004\060\u01a8\001\002\000" +
    "\022\017\uffea\020\uffea\021\uffea\024\uffea\025\uffea\045\uffea" +
    "\046\uffea\052\uffea\001\002\000\052\051\uffe6\052\uffe6\053" +
    "\uffe6\061\uffe6\062\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6" +
    "\072\uffe6\073\uffe6\074\uffe6\075\uffe6\076\uffe6\077\uffe6\100" +
    "\uffe6\106\172\113\173\114\174\115\177\001\002\000\006" +
    "\061\u01aa\062\201\001\002\000\004\057\u01ab\001\002\000" +
    "\022\017\uffec\020\uffec\021\uffec\024\uffec\025\uffec\045\uffec" +
    "\046\uffec\052\uffec\001\002\000\004\113\u01ad\001\002\000" +
    "\022\017\ufff1\020\ufff1\021\ufff1\024\ufff1\025\ufff1\045\ufff1" +
    "\046\ufff1\052\ufff1\001\002\000\004\052\u01af\001\002\000" +
    "\012\107\u01b4\110\u01b3\111\u01b2\112\u01b1\001\002\000\004" +
    "\051\u01b5\001\002\000\004\051\ufff7\001\002\000\004\051" +
    "\ufff8\001\002\000\004\051\ufff9\001\002\000\004\051\ufffa" +
    "\001\002\000\004\053\u01b6\001\002\000\004\004\u01b7\001" +
    "\002\000\004\052\u01b8\001\002\000\004\051\ufffb\001\002" +
    "\000\004\051\ufffd\001\002\000\006\002\uffff\051\015\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01b8\000\016\002\010\003\011\004\004\006\005\027" +
    "\003\030\007\001\001\000\010\004\u01b8\006\005\030\u01b9" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\017\010\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\035\012\037\001\001\000\004\012" +
    "\u0193\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\045\014\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\020\071\021\062" +
    "\022\066\023\070\024\064\025\067\026\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\021\072\022\066\023\070\024\064\025\067" +
    "\026\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\u0140\034\u0141\001\001\000\006\031\u0119\032\u0118" +
    "\001\001\000\006\037\360\040\363\001\001\000\006\050" +
    "\147\051\151\001\001\000\002\001\001\000\006\041\110" +
    "\042\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\243\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\175\017\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\201\001\001\000\002\001\001\000" +
    "\004\017\235\001\001\000\004\017\234\001\001\000\004" +
    "\017\233\001\001\000\004\017\232\001\001\000\004\017" +
    "\231\001\001\000\004\017\230\001\001\000\004\017\227" +
    "\001\001\000\004\017\226\001\001\000\004\017\225\001" +
    "\001\000\004\017\224\001\001\000\004\017\223\001\001" +
    "\000\004\017\222\001\001\000\004\017\221\001\001\000" +
    "\004\017\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\022\314\036\263" +
    "\052\270\053\343\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\355\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\u010c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\u0103\017\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\022\u0110\036\u010e\047\u010f\053\343\001\001" +
    "\000\004\053\355\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\u0129\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\036\u012b\053\343\001\001\000\004\053\355\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\u0133\001\001\000\002\001\001\000\004\015\u0135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\u014b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\u014d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\044\u0157\045\u0155\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\u0158\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\036\u0161\053\343\001\001\000\004\053\355" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\036\u0167\053\343\001\001" +
    "\000\004\053\355\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\036\u016d" +
    "\053\343\001\001\000\004\053\355\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\u0187\001\001\000\002\001\001\000" +
    "\004\015\u0189\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\u018f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\u019c\017\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\u01a8\017\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\u01af\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\013\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintacticoGXML$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintacticoGXML$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintacticoGXML$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public NodoGXML root;
    public static int index=0;
    public void syntax_error(Symbol s){
        System.out.println("Error en la linea "+(s.right+1)+" Columna "+s.left+". Identificador "+s.value+" no reconocido"); 
    }
    /**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        javax.swing.JOptionPane.showMessageDialog(null,"Error Sintactico en la linea "+(s.right+1)+"Columna "+s.left+". Identificador"+s.value+" no reconocido.");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintacticoGXML$actions {

  

  private final sintacticoGXML parser;

  /** Constructor */
  CUP$sintacticoGXML$actions(sintacticoGXML parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintacticoGXML$do_action(
    int                        CUP$sintacticoGXML$act_num,
    java_cup.runtime.lr_parser CUP$sintacticoGXML$parser,
    java.util.Stack            CUP$sintacticoGXML$stack,
    int                        CUP$sintacticoGXML$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintacticoGXML$result;

      /* select the action based on the action number */
      switch (CUP$sintacticoGXML$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // CONTENIDO ::= interrogac 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // CONTENIDO ::= interrogaa 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // CONTENIDO ::= pyc 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // CONTENIDO ::= dospuntos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // CONTENIDO ::= salto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // CONTENIDO ::= cierra 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // CONTENIDO ::= e_enviar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // CONTENIDO ::= e_boton 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // CONTENIDO ::= e_multimedia 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // CONTENIDO ::= e_dato 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // CONTENIDO ::= e_listadatos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // CONTENIDO ::= e_control 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // CONTENIDO ::= e_texto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // CONTENIDO ::= e_contenedor 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // CONTENIDO ::= e_ventana 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // CONTENIDO ::= e_importar 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // CONTENIDO ::= e_defecto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // CONTENIDO ::= imagen 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // CONTENIDO ::= musica 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // CONTENIDO ::= video 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // CONTENIDO ::= not 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // CONTENIDO ::= and 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // CONTENIDO ::= or 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // CONTENIDO ::= diferente 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // CONTENIDO ::= igualigual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // CONTENIDO ::= potencia 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // CONTENIDO ::= por 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // CONTENIDO ::= menos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // CONTENIDO ::= mas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // CONTENIDO ::= coma 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // CONTENIDO ::= parenc 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // CONTENIDO ::= parena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // CONTENIDO ::= llavec 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // CONTENIDO ::= llavea 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // CONTENIDO ::= igual 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // CONTENIDO ::= div 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // CONTENIDO ::= referencia 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // CONTENIDO ::= accionfinal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // CONTENIDO ::= accioninicial 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // CONTENIDO ::= accion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // CONTENIDO ::= secundaria 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CONTENIDO ::= principal 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // CONTENIDO ::= auto_reproduccion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // CONTENIDO ::= path 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // CONTENIDO ::= minimo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // CONTENIDO ::= maximo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // CONTENIDO ::= cursiva 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // CONTENIDO ::= negrita 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CONTENIDO ::= tam 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CONTENIDO ::= fuente 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CONTENIDO ::= nombre 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CONTENIDO ::= borde 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CONTENIDO ::= ancho 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CONTENIDO ::= alto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CONTENIDO ::= y 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CONTENIDO ::= x 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CONTENIDO ::= color 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CONTENIDO ::= tipo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CONTENIDO ::= id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CONTENIDO ::= valor_simbolo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CONTENIDO ::= valor_numero_completo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CONTENIDO ::= valor_id 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CONTENIDO ::= valor_cadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+" ";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO",41, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CONTENIDO_ENVIAR ::= CONTENIDO_TOTAL 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                        RESULT=new NodoElemento("TEXTO",a,"TEXTO");
                                     
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ENVIAR",40, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CONTENIDO_ENVIAR ::= ETIQUETA_TEXTO 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML a = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                    RESULT=new NodoElemento("ETIQUETA",a,"ETIQUETA");
                                   
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_ENVIAR",40, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CONTENIDO_TOTAL ::= CONTENIDO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                RESULT=a;
                               
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_TOTAL",28, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CONTENIDO_TOTAL ::= CONTENIDO_TOTAL CONTENIDO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                    RESULT=a;
                                                    RESULT+=b;
                                                
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_TOTAL",28, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ELEMENTO_ENVIAR ::= accion igual llavea valor_id parena LISTA_PARAMETROS parenc llavec 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		
                                                                                            RESULT=new NodoElemento("ELEMENTO",a.toString()+"("+b.toString()+")","accion"); 
                                                                                          
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",39, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ELEMENTO_ENVIAR ::= referencia igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                    RESULT=new NodoElemento("ELEMENTO",a.toString().replaceAll("\"",""),"referencia");
                                                  
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",39, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ELEMENTO_ENVIAR ::= ancho igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                        //tipo,valor/nombre
                                                        RESULT=new NodoElemento("ELEMENTO",a.toString(),"ancho");
                                                       
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",39, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ELEMENTO_ENVIAR ::= alto igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                        //tipo,valor/nombre
                                                        RESULT=new NodoElemento("ELEMENTO",a.toString(),"alto");
                                                      
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",39, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ELEMENTO_ENVIAR ::= y igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                    RESULT=new NodoElemento("ELEMENTO",a.toString(),"y");
                                                   
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",39, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ELEMENTO_ENVIAR ::= x igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                    RESULT=new NodoElemento("ELEMENTO",a.toString(),"x");
                                                   
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",39, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ELEMENTO_ENVIAR ::= nombre igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                RESULT=new NodoElemento("ELEMENTO",a.toString().replaceAll("\"",""),"nombre");
                                               
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",39, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ELEMENTOS_ENVIAR ::= ELEMENTO_ENVIAR 
            {
              LinkedList<NodoElemento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoElemento a = (NodoElemento)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                        RESULT=new LinkedList<NodoElemento>();
                                        if(a!=null){
                                            RESULT.add(a);
                                        }
                                     
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_ENVIAR",38, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ELEMENTOS_ENVIAR ::= ELEMENTOS_ENVIAR ELEMENTO_ENVIAR 
            {
              LinkedList<NodoElemento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<NodoElemento> a = (LinkedList<NodoElemento>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoElemento b = (NodoElemento)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                            RESULT=a;
                                                            if(b!=null){
                                                                RESULT.add(b);
                                                            }
                                                        
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_ENVIAR",38, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ETIQUETA_ENVIAR ::= abre e_enviar ELEMENTOS_ENVIAR cierra CONTENIDO_ENVIAR abre div e_enviar cierra 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).right;
		LinkedList<NodoElemento> b = (LinkedList<NodoElemento>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).right;
		NodoElemento c = (NodoElemento)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).value;
		
                                                                                                        RESULT=new NodoGXML(this.parser.index,a.toString().toLowerCase(),a.toString().toLowerCase(),b);
                                                                                                        this.parser.index++;
                                                                                                        RESULT.elemento_id=RESULT.obtenerNombre();
                                                                                                        if(c.nombre.equals("ETIQUETA")){
                                                                                                            RESULT.nodos.add((NodoGXML)c.valor);
                                                                                                        }else if(c.nombre.equals("TEXTO")){
                                                                                                            RESULT.valor=c.valor.toString();
                                                                                                        }
                                                                                                        //vamos a verificar los elementos de texto
                                                                                                        String respuesta=RESULT.elementosEnviar(RESULT.elementos);
                                                                                                        if(respuesta.equals("")){ 
                                                                                                        }else{
                                                                                                            //RESULT=null;
                                                                                                            JOptionPane.showMessageDialog(null,respuesta);
                                                                                                        }
                                                                                     
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETA_ENVIAR",20, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ELEMENTOS_BOTONES ::= ELEMENTO_BOTON 
            {
              LinkedList<NodoElemento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoElemento a = (NodoElemento)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                        RESULT=new LinkedList<NodoElemento>();
                                        if(a!=null){
                                            RESULT.add(a);
                                        }
                                     
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_BOTONES",29, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ELEMENTOS_BOTONES ::= ELEMENTOS_BOTONES ELEMENTO_BOTON 
            {
              LinkedList<NodoElemento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<NodoElemento> a = (LinkedList<NodoElemento>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoElemento b = (NodoElemento)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                            RESULT=a;
                                                            if(b!=null){
                                                                RESULT.add(b);
                                                            }
                                                        
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_BOTONES",29, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CONTENIDO_BOTON ::= CONTENIDO_TOTAL 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                        RESULT=new NodoElemento("TEXTO",a,"TEXTO");
                                     
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_BOTON",37, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CONTENIDO_BOTON ::= ETIQUETA_TEXTO 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML a = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                    if(a!=null){
                                        if(a.elemento_id.equals("")){
                                            RESULT=new NodoElemento("TEXTO",a.valor.toString(),"TEXTO");
                                        }else{
                                            RESULT=new NodoElemento("ETIQUETA",a,"ETIQUETA");
                                        }
                                        
                                    }
                                   
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_BOTON",37, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ELEMENTO_BOTON ::= accion igual llavea valor_id parena LISTA_PARAMETROS parenc llavec 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		
                                                                                            RESULT=new NodoElemento("ELEMENTO",a.toString()+"("+b.toString()+")","accion"); 
                                                                                          
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",30, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ELEMENTO_BOTON ::= referencia igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                    RESULT=new NodoElemento("ELEMENTO",a.toString().replaceAll("\"",""),"referencia");
                                                  
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",30, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ELEMENTO_BOTON ::= ancho igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                        //tipo,valor/nombre
                                                        RESULT=new NodoElemento("ELEMENTO",a.toString(),"ancho");
                                                       
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",30, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ELEMENTO_BOTON ::= alto igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                        //tipo,valor/nombre
                                                        RESULT=new NodoElemento("ELEMENTO",a.toString(),"alto");
                                                      
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",30, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ELEMENTO_BOTON ::= y igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                    RESULT=new NodoElemento("ELEMENTO",a.toString(),"y");
                                                   
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",30, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ELEMENTO_BOTON ::= x igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                    RESULT=new NodoElemento("ELEMENTO",a.toString(),"x");
                                                   
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",30, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ELEMENTO_BOTON ::= nombre igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                RESULT=new NodoElemento("ELEMENTO",a.toString().replaceAll("\"",""),"nombre");
                                               
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_BOTON",30, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ETIQUETA_BOTON ::= abre e_boton ELEMENTOS_BOTONES cierra CONTENIDO_BOTON abre div e_boton cierra 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).right;
		LinkedList<NodoElemento> b = (LinkedList<NodoElemento>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).right;
		NodoElemento c = (NodoElemento)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).value;
		
                                                                                                        RESULT=new NodoGXML(this.parser.index,a.toString().toLowerCase(),a.toString().toLowerCase(),b);
                                                                                                        this.parser.index++;
                                                                                                        boolean bandera=false;
                                                                                                        RESULT.elemento_id=RESULT.obtenerNombre();
                                                                                                        if(c.nombre.equals("ETIQUETA")){
                                                                                                            bandera=true;
                                                                                                            RESULT.nodos.add((NodoGXML)c.valor);
                                                                                                            RESULT.valor="ETIQUETA";
                                                                                                        }else if(c.nombre.equals("TEXTO")){
                                                                                                            RESULT.valor=c.valor.toString();
                                                                                                        }
                                                                                                        //vamos a verificar los elementos de texto
                                                                                                        String respuesta=RESULT.elementosBoton(RESULT.elementos,bandera);
                                                                                                        if(respuesta.equals("")){ 
                                                                                                        }else{
                                                                                                            //RESULT=null;
                                                                                                            JOptionPane.showMessageDialog(null,respuesta);
                                                                                                        }
                                                                                                    
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETA_BOTON",19, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ELEMENTO_MULTIMEDIA ::= auto_reproduccion igual TIPO_BOOL 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                            RESULT=new NodoElemento("ELEMENTO",a.toString(),"auto_reproduccion");
                                                          
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",32, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ELEMENTO_MULTIMEDIA ::= ancho igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                            RESULT=new NodoElemento("ELEMENTO",a.toString(),"ancho");
                                                          
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",32, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ELEMENTO_MULTIMEDIA ::= alto igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                            RESULT=new NodoElemento("ELEMENTO",a.toString(),"alto");
                                                         
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",32, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ELEMENTO_MULTIMEDIA ::= y igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                        RESULT=new NodoElemento("ELEMENTO",a.toString(),"y");
                                                      
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",32, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ELEMENTO_MULTIMEDIA ::= x igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                        RESULT=new NodoElemento("ELEMENTO",a.toString(),"x");
                                                      
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",32, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ELEMENTO_MULTIMEDIA ::= nombre igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                    RESULT=new NodoElemento("ELEMENTO",a.toString().replaceAll("\"",""),"nombre");
                                                  
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",32, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ELEMENTO_MULTIMEDIA ::= tipo igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                    if(a.toLowerCase().equals("\"musica\"")){
                                                        RESULT=new NodoElemento("ELEMENTO","musica","tipo");
                                                    }else if(a.toLowerCase().equals("\"video\"")){
                                                        RESULT=new NodoElemento("ELEMENTO","video","tipo");
                                                    }else if(a.toLowerCase().equals("\"imagen\"")){
                                                        RESULT=new NodoElemento("ELEMENTO","imagen","tipo");
                                                    }
                                                    
                                                 
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",32, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ELEMENTO_MULTIMEDIA ::= path igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                RESULT=new NodoElemento("ELEMENTO",a.toString().replaceAll("\"",""),"path");
                                               
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_MULTIMEDIA",32, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ELEMENTOS_MULTIMEDIAS ::= ELEMENTO_MULTIMEDIA 
            {
              LinkedList<NodoElemento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoElemento a = (NodoElemento)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                RESULT=new LinkedList<NodoElemento>();
                                                if(a!=null){
                                                    RESULT.add(a);
                                                }
                                              
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_MULTIMEDIAS",31, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ELEMENTOS_MULTIMEDIAS ::= ELEMENTOS_MULTIMEDIAS ELEMENTO_MULTIMEDIA 
            {
              LinkedList<NodoElemento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<NodoElemento> a = (LinkedList<NodoElemento>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoElemento b = (NodoElemento)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                                        RESULT=a;
                                                                        if(b!=null){
                                                                            RESULT.add(b);
                                                                        }
                                                                      
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_MULTIMEDIAS",31, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ETIQUETA_MULTIMEDIA ::= abre e_multimedia ELEMENTOS_MULTIMEDIAS cierra abre div e_multimedia cierra 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-5)).right;
		LinkedList<NodoElemento> b = (LinkedList<NodoElemento>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-5)).value;
		
                                                                                                        RESULT=new NodoGXML(this.parser.index,a.toString().toLowerCase(),a.toString().toLowerCase(),b);
                                                                                                        this.parser.index++;
                                                                                                        RESULT.elemento_id=RESULT.obtenerNombre();
                                                                                                        //vamos a verificar los elementos de texto
                                                                                                        String respuesta=RESULT.elementosMultimedia(RESULT.elementos);
                                                                                                        if(respuesta.equals("")){ 
                                                                                                        }else{
                                                                                                            //RESULT=null;
                                                                                                            JOptionPane.showMessageDialog(null,respuesta);
                                                                                                        }
                                                                                                    
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETA_MULTIMEDIA",18, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ELEMENTO_CONTROL ::= minimo igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                            //tipo,valor/nombre
                                                            RESULT=new NodoElemento("ELEMENTO",a.toString(),"minimo");
                                                        
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",25, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ELEMENTO_CONTROL ::= maximo igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                            //tipo,valor/nombre
                                                            RESULT=new NodoElemento("ELEMENTO",a.toString(),"maximo");
                                                        
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",25, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ELEMENTO_CONTROL ::= cursiva igual TIPO_BOOL 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                RESULT=new NodoElemento("ELEMENTO",a.toString(),"cursiva");
                                             
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",25, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ELEMENTO_CONTROL ::= negrita igual TIPO_BOOL 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                RESULT=new NodoElemento("ELEMENTO",a.toString(),"negrita");
                                             
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",25, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ELEMENTO_CONTROL ::= color igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                try{
                                                    Color.decode(a.toString().replaceAll("\"",""));
                                                    RESULT=new NodoElemento("ELEMENTO",a.toString().replaceAll("\"",""),"color");
                                                }catch(Exception e){
                                                    JOptionPane.showMessageDialog(null,e.toString()+" Error en la asignacion de valor en el elemento color etiqueta ventana Linea: "+aleft + " Columna: " + aright);
                                                }  
                                              
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",25, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ELEMENTO_CONTROL ::= tam igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                        RESULT=new NodoElemento("ELEMENTO",a.toString(),"tam");
                                                     
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",25, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ELEMENTO_CONTROL ::= fuente igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                    RESULT=new NodoElemento("ELEMENTO",a.toString().replaceAll("\"","").toLowerCase(),"");
                                               
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",25, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ELEMENTO_CONTROL ::= ancho igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                        //tipo,valor/nombre
                                                        RESULT=new NodoElemento("ELEMENTO",a.toString(),"ancho");
                                                       
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",25, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ELEMENTO_CONTROL ::= alto igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                        //tipo,valor/nombre
                                                        RESULT=new NodoElemento("ELEMENTO",a.toString(),"alto");
                                                      
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",25, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ELEMENTO_CONTROL ::= y igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                    RESULT=new NodoElemento("ELEMENTO",a.toString(),"y");
                                                   
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",25, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ELEMENTO_CONTROL ::= x igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                    RESULT=new NodoElemento("ELEMENTO",a.toString(),"x");
                                                   
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",25, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ELEMENTO_CONTROL ::= nombre igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                RESULT=new NodoElemento("ELEMENTO",a.toString().replaceAll("\"",""),"nombre");
                                               
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",25, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ELEMENTO_CONTROL ::= tipo igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                String valor=a.toString().replaceAll("\"","").toLowerCase();
                                                if(valor.equals("texto")){
                                                    RESULT=new NodoElemento("ELEMENTO","texto","tipo");
                                                }else if(valor.equals("textoarea")){
                                                    RESULT=new NodoElemento("ELEMENTO","textoarea","tipo");
                                                }else if(valor.equals("numerico")){
                                                    RESULT=new NodoElemento("ELEMENTO","numerico","tipo");
                                                }else if(valor.equals("desplegable")){
                                                    RESULT=new NodoElemento("ELEMENTO","desplegable","tipo");
                                                }
                                             
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",25, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ELEMENTOS_CONTROLES ::= ELEMENTO_CONTROL 
            {
              LinkedList<NodoElemento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoElemento a = (NodoElemento)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                            RESULT=new LinkedList<NodoElemento>();
                                            if(a!=null){
                                                RESULT.add(a);
                                            }
                                           
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CONTROLES",26, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ELEMENTOS_CONTROLES ::= ELEMENTOS_CONTROLES ELEMENTO_CONTROL 
            {
              LinkedList<NodoElemento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<NodoElemento> a = (LinkedList<NodoElemento>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoElemento b = (NodoElemento)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                                RESULT=a;
                                                                if(b!=null){
                                                                    RESULT.add(b);
                                                                }
                                                               
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CONTROLES",26, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONTENIDO_LISTA ::= abre e_dato cierra CONTENIDO_TOTAL abre div e_dato cierra 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).value;
		
                                                                                RESULT=new NodoGXML(this.parser.index,a.toString().toLowerCase(),a.toString().toLowerCase(),new LinkedList<NodoElemento>());
                                                                                if(b!=null){
                                                                                    RESULT.valor=b.toString();
                                                                                }else{
                                                                                    RESULT=null;
                                                                                }
                                                                              
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_LISTA",35, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONTENIDOS_LISTAS ::= CONTENIDO_LISTA 
            {
              LinkedList<NodoGXML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML a = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                        RESULT=new LinkedList<NodoGXML>();
                                        if(a!=null){
                                            RESULT.add(a);
                                        }
                                    
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDOS_LISTAS",34, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONTENIDOS_LISTAS ::= CONTENIDOS_LISTAS CONTENIDO_LISTA 
            {
              LinkedList<NodoGXML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<NodoGXML> a = (LinkedList<NodoGXML>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML b = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                            RESULT=a;
                                                            if(b!=null){
                                                                RESULT.add(b);
                                                            }
                                                          
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDOS_LISTAS",34, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONTENIDO_CONTROL ::= abre e_listadatos cierra CONTENIDOS_LISTAS abre div e_listadatos cierra 
            {
              LinkedList<NodoGXML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).right;
		LinkedList<NodoGXML> b = (LinkedList<NodoGXML>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).value;
		
                                                                                            RESULT=new LinkedList<NodoGXML>();
                                                                                            NodoGXML nodo_listado=new NodoGXML(this.parser.index,a.toString().toLowerCase(),a.toString().toLowerCase(),new LinkedList<NodoElemento>());
                                                                                            nodo_listado.nodos=b;
                                                                                            RESULT.add(nodo_listado);
                                                                                            this.parser.index++;
                                                                                                                                          
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_CONTROL",27, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONTENIDO_CONTROL ::= abre e_listadatos cierra CONTENIDOS_LISTAS abre div e_listadatos cierra abre e_defecto cierra CONTENIDO_TOTAL abre div e_defecto cierra 
            {
              LinkedList<NodoGXML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-14)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-14)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-14)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-12)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-12)).right;
		LinkedList<NodoGXML> b = (LinkedList<NodoGXML>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-12)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).value;
		
                                                                                            RESULT=new LinkedList<NodoGXML>();
                                                                                            NodoGXML nodo_listado=new NodoGXML(this.parser.index,a.toString().toLowerCase(),a.toString().toLowerCase(),new LinkedList<NodoElemento>());
                                                                                            nodo_listado.nodos=b;
                                                                                            NodoGXML nodo_defecto=new NodoGXML(this.parser.index,c.toString(),c.toString(),new LinkedList<NodoElemento>());
                                                                                            if(d!=null){
                                                                                                nodo_defecto.valor=d.toString();
                                                                                            }
                                                                                            RESULT.add(nodo_listado);
                                                                                            RESULT.add(nodo_defecto);
                                                                                            this.parser.index++;
                                                                                           
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_CONTROL",27, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-15)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONTENIDO_CONTROL ::= abre e_defecto cierra CONTENIDO_TOTAL abre div e_defecto cierra 
            {
              LinkedList<NodoGXML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).value;
		
                                                                                            RESULT=new LinkedList<NodoGXML>();
                                                                                            NodoGXML nodo=new NodoGXML(this.parser.index,a.toString().toLowerCase(),a.toString().toLowerCase(),null);
                                                                                            if(b!=null){
                                                                                                nodo.valor=b.toString();
                                                                                            }
                                                                                            RESULT.add(nodo);
                                                                                            this.parser.index++;
                                                                                        
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_CONTROL",27, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ETIQUETA_CONTROL ::= abre e_control ELEMENTOS_CONTROLES cierra abre div e_control cierra 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-5)).right;
		LinkedList<NodoElemento> b = (LinkedList<NodoElemento>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-5)).value;
		
                                                                                            RESULT=new NodoGXML(this.parser.index,a.toString().toLowerCase(),a.toString().toLowerCase(),b);
                                                                                            this.parser.index++;
                                                                                            //vamos a verificar los elementos de texto
                                                                                            RESULT.nodos=new LinkedList<>();
                                                                                            RESULT.elemento_id=RESULT.obtenerNombre();
                                                                                            String respuesta=RESULT.elementosControl(RESULT.elementos);
                                                                                            if(respuesta.equals("")){ 
                                                                                            }else{
                                                                                                //RESULT=null;
                                                                                                JOptionPane.showMessageDialog(null,respuesta);
                                                                                            }
                                                                                          
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETA_CONTROL",17, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ETIQUETA_CONTROL ::= abre e_control ELEMENTOS_CONTROLES cierra CONTENIDO_CONTROL abre div e_control cierra 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).right;
		LinkedList<NodoElemento> b = (LinkedList<NodoElemento>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).right;
		LinkedList<NodoGXML> c = (LinkedList<NodoGXML>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).value;
		
                                                                                                                RESULT=new NodoGXML(this.parser.index,a.toString().toLowerCase(),a.toString().toLowerCase(),b);
                                                                                                                this.parser.index++;
                                                                                                                //vamos a verificar los elementos de texto
                                                                                                                RESULT.nodos=c;
                                                                                                                RESULT.elemento_id=RESULT.obtenerNombre();
                                                                                                                String respuesta=RESULT.elementosControl(RESULT.elementos);
                                                                                                                if(respuesta.equals("")){ 
                                                                                                                }else{
                                                                                                                    //RESULT=null;
                                                                                                                    JOptionPane.showMessageDialog(null,respuesta);
                                                                                                                }
                                                                                                             
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETA_CONTROL",17, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ELEMENTO_TEXTO ::= cursiva igual TIPO_BOOL 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                            RESULT=new NodoElemento("ELEMENTO",a.toString(),"cursiva");
                                           
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",24, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ELEMENTO_TEXTO ::= negrita igual TIPO_BOOL 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                            RESULT=new NodoElemento("ELEMENTO",a.toString(),"negrita");
                                           
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",24, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ELEMENTO_TEXTO ::= color igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                try{
                                                    Color.decode(a.toString().replaceAll("\"",""));
                                                    RESULT=new NodoElemento("ELEMENTO",a.toString().replaceAll("\"",""),"color");
                                                }catch(Exception e){
                                                    JOptionPane.showMessageDialog(null,e.toString()+" Error en la asignacion de valor en el elemento color etiqueta ventana Linea: "+aleft + " Columna: " + aright);
                                                }  
                                            
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",24, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ELEMENTO_TEXTO ::= tam igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                    RESULT=new NodoElemento("ELEMENTO",a.toString(),"tam");
                                                   
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",24, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ELEMENTO_TEXTO ::= fuente igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                RESULT=new NodoElemento("ELEMENTO",a.toString().replaceAll("\"","").toLowerCase(),"fuente");
                                             
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",24, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ELEMENTO_TEXTO ::= y igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                    RESULT=new NodoElemento("ELEMENTO",a.toString(),"y");
                                                 
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",24, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ELEMENTO_TEXTO ::= x igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                    RESULT=new NodoElemento("ELEMENTO",a.toString(),"x");
                                                 
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",24, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ELEMENTO_TEXTO ::= nombre igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                RESULT=new NodoElemento("ELEMENTO",a.toString().replaceAll("\"",""),"nombre");
                                             
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",24, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ELEMENTOS_TEXTOS ::= ELEMENTO_TEXTO 
            {
              LinkedList<NodoElemento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoElemento a = (NodoElemento)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                    RESULT=new LinkedList<NodoElemento>();
                                    if(a!=null){
                                        RESULT.add(a);
                                    }
                                   
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_TEXTOS",23, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ELEMENTOS_TEXTOS ::= ELEMENTOS_TEXTOS ELEMENTO_TEXTO 
            {
              LinkedList<NodoElemento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<NodoElemento> a = (LinkedList<NodoElemento>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoElemento b = (NodoElemento)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                        RESULT=a;
                                                        if(b!=null){
                                                            RESULT.add(b);
                                                        }
                                                       
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_TEXTOS",23, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ETIQUETA_TEXTO ::= abre e_texto ELEMENTOS_TEXTOS cierra CONTENIDO_TOTAL abre div e_texto cierra 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).right;
		LinkedList<NodoElemento> b = (LinkedList<NodoElemento>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).value;
		
                                                                                                        RESULT=new NodoGXML(this.parser.index,a.toString().toLowerCase(),a.toString().toLowerCase(),b);
                                                                                                        this.parser.index++;
                                                                                                        //vamos a verificar los elementos de texto
                                                                                                        RESULT.valor=c.toString();
                                                                                                        RESULT.elemento_id=RESULT.obtenerNombre();
                                                                                                        String respuesta=RESULT.elementosTexto(RESULT.elementos);
                                                                                                        if(respuesta.equals("")){ 
                                                                                                            
                                                                                                        }else{
                                                                                                            //RESULT=new NodoGXML(this.parser.index,a.toString().toLowerCase(),a.toString().toLowerCase(),new LinkedList<>());
                                                                                                            //RESULT.valor=c.toString();
                                                                                                            JOptionPane.showMessageDialog(null,respuesta);
                                                                                                        }
                                                                                                     
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETA_TEXTO",16, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ETIQUETAS_CONTENEDOR ::= ETIQUETA_ENVIAR 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML a = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                            RESULT=a;
                                        
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETAS_CONTENEDOR",15, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ETIQUETAS_CONTENEDOR ::= ETIQUETA_BOTON 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML a = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                            RESULT=a;
                                        
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETAS_CONTENEDOR",15, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ETIQUETAS_CONTENEDOR ::= ETIQUETA_MULTIMEDIA 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML a = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                            RESULT=a;
                                        
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETAS_CONTENEDOR",15, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ETIQUETAS_CONTENEDOR ::= ETIQUETA_CONTROL 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML a = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                            RESULT=a;
                                        
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETAS_CONTENEDOR",15, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ETIQUETAS_CONTENEDOR ::= ETIQUETA_TEXTO 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML a = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                            RESULT=a;
                                        
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETAS_CONTENEDOR",15, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONTENIDO_CONTENEDOR ::= ETIQUETAS_CONTENEDOR 
            {
              LinkedList<NodoGXML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML a = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                RESULT=new LinkedList<NodoGXML>();
                                                if(a!=null){
                                                    RESULT.add(a);
                                                }
                                             
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_CONTENEDOR",14, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONTENIDO_CONTENEDOR ::= CONTENIDO_CONTENEDOR ETIQUETAS_CONTENEDOR 
            {
              LinkedList<NodoGXML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<NodoGXML> a = (LinkedList<NodoGXML>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML b = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                                        RESULT=a;
                                                                        if(b!=null){
                                                                            RESULT.add(b);
                                                                        }
                                                                     
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_CONTENEDOR",14, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPO_BOOL ::= valor_falso 
            {
              String RESULT =null;
		
                            RESULT="falso";
                         
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("TIPO_BOOL",11, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TIPO_BOOL ::= valor_verdadero 
            {
              String RESULT =null;
		
                                RESULT="verdadero";
                             
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("TIPO_BOOL",11, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ELEMENTO_CONTENEDOR ::= borde igual TIPO_BOOL 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                //tipo,valor/nombre
                                                RESULT=new NodoElemento("ELEMENTO",a.toString(),"borde");
                                               
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ELEMENTO_CONTENEDOR ::= color igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                    try{
                                                        Color.decode(a.toString().replaceAll("\"",""));
                                                        RESULT=new NodoElemento("ELEMENTO",a.toString().replaceAll("\"",""),"color");
                                                    }catch(Exception e){
                                                        JOptionPane.showMessageDialog(null,e.toString()+" Error en la asignacion de valor en el elemento color etiqueta ventana Linea: "+aleft + " Columna: " + aright);
                                                    }                        
                                               
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ELEMENTO_CONTENEDOR ::= ancho igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                            //tipo,valor/nombre
                                                            RESULT=new NodoElemento("ELEMENTO",a.toString(),"ancho");
                                                          
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ELEMENTO_CONTENEDOR ::= alto igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                            //tipo,valor/nombre
                                                            RESULT=new NodoElemento("ELEMENTO",a.toString(),"alto");
                                                         
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ELEMENTO_CONTENEDOR ::= y igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                        //tipo,valor/nombre
                                                        RESULT=new NodoElemento("ELEMENTO",a.toString(),"y");
                                                      
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ELEMENTO_CONTENEDOR ::= x igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                        //tipo,valor/nombre
                                                        RESULT=new NodoElemento("ELEMENTO",a.toString(),"x");
                                                      
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ELEMENTO_CONTENEDOR ::= id igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                RESULT=new NodoElemento("ELEMENTO",a.toString().replaceAll("\"",""),"id");
                                              
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELEMENTOS_CONTENEDORES ::= ELEMENTO_CONTENEDOR 
            {
              LinkedList<NodoElemento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoElemento a = (NodoElemento)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                RESULT=new LinkedList<NodoElemento>();
                                                RESULT.add(a);
                                               
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CONTENEDORES",9, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELEMENTOS_CONTENEDORES ::= ELEMENTOS_CONTENEDORES ELEMENTO_CONTENEDOR 
            {
              LinkedList<NodoElemento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<NodoElemento> a = (LinkedList<NodoElemento>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoElemento b = (NodoElemento)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                                        RESULT=a;
                                                                        RESULT.add(b);
                                                                        
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CONTENEDORES",9, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ETIQUETA_CONTENEDOR ::= abre e_contenedor ELEMENTOS_CONTENEDORES cierra CONTENIDO_CONTENEDOR abre div e_contenedor cierra 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).right;
		LinkedList<NodoElemento> b = (LinkedList<NodoElemento>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).right;
		LinkedList<NodoGXML> c = (LinkedList<NodoGXML>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).value;
		
                                                                                                                                RESULT=new NodoGXML(this.parser.index,a.toString().toLowerCase(),a.toString().toLowerCase(),b);
                                                                                                                                this.parser.index++;
                                                                                                                                //vamos a verificar los elementos del contenedor
                                                                                                                                String respuesta=RESULT.elementosContenedor(RESULT.elementos);
                                                                                                                                RESULT.nodos=c;
                                                                                                                                RESULT.elemento_id=RESULT.obtenerID();
                                                                                                                                if(respuesta.equals("")){ 
                                                                                                                                }else{
                                                                                                                                    RESULT=null;
                                                                                                                                    JOptionPane.showMessageDialog(null,respuesta);
                                                                                                                                }
                                                                                                                             
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETA_CONTENEDOR",8, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONTENIDO_VENTANA ::= ETIQUETA_CONTENEDOR 
            {
              LinkedList<NodoGXML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML a = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                            RESULT=new LinkedList<NodoGXML>();
                                            if(a!=null){
                                                RESULT.add(a);
                                            }
                                          
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_VENTANA",7, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONTENIDO_VENTANA ::= CONTENIDO_VENTANA ETIQUETA_CONTENEDOR 
            {
              LinkedList<NodoGXML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<NodoGXML> a = (LinkedList<NodoGXML>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML b = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                                RESULT=a;
                                                                if(b!=null){
                                                                    a.add(b);
                                                                }
                                                              
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_VENTANA",7, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PARAMETRO ::= valor_falso 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PARAMETRO ::= valor_verdadero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PARAMETRO ::= valor_cadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PARAMETRO ::= valor_numero_completo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PARAMETRO ::= PARAMETRO not PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PARAMETRO ::= PARAMETRO and PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARAMETRO ::= PARAMETRO or PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARAMETRO ::= PARAMETRO diferente PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAMETRO ::= PARAMETRO igualigual PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAMETRO ::= PARAMETRO menorigualq PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAMETRO ::= PARAMETRO mayorigualq PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAMETRO ::= PARAMETRO cierra PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAMETRO ::= PARAMETRO abre PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAMETRO ::= PARAMETRO potencia PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAMETRO ::= PARAMETRO div PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PARAMETRO ::= PARAMETRO por PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PARAMETRO ::= PARAMETRO menos PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PARAMETRO ::= PARAMETRO mas PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARAMETRO ::= 
            {
              String RESULT =null;
		RESULT="";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTA_PARAMETROS ::= PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",12, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTA_PARAMETROS ::= LISTA_PARAMETROS coma PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",12, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ELEMENTO_VENTANA ::= accionfinal igual llavea llavec 
            {
              NodoElemento RESULT =null;
		
                                                                                                RESULT=new NodoElemento("ELEMENTO","vacio","accionfinal"); 
                                                                                               
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",5, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ELEMENTO_VENTANA ::= accioninicial igual llavea llavec 
            {
              NodoElemento RESULT =null;
		
                                                                                                   RESULT=new NodoElemento("ELEMENTO","vacio","accioninicial"); 
                                                                                                 
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",5, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-3)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ELEMENTO_VENTANA ::= accionfinal igual llavea valor_id parena LISTA_PARAMETROS parenc llavec 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		
                                                                                                RESULT=new NodoElemento("ELEMENTO",a.toString()+"("+b.toString()+")","accionfinal"); 
                                                                                               
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",5, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ELEMENTO_VENTANA ::= accioninicial igual llavea valor_id parena LISTA_PARAMETROS parenc llavec 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		
                                                                                                   RESULT=new NodoElemento("ELEMENTO",a.toString()+"("+b.toString()+")","accioninicial"); 
                                                                                                 
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",5, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ELEMENTO_VENTANA ::= ancho igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                        RESULT=new NodoElemento("ELEMENTO",a.toString(),"ancho");
                                                       
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",5, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ELEMENTO_VENTANA ::= alto igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                        RESULT=new NodoElemento("ELEMENTO",a.toString(),"alto");
                                                      
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",5, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ELEMENTO_VENTANA ::= color igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                try{
                                                    Color.decode(b.toString().replaceAll("\"",""));
                                                    RESULT=new NodoElemento("ELEMENTO",b.toString().replaceAll("\"",""),"color");
                                                }catch(Exception e){
                                                    JOptionPane.showMessageDialog(null,e.toString()+" Error en la asignacion de valor en el elemento color etiqueta ventana Linea: "+bleft + " Columna: " + bright);
                                                }
                                              
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",5, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ELEMENTO_VENTANA ::= tipo igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                if(b.toString().replaceAll("\"","").toLowerCase().equals("principal")||b.toString().replaceAll("\"","").toLowerCase().equals("secundaria")){
                                                    RESULT=new NodoElemento("ELEMENTO",b.toString().replaceAll("\"",""),"tipo");
                                                }else{
                                                    JOptionPane.showMessageDialog(null,"Error en la asignacion de tipo en la etiqueta ventana Linea:" + bleft + " Columna: " + bright);
                                                }
                                             
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",5, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ELEMENTO_VENTANA ::= id igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                               RESULT=new NodoElemento("ELEMENTO",b.toString().replaceAll("\"",""),"id");
                                            
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",5, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ELEMENTOS_VENTANAS ::= ELEMENTO_VENTANA 
            {
              LinkedList<NodoElemento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoElemento a = (NodoElemento)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                        RESULT=new LinkedList<NodoElemento>();
                                        if(a!=null){
                                            RESULT.add(a);
                                        }
                                        
                                        
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_VENTANAS",6, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ELEMENTOS_VENTANAS ::= ELEMENTOS_VENTANAS ELEMENTO_VENTANA 
            {
              LinkedList<NodoElemento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<NodoElemento> a = (LinkedList<NodoElemento>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoElemento b = (NodoElemento)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                                RESULT=a;
                                                                if(b!=null){
                                                                    RESULT.add(b);
                                                                }
                                                             
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_VENTANAS",6, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ETIQUETA_VENTANA ::= abre e_ventana ELEMENTOS_VENTANAS cierra CONTENIDO_VENTANA abre div e_ventana cierra 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).right;
		LinkedList<NodoElemento> b = (LinkedList<NodoElemento>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).right;
		LinkedList<NodoGXML> c = (LinkedList<NodoGXML>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).value;
		
                                                                                                                RESULT=new NodoGXML(this.parser.index,a.toString().toLowerCase(),a.toString().toLowerCase(),b);
                                                                                                                this.parser.index++;
                                                                                                                RESULT.nodos=c;
                                                                                                                //vamos a verificar los elementos de la ventana
                                                                                                                String respuesta=RESULT.elementosVentana(RESULT.elementos);
                                                                                                                RESULT.elemento_id=RESULT.obtenerID();
                                                                                                                if(respuesta.equals("")){
                                                                                                                }else{
                                                                                                                    RESULT=null;
                                                                                                                    JOptionPane.showMessageDialog(null,respuesta);
                                                                                                                }
                                                                                                              
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETA_VENTANA",4, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DEFINICION_GENERAL ::= ETIQUETA_VENTANA 
            {
              LinkedList<NodoGXML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML a = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                        RESULT=new LinkedList<NodoGXML>();
                                        if(a!=null){
                                            RESULT.add(a);
                                        }
                                        
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("DEFINICION_GENERAL",22, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEFINICION_GENERAL ::= DEFINICION_GENERAL ETIQUETA_VENTANA 
            {
              LinkedList<NodoGXML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<NodoGXML> a = (LinkedList<NodoGXML>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML b = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                                RESULT=a;
                                                                if(b!=null){
                                                                    a.add(b);
                                                                }
                                                             
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("DEFINICION_GENERAL",22, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONTENIDO_IMPORTAR ::= valor_path4 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                        RESULT=new NodoGXML(false);
                                        RESULT.valor=a.toString();
                                        RESULT.index=this.parser.index;
                                        this.parser.index++;
                                   
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IMPORTAR",3, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTENIDO_IMPORTAR ::= valor_path3 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                        RESULT=new NodoGXML(true);
                                        RESULT.valor=a.toString();
                                        RESULT.index=this.parser.index;
                                        this.parser.index++;
                                   
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IMPORTAR",3, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTENIDO_IMPORTAR ::= valor_path2 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                        RESULT=new NodoGXML(false);
                                        RESULT.valor=a.toString();
                                        RESULT.index=this.parser.index;
                                        this.parser.index++;
                                   
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IMPORTAR",3, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTENIDO_IMPORTAR ::= valor_path 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                    RESULT=new NodoGXML(true);
                                    RESULT.valor=a.toString();
                                    RESULT.index=this.parser.index;
                                    this.parser.index++;
                                  
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IMPORTAR",3, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ETIQUETA_IMPORTAR ::= abre e_importar cierra CONTENIDO_IMPORTAR abre div e_importar cierra 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).right;
		NodoGXML b = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).value;
		
                                                                                                RESULT=b;
                                                                                                RESULT.tipo_etiqueta="importar";
                                                                                                RESULT.id=a.toString();
                                                                                            
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETA_IMPORTAR",2, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEFINICION_IMPORTAR ::= ETIQUETA_IMPORTAR 
            {
              LinkedList<NodoGXML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML a = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                            
                                            RESULT=new LinkedList<NodoGXML>();
                                            if(a!=null){
                                                RESULT.add(a);
                                            }
                                            
                                          
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("DEFINICION_IMPORTAR",21, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DEFINICION_IMPORTAR ::= DEFINICION_IMPORTAR ETIQUETA_IMPORTAR 
            {
              LinkedList<NodoGXML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<NodoGXML> a = (LinkedList<NodoGXML>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML b = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                                RESULT=a;
                                                                if(b!=null){
                                                                    RESULT.add(b);
                                                                }
                                                                
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("DEFINICION_IMPORTAR",21, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // GENERAL ::= DEFINICION_GENERAL 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		LinkedList<NodoGXML> a = (LinkedList<NodoGXML>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                RESULT=new NodoGXML();
                                RESULT.nodos=a;
                               
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("GENERAL",1, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // GENERAL ::= DEFINICION_IMPORTAR DEFINICION_GENERAL 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<NodoGXML> a = (LinkedList<NodoGXML>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		LinkedList<NodoGXML> b = (LinkedList<NodoGXML>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                    RESULT=new NodoGXML();
                                                    RESULT.id="RAIZ";
                                                    RESULT.tipo_etiqueta="RAIZ";
                                                    RESULT.nodos=a;
                                                    RESULT.AgregarNodos(b);
                                                   
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("GENERAL",1, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIAL ::= GENERAL 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML a = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                    this.parser.root=a;
                 
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("INICIAL",0, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		NodoGXML start_val = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		RESULT = start_val;
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintacticoGXML$parser.done_parsing();
          return CUP$sintacticoGXML$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

