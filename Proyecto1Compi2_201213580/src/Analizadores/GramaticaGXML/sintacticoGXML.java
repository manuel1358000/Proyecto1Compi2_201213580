
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Feb 17 18:58:21 CST 2019
//----------------------------------------------------

package Analizadores.GramaticaGXML;

import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.lang.*;
import javax.swing.JOptionPane;
import java.io.*;
import java.util.LinkedList;
import Auxiliares.NodoGXML;
import Auxiliares.NodoElemento;
import java.awt.Color;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Feb 17 18:58:21 CST 2019
  */
public class sintacticoGXML extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public sintacticoGXML() {super();}

  /** Constructor which sets the default scanner. */
  public sintacticoGXML(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintacticoGXML(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\027\004\000\002\027\003" +
    "\000\002\004\012\000\002\004\003\000\002\005\003\000" +
    "\002\005\003\000\002\030\004\000\002\030\003\000\002" +
    "\006\013\000\002\010\004\000\002\010\003\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\012" +
    "\000\002\007\011\000\002\016\005\000\002\016\003\000" +
    "\002\017\002\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\011" +
    "\004\000\002\011\003\000\002\012\013\000\002\013\004" +
    "\000\002\013\003\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\015\003\000\002\015" +
    "\003\000\002\020\004\000\002\020\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\022\012\000\002\031\004\000\002" +
    "\031\003\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\023\012\000" +
    "\002\034\004\000\002\034\003\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\012\000\002" +
    "\024\011\000\002\025\011\000\002\026\012\000\002\035" +
    "\004\000\002\035\003\000\002\036\005\000\002\036\005" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\005\000\002\036\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\006\003\005\046\007\001\002\000\006\003" +
    "\005\046\007\001\002\000\006\003\ufffa\046\ufffa\001\002" +
    "\000\006\003\ufffc\046\ufffc\001\002\000\006\004\u0108\005" +
    "\017\001\002\000\006\002\ufff6\046\ufff6\001\002\000\006" +
    "\002\ufffe\046\015\001\002\000\004\002\014\001\002\000" +
    "\004\002\000\001\002\000\004\002\001\001\002\000\004" +
    "\005\017\001\002\000\006\002\ufff7\046\ufff7\001\002\000" +
    "\014\017\026\020\022\021\020\043\024\044\023\001\002" +
    "\000\004\051\u0106\001\002\000\016\017\026\020\022\021" +
    "\020\043\024\044\023\047\113\001\002\000\004\051\111" +
    "\001\002\000\004\051\103\001\002\000\004\051\031\001" +
    "\002\000\016\017\ufff3\020\ufff3\021\ufff3\043\ufff3\044\ufff3" +
    "\047\ufff3\001\002\000\004\051\027\001\002\000\004\101" +
    "\030\001\002\000\016\017\ufff2\020\ufff2\021\ufff2\043\ufff2" +
    "\044\ufff2\047\ufff2\001\002\000\004\053\032\001\002\000" +
    "\004\075\033\001\002\000\004\055\034\001\002\000\052" +
    "\046\uffeb\047\uffeb\050\uffeb\056\uffeb\057\uffeb\060\uffeb\061" +
    "\uffeb\062\uffeb\063\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb" +
    "\072\uffeb\073\uffeb\074\uffeb\076\035\101\036\102\037\103" +
    "\042\001\002\000\042\046\uffdc\047\uffdc\050\uffdc\056\uffdc" +
    "\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc\066\uffdc\067" +
    "\uffdc\070\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc\001\002" +
    "\000\042\046\uffdb\047\uffdb\050\uffdb\056\uffdb\057\uffdb\060" +
    "\uffdb\061\uffdb\062\uffdb\063\uffdb\066\uffdb\067\uffdb\070\uffdb" +
    "\071\uffdb\072\uffdb\073\uffdb\074\uffdb\001\002\000\042\046" +
    "\uffda\047\uffda\050\uffda\056\uffda\057\uffda\060\uffda\061\uffda" +
    "\062\uffda\063\uffda\066\uffda\067\uffda\070\uffda\071\uffda\072" +
    "\uffda\073\uffda\074\uffda\001\002\000\042\046\063\047\060" +
    "\050\047\056\uffec\057\uffec\060\062\061\053\062\057\063" +
    "\046\066\061\067\056\070\054\071\055\072\051\073\052" +
    "\074\050\001\002\000\006\056\043\057\044\001\002\000" +
    "\042\046\uffd9\047\uffd9\050\uffd9\056\uffd9\057\uffd9\060\uffd9" +
    "\061\uffd9\062\uffd9\063\uffd9\066\uffd9\067\uffd9\070\uffd9\071" +
    "\uffd9\072\uffd9\073\uffd9\074\uffd9\001\002\000\004\054\102" +
    "\001\002\000\052\046\uffeb\047\uffeb\050\uffeb\056\uffeb\057" +
    "\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb\066\uffeb\067\uffeb" +
    "\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\076\035\101" +
    "\036\102\037\103\042\001\002\000\042\046\063\047\060" +
    "\050\047\056\uffed\057\uffed\060\062\061\053\062\057\063" +
    "\046\066\061\067\056\070\054\071\055\072\051\073\052" +
    "\074\050\001\002\000\052\046\uffeb\047\uffeb\050\uffeb\056" +
    "\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb\066\uffeb" +
    "\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\076" +
    "\035\101\036\102\037\103\042\001\002\000\052\046\uffeb" +
    "\047\uffeb\050\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062" +
    "\uffeb\063\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb" +
    "\073\uffeb\074\uffeb\076\035\101\036\102\037\103\042\001" +
    "\002\000\052\046\uffeb\047\uffeb\050\uffeb\056\uffeb\057\uffeb" +
    "\060\uffeb\061\uffeb\062\uffeb\063\uffeb\066\uffeb\067\uffeb\070" +
    "\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\076\035\101\036" +
    "\102\037\103\042\001\002\000\052\046\uffeb\047\uffeb\050" +
    "\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb" +
    "\066\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074" +
    "\uffeb\076\035\101\036\102\037\103\042\001\002\000\052" +
    "\046\uffeb\047\uffeb\050\uffeb\056\uffeb\057\uffeb\060\uffeb\061" +
    "\uffeb\062\uffeb\063\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb" +
    "\072\uffeb\073\uffeb\074\uffeb\076\035\101\036\102\037\103" +
    "\042\001\002\000\052\046\uffeb\047\uffeb\050\uffeb\056\uffeb" +
    "\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb\066\uffeb\067" +
    "\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\076\035" +
    "\101\036\102\037\103\042\001\002\000\052\046\uffeb\047" +
    "\uffeb\050\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb" +
    "\063\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073" +
    "\uffeb\074\uffeb\076\035\101\036\102\037\103\042\001\002" +
    "\000\052\046\uffeb\047\uffeb\050\uffeb\056\uffeb\057\uffeb\060" +
    "\uffeb\061\uffeb\062\uffeb\063\uffeb\066\uffeb\067\uffeb\070\uffeb" +
    "\071\uffeb\072\uffeb\073\uffeb\074\uffeb\076\035\101\036\102" +
    "\037\103\042\001\002\000\052\046\uffeb\047\uffeb\050\uffeb" +
    "\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb\066" +
    "\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb" +
    "\076\035\101\036\102\037\103\042\001\002\000\052\046" +
    "\uffeb\047\uffeb\050\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb" +
    "\062\uffeb\063\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb\072" +
    "\uffeb\073\uffeb\074\uffeb\076\035\101\036\102\037\103\042" +
    "\001\002\000\052\046\uffeb\047\uffeb\050\uffeb\056\uffeb\057" +
    "\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb\066\uffeb\067\uffeb" +
    "\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\076\035\101" +
    "\036\102\037\103\042\001\002\000\052\046\uffeb\047\uffeb" +
    "\050\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063" +
    "\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb" +
    "\074\uffeb\076\035\101\036\102\037\103\042\001\002\000" +
    "\052\046\uffeb\047\uffeb\050\uffeb\056\uffeb\057\uffeb\060\uffeb" +
    "\061\uffeb\062\uffeb\063\uffeb\066\uffeb\067\uffeb\070\uffeb\071" +
    "\uffeb\072\uffeb\073\uffeb\074\uffeb\076\035\101\036\102\037" +
    "\103\042\001\002\000\052\046\uffeb\047\uffeb\050\uffeb\056" +
    "\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb\066\uffeb" +
    "\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\076" +
    "\035\101\036\102\037\103\042\001\002\000\042\046\uffe5" +
    "\047\uffe5\050\047\056\uffe5\057\uffe5\060\062\061\053\062" +
    "\057\063\046\066\uffe5\067\uffe5\070\uffe5\071\uffe5\072\uffe5" +
    "\073\uffe5\074\uffe5\001\002\000\042\046\uffea\047\uffea\050" +
    "\047\056\uffea\057\uffea\060\uffea\061\uffea\062\057\063\046" +
    "\066\uffea\067\uffea\070\uffea\071\uffea\072\uffea\073\uffea\074" +
    "\uffea\001\002\000\042\046\uffe3\047\uffe3\050\047\056\uffe3" +
    "\057\uffe3\060\062\061\053\062\057\063\046\066\uffe3\067" +
    "\uffe3\070\uffe3\071\uffe3\072\uffe3\073\uffe3\074\uffe3\001\002" +
    "\000\042\046\uffe4\047\uffe4\050\047\056\uffe4\057\uffe4\060" +
    "\062\061\053\062\057\063\046\066\uffe4\067\uffe4\070\uffe4" +
    "\071\uffe4\072\uffe4\073\uffe4\074\uffe4\001\002\000\042\046" +
    "\uffe8\047\uffe8\050\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8" +
    "\062\uffe8\063\046\066\uffe8\067\uffe8\070\uffe8\071\uffe8\072" +
    "\uffe8\073\uffe8\074\uffe8\001\002\000\042\046\uffe2\047\uffe2" +
    "\050\047\056\uffe2\057\uffe2\060\062\061\053\062\057\063" +
    "\046\066\uffe2\067\uffe2\070\uffe2\071\uffe2\072\uffe2\073\uffe2" +
    "\074\uffe2\001\002\000\042\046\uffe0\047\uffe0\050\047\056" +
    "\uffe0\057\uffe0\060\062\061\053\062\057\063\046\066\uffe0" +
    "\067\uffe0\070\uffe0\071\uffe0\072\uffe0\073\uffe0\074\uffe0\001" +
    "\002\000\042\046\uffe1\047\uffe1\050\047\056\uffe1\057\uffe1" +
    "\060\062\061\053\062\057\063\046\066\uffe1\067\uffe1\070" +
    "\uffe1\071\uffe1\072\uffe1\073\uffe1\074\uffe1\001\002\000\042" +
    "\046\uffe9\047\uffe9\050\047\056\uffe9\057\uffe9\060\uffe9\061" +
    "\uffe9\062\057\063\046\066\uffe9\067\uffe9\070\uffe9\071\uffe9" +
    "\072\uffe9\073\uffe9\074\uffe9\001\002\000\042\046\063\047" +
    "\060\050\047\056\uffde\057\uffde\060\062\061\053\062\057" +
    "\063\046\066\061\067\056\070\054\071\055\072\uffde\073" +
    "\uffde\074\050\001\002\000\042\046\063\047\060\050\047" +
    "\056\uffdf\057\uffdf\060\062\061\053\062\057\063\046\066" +
    "\061\067\056\070\054\071\055\072\uffdf\073\052\074\050" +
    "\001\002\000\042\046\063\047\060\050\047\056\uffdd\057" +
    "\uffdd\060\062\061\053\062\057\063\046\066\061\067\056" +
    "\070\054\071\055\072\uffdd\073\uffdd\074\050\001\002\000" +
    "\042\046\uffe7\047\uffe7\050\uffe7\056\uffe7\057\uffe7\060\uffe7" +
    "\061\uffe7\062\uffe7\063\046\066\uffe7\067\uffe7\070\uffe7\071" +
    "\uffe7\072\uffe7\073\uffe7\074\uffe7\001\002\000\042\046\uffe6" +
    "\047\uffe6\050\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062" +
    "\uffe6\063\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6\072\uffe6" +
    "\073\uffe6\074\uffe6\001\002\000\016\017\uffef\020\uffef\021" +
    "\uffef\043\uffef\044\uffef\047\uffef\001\002\000\004\053\104" +
    "\001\002\000\004\075\105\001\002\000\004\055\106\001" +
    "\002\000\052\046\uffeb\047\uffeb\050\uffeb\056\uffeb\057\uffeb" +
    "\060\uffeb\061\uffeb\062\uffeb\063\uffeb\066\uffeb\067\uffeb\070" +
    "\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\076\035\101\036" +
    "\102\037\103\042\001\002\000\006\056\110\057\044\001" +
    "\002\000\016\017\uffee\020\uffee\021\uffee\043\uffee\044\uffee" +
    "\047\uffee\001\002\000\004\101\112\001\002\000\016\017" +
    "\ufff1\020\ufff1\021\ufff1\043\ufff1\044\ufff1\047\ufff1\001\002" +
    "\000\004\046\116\001\002\000\016\017\ufff4\020\ufff4\021" +
    "\ufff4\043\ufff4\044\ufff4\047\ufff4\001\002\000\004\046\u0101" +
    "\001\002\000\004\006\120\001\002\000\004\046\uffd7\001" +
    "\002\000\020\017\121\021\123\022\130\023\126\024\131" +
    "\025\124\026\122\001\002\000\004\051\377\001\002\000" +
    "\004\051\375\001\002\000\004\051\373\001\002\000\004" +
    "\051\371\001\002\000\022\017\121\021\123\022\130\023" +
    "\126\024\131\025\124\026\122\047\141\001\002\000\004" +
    "\051\136\001\002\000\022\017\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\047\uffd4\001\002\000\004" +
    "\051\134\001\002\000\004\051\132\001\002\000\004\076" +
    "\133\001\002\000\022\017\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\026\uffd0\047\uffd0\001\002\000\004\076" +
    "\135\001\002\000\022\017\uffd2\021\uffd2\022\uffd2\023\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\047\uffd2\001\002\000\004\076" +
    "\137\001\002\000\022\017\uffd1\021\uffd1\022\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\047\uffd1\001\002\000\022\017" +
    "\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5" +
    "\047\uffd5\001\002\000\004\046\145\001\002\000\004\046" +
    "\uffc9\001\002\000\004\046\uffc4\001\002\000\004\046\uffc6" +
    "\001\002\000\014\007\155\010\154\014\161\015\156\016" +
    "\157\001\002\000\004\046\uffc8\001\002\000\004\046\uffc7" +
    "\001\002\000\004\046\uffc5\001\002\000\004\046\153\001" +
    "\002\000\004\046\uffca\001\002\000\016\007\155\010\154" +
    "\014\161\015\156\016\157\050\160\001\002\000\036\020" +
    "\313\021\304\022\311\023\307\024\321\025\305\027\317" +
    "\030\320\031\310\032\302\033\303\034\312\035\306\042" +
    "\314\001\002\000\022\021\242\022\247\023\246\027\250" +
    "\030\251\031\245\032\240\033\241\001\002\000\004\047" +
    "\233\001\002\000\020\022\177\023\175\024\201\025\173" +
    "\027\200\042\176\045\171\001\002\000\004\006\167\001" +
    "\002\000\004\047\162\001\002\000\004\046\163\001\002" +
    "\000\004\050\164\001\002\000\004\014\165\001\002\000" +
    "\004\047\166\001\002\000\004\046\uffa7\001\002\000\004" +
    "\047\170\001\002\000\004\046\uffd6\001\002\000\004\051" +
    "\231\001\002\000\022\022\177\023\175\024\201\025\173" +
    "\027\200\042\176\045\171\047\224\001\002\000\004\051" +
    "\221\001\002\000\022\022\uffa3\023\uffa3\024\uffa3\025\uffa3" +
    "\027\uffa3\042\uffa3\045\uffa3\047\uffa3\001\002\000\004\051" +
    "\217\001\002\000\004\051\210\001\002\000\004\051\206" +
    "\001\002\000\004\051\204\001\002\000\004\051\202\001" +
    "\002\000\004\076\203\001\002\000\022\022\uff9f\023\uff9f" +
    "\024\uff9f\025\uff9f\027\uff9f\042\uff9f\045\uff9f\047\uff9f\001" +
    "\002\000\004\101\205\001\002\000\022\022\uffa2\023\uffa2" +
    "\024\uffa2\025\uffa2\027\uffa2\042\uffa2\045\uffa2\047\uffa2\001" +
    "\002\000\004\076\207\001\002\000\022\022\uffa1\023\uffa1" +
    "\024\uffa1\025\uffa1\027\uffa1\042\uffa1\045\uffa1\047\uffa1\001" +
    "\002\000\004\053\211\001\002\000\004\075\212\001\002" +
    "\000\004\055\213\001\002\000\052\046\uffeb\047\uffeb\050" +
    "\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb" +
    "\066\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074" +
    "\uffeb\076\035\101\036\102\037\103\042\001\002\000\006" +
    "\056\215\057\044\001\002\000\004\054\216\001\002\000" +
    "\022\022\uff9c\023\uff9c\024\uff9c\025\uff9c\027\uff9c\042\uff9c" +
    "\045\uff9c\047\uff9c\001\002\000\004\076\220\001\002\000" +
    "\022\022\uffa0\023\uffa0\024\uffa0\025\uffa0\027\uffa0\042\uffa0" +
    "\045\uffa0\047\uffa0\001\002\000\004\076\222\001\002\000" +
    "\022\022\uff9e\023\uff9e\024\uff9e\025\uff9e\027\uff9e\042\uff9e" +
    "\045\uff9e\047\uff9e\001\002\000\022\022\uffa4\023\uffa4\024" +
    "\uffa4\025\uffa4\027\uffa4\042\uffa4\045\uffa4\047\uffa4\001\002" +
    "\000\004\046\225\001\002\000\004\050\226\001\002\000" +
    "\004\016\227\001\002\000\004\047\230\001\002\000\004" +
    "\046\uffa5\001\002\000\004\101\232\001\002\000\022\022" +
    "\uff9d\023\uff9d\024\uff9d\025\uff9d\027\uff9d\042\uff9d\045\uff9d" +
    "\047\uff9d\001\002\000\004\046\234\001\002\000\004\050" +
    "\235\001\002\000\004\015\236\001\002\000\004\047\237" +
    "\001\002\000\004\046\uffa6\001\002\000\004\051\300\001" +
    "\002\000\004\051\274\001\002\000\004\051\272\001\002" +
    "\000\024\021\uffc1\022\uffc1\023\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\047\uffc1\001\002\000\024\021\242" +
    "\022\247\023\246\027\250\030\251\031\245\032\240\033" +
    "\241\047\265\001\002\000\004\051\262\001\002\000\004" +
    "\051\260\001\002\000\004\051\256\001\002\000\004\051" +
    "\254\001\002\000\004\051\252\001\002\000\004\101\253" +
    "\001\002\000\024\021\uffbd\022\uffbd\023\uffbd\027\uffbd\030" +
    "\uffbd\031\uffbd\032\uffbd\033\uffbd\047\uffbd\001\002\000\004" +
    "\101\255\001\002\000\024\021\uffc0\022\uffc0\023\uffc0\027" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\047\uffc0\001\002" +
    "\000\004\076\257\001\002\000\024\021\uffbf\022\uffbf\023" +
    "\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\047\uffbf" +
    "\001\002\000\004\076\261\001\002\000\024\021\uffbe\022" +
    "\uffbe\023\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe" +
    "\047\uffbe\001\002\000\004\076\263\001\002\000\024\021" +
    "\uffbc\022\uffbc\023\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc" +
    "\033\uffbc\047\uffbc\001\002\000\024\021\uffc2\022\uffc2\023" +
    "\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\047\uffc2" +
    "\001\002\000\004\046\266\001\002\000\004\050\267\001" +
    "\002\000\004\007\270\001\002\000\004\047\271\001\002" +
    "\000\004\046\uffc3\001\002\000\004\101\273\001\002\000" +
    "\024\021\uffbb\022\uffbb\023\uffbb\027\uffbb\030\uffbb\031\uffbb" +
    "\032\uffbb\033\uffbb\047\uffbb\001\002\000\006\102\276\103" +
    "\277\001\002\000\024\021\uffb9\022\uffb9\023\uffb9\027\uffb9" +
    "\030\uffb9\031\uffb9\032\uffb9\033\uffb9\047\uffb9\001\002\000" +
    "\044\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\042\uffcc\047\uffcc\001\002\000\044" +
    "\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\035\uffcb\042\uffcb\047\uffcb\001\002\000\006\102" +
    "\276\103\277\001\002\000\024\021\uffba\022\uffba\023\uffba" +
    "\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\047\uffba\001" +
    "\002\000\004\051\367\001\002\000\004\051\365\001\002" +
    "\000\004\051\363\001\002\000\004\051\361\001\002\000" +
    "\004\051\357\001\002\000\004\051\355\001\002\000\004" +
    "\051\353\001\002\000\004\051\351\001\002\000\004\051" +
    "\347\001\002\000\004\051\345\001\002\000\004\051\336" +
    "\001\002\000\040\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024" +
    "\uffb6\025\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6" +
    "\034\uffb6\035\uffb6\042\uffb6\047\uffb6\001\002\000\040\020" +
    "\313\021\304\022\311\023\307\024\321\025\305\027\317" +
    "\030\320\031\310\032\302\033\303\034\312\035\306\042" +
    "\314\047\330\001\002\000\004\051\326\001\002\000\004" +
    "\051\324\001\002\000\004\051\322\001\002\000\004\076" +
    "\323\001\002\000\040\020\uffb1\021\uffb1\022\uffb1\023\uffb1" +
    "\024\uffb1\025\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033" +
    "\uffb1\034\uffb1\035\uffb1\042\uffb1\047\uffb1\001\002\000\004" +
    "\101\325\001\002\000\040\020\uffaf\021\uffaf\022\uffaf\023" +
    "\uffaf\024\uffaf\025\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf" +
    "\033\uffaf\034\uffaf\035\uffaf\042\uffaf\047\uffaf\001\002\000" +
    "\004\101\327\001\002\000\040\020\uffb4\021\uffb4\022\uffb4" +
    "\023\uffb4\024\uffb4\025\uffb4\027\uffb4\030\uffb4\031\uffb4\032" +
    "\uffb4\033\uffb4\034\uffb4\035\uffb4\042\uffb4\047\uffb4\001\002" +
    "\000\004\046\332\001\002\000\040\020\uffb7\021\uffb7\022" +
    "\uffb7\023\uffb7\024\uffb7\025\uffb7\027\uffb7\030\uffb7\031\uffb7" +
    "\032\uffb7\033\uffb7\034\uffb7\035\uffb7\042\uffb7\047\uffb7\001" +
    "\002\000\004\050\333\001\002\000\004\010\334\001\002" +
    "\000\004\047\335\001\002\000\004\046\uffb8\001\002\000" +
    "\004\053\337\001\002\000\004\075\340\001\002\000\004" +
    "\055\341\001\002\000\052\046\uffeb\047\uffeb\050\uffeb\056" +
    "\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb\066\uffeb" +
    "\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\076" +
    "\035\101\036\102\037\103\042\001\002\000\006\056\343" +
    "\057\044\001\002\000\004\054\344\001\002\000\040\020" +
    "\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\027\uffa8" +
    "\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\042" +
    "\uffa8\047\uffa8\001\002\000\004\101\346\001\002\000\040" +
    "\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\027" +
    "\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5" +
    "\042\uffb5\047\uffb5\001\002\000\004\076\350\001\002\000" +
    "\040\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa" +
    "\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035" +
    "\uffaa\042\uffaa\047\uffaa\001\002\000\004\076\352\001\002" +
    "\000\040\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025" +
    "\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3" +
    "\035\uffb3\042\uffb3\047\uffb3\001\002\000\004\076\354\001" +
    "\002\000\040\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae" +
    "\025\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034" +
    "\uffae\035\uffae\042\uffae\047\uffae\001\002\000\004\076\356" +
    "\001\002\000\040\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024" +
    "\uffb2\025\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2" +
    "\034\uffb2\035\uffb2\042\uffb2\047\uffb2\001\002\000\004\076" +
    "\360\001\002\000\040\020\uffa9\021\uffa9\022\uffa9\023\uffa9" +
    "\024\uffa9\025\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033" +
    "\uffa9\034\uffa9\035\uffa9\042\uffa9\047\uffa9\001\002\000\004" +
    "\076\362\001\002\000\040\020\uffb0\021\uffb0\022\uffb0\023" +
    "\uffb0\024\uffb0\025\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0" +
    "\033\uffb0\034\uffb0\035\uffb0\042\uffb0\047\uffb0\001\002\000" +
    "\004\101\364\001\002\000\040\020\uffad\021\uffad\022\uffad" +
    "\023\uffad\024\uffad\025\uffad\027\uffad\030\uffad\031\uffad\032" +
    "\uffad\033\uffad\034\uffad\035\uffad\042\uffad\047\uffad\001\002" +
    "\000\006\102\276\103\277\001\002\000\040\020\uffab\021" +
    "\uffab\022\uffab\023\uffab\024\uffab\025\uffab\027\uffab\030\uffab" +
    "\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\042\uffab\047" +
    "\uffab\001\002\000\006\102\276\103\277\001\002\000\040" +
    "\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\027" +
    "\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac" +
    "\042\uffac\047\uffac\001\002\000\004\076\372\001\002\000" +
    "\022\017\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf" +
    "\026\uffcf\047\uffcf\001\002\000\004\101\374\001\002\000" +
    "\022\017\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce" +
    "\026\uffce\047\uffce\001\002\000\006\102\276\103\277\001" +
    "\002\000\022\017\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd" +
    "\025\uffcd\026\uffcd\047\uffcd\001\002\000\004\101\u0100\001" +
    "\002\000\022\017\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\047\uffd3\001\002\000\006\006\120\050" +
    "\u0103\001\002\000\004\046\uffd8\001\002\000\004\005\u0104" +
    "\001\002\000\004\047\u0105\001\002\000\006\002\ufff5\046" +
    "\ufff5\001\002\000\004\101\u0107\001\002\000\016\017\ufff0" +
    "\020\ufff0\021\ufff0\043\ufff0\044\ufff0\047\ufff0\001\002\000" +
    "\004\047\u0109\001\002\000\006\077\u010c\100\u010b\001\002" +
    "\000\004\046\u010d\001\002\000\004\046\ufff8\001\002\000" +
    "\004\046\ufff9\001\002\000\004\050\u010e\001\002\000\004" +
    "\004\u010f\001\002\000\004\047\u0110\001\002\000\006\003" +
    "\ufffb\046\ufffb\001\002\000\006\003\ufffd\046\ufffd\001\002" +
    "\000\006\002\uffff\046\015\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\016\002\011\003\012\004\005\006\007\027" +
    "\003\030\010\001\001\000\010\004\u0110\006\007\030\u0111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\024\010\020\001\001" +
    "\000\002\001\001\000\004\007\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\040\017\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\044\001" +
    "\001\000\002\001\001\000\004\017\100\001\001\000\004" +
    "\017\077\001\001\000\004\017\076\001\001\000\004\017" +
    "\075\001\001\000\004\017\074\001\001\000\004\017\073" +
    "\001\001\000\004\017\072\001\001\000\004\017\071\001" +
    "\001\000\004\017\070\001\001\000\004\017\067\001\001" +
    "\000\004\017\066\001\001\000\004\017\065\001\001\000" +
    "\004\017\064\001\001\000\004\017\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\106\017\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\114\012\116\001\001\000\002" +
    "\001\001\000\004\012\u0101\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\124\014\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\020\150\021\141\022\145\023\146\024\143\025\147" +
    "\026\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\021\151\022\145\023" +
    "\146\024\143\025\147\026\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\033\314\034\315\001\001\000" +
    "\006\031\243\032\242\001\001\000\002\001\001\000\006" +
    "\035\171\036\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\222\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\213\017\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\263\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\274\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\300\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\330\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\341\017\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\365\001\001\000\002\001\001\000\004\015\367\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\375\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\u0109\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\015\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintacticoGXML$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintacticoGXML$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintacticoGXML$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public NodoGXML root;
    public static int index=0;
    public void syntax_error(Symbol s){
        System.out.println("Error en la linea "+(s.right+1)+" Columna "+s.left+". Identificador "+s.value+" no reconocido"); 
    }
    /**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        javax.swing.JOptionPane.showMessageDialog(null,"Error Sintactico en la linea "+(s.right+1)+"Columna "+s.left+". Identificador"+s.value+" no reconocido.");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$sintacticoGXML$actions {

  

  private final sintacticoGXML parser;

  /** Constructor */
  CUP$sintacticoGXML$actions(sintacticoGXML parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$sintacticoGXML$do_action(
    int                        CUP$sintacticoGXML$act_num,
    java_cup.runtime.lr_parser CUP$sintacticoGXML$parser,
    java.util.Stack            CUP$sintacticoGXML$stack,
    int                        CUP$sintacticoGXML$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintacticoGXML$result;

      /* select the action based on the action number */
      switch (CUP$sintacticoGXML$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ELEMENTO_ENVIAR ::= accion igual llavea valor_id parena LISTA_PARAMETROS parenc llavec 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		
                                                                                            RESULT=new NodoElemento("ELEMENTO",a.toString()+"("+b.toString()+")","accion"); 
                                                                                          
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",28, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ELEMENTO_ENVIAR ::= referencia igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                    RESULT=new NodoElemento("ELEMENTO",a.toString().replaceAll("\"",""),"referencia");
                                                  
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",28, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ELEMENTO_ENVIAR ::= ancho igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                        //tipo,valor/nombre
                                                        RESULT=new NodoElemento("ELEMENTO",a.toString(),"ancho");
                                                       
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",28, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ELEMENTO_ENVIAR ::= alto igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                        //tipo,valor/nombre
                                                        RESULT=new NodoElemento("ELEMENTO",a.toString(),"alto");
                                                      
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",28, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ELEMENTO_ENVIAR ::= y igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                    RESULT=new NodoElemento("ELEMENTO",a.toString(),"y");
                                                   
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",28, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ELEMENTO_ENVIAR ::= x igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                    RESULT=new NodoElemento("ELEMENTO",a.toString(),"x");
                                                   
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",28, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ELEMENTO_ENVIAR ::= nombre igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                RESULT=new NodoElemento("ELEMENTO",a.toString().replaceAll("\"",""),"nombre");
                                               
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_ENVIAR",28, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ELEMENTOS_ENVIAR ::= ELEMENTO_ENVIAR 
            {
              LinkedList<NodoElemento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoElemento a = (NodoElemento)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                        RESULT=new LinkedList<NodoElemento>();
                                        if(a!=null){
                                            RESULT.add(a);
                                        }
                                     
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_ENVIAR",27, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ELEMENTOS_ENVIAR ::= ELEMENTOS_ENVIAR ELEMENTO_ENVIAR 
            {
              LinkedList<NodoElemento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<NodoElemento> a = (LinkedList<NodoElemento>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoElemento b = (NodoElemento)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                            RESULT=a;
                                                            if(b!=null){
                                                                RESULT.add(b);
                                                            }
                                                        
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_ENVIAR",27, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ETIQUETA_ENVIAR ::= abre e_enviar ELEMENTOS_ENVIAR cierra abre div e_enviar cierra 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-5)).right;
		LinkedList<NodoElemento> b = (LinkedList<NodoElemento>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-5)).value;
		
                                                                                        RESULT=new NodoGXML(this.parser.index,a.toString(),a.toString(),b);
                                                                                        this.parser.index++;
                                                                                        //vamos a verificar los elementos de texto
                                                                                        String respuesta=RESULT.elementosEnviar(RESULT.elementos);
                                                                                        if(respuesta.equals("")){ 
                                                                                        }else{
                                                                                            RESULT=null;
                                                                                            System.out.println(respuesta);
                                                                                        }
                                                                                     
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETA_ENVIAR",20, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ETIQUETA_BOTON ::= abre e_boton cierra abre div e_boton cierra 
            {
              NodoGXML RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETA_BOTON",19, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ETIQUETA_MULTIMEDIA ::= abre e_multimedia cierra abre div e_multimedia cierra 
            {
              NodoGXML RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETA_MULTIMEDIA",18, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ELEMENTO_CONTROL ::= accion igual llavea valor_id parena LISTA_PARAMETROS parenc llavec 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		
                                                                                            RESULT=new NodoElemento("ELEMENTO",a.toString()+"("+b.toString()+")","accion"); 
                                                                                          
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",25, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ELEMENTO_CONTROL ::= minimo igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                            //tipo,valor/nombre
                                                            RESULT=new NodoElemento("ELEMENTO",a.toString(),"minimo");
                                                        
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",25, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ELEMENTO_CONTROL ::= maximo igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                            //tipo,valor/nombre
                                                            RESULT=new NodoElemento("ELEMENTO",a.toString(),"maximo");
                                                        
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",25, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ELEMENTO_CONTROL ::= cursiva igual TIPO_BOOL 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                RESULT=new NodoElemento("ELEMENTO",a.toString(),"cursiva");
                                             
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",25, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ELEMENTO_CONTROL ::= negrita igual TIPO_BOOL 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                RESULT=new NodoElemento("ELEMENTO",a.toString(),"negrita");
                                             
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",25, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ELEMENTO_CONTROL ::= color igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                try{
                                                    Color.decode(a.toString().replaceAll("\"",""));
                                                    RESULT=new NodoElemento("ELEMENTO",a.toString().replaceAll("\"",""),"color");
                                                }catch(Exception e){
                                                    System.out.println(e.toString()+" Error en la asignacion de valor en el elemento color etiqueta ventana Linea: "+aleft + " Columna: " + aright);
                                                }  
                                              
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",25, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ELEMENTO_CONTROL ::= tam igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                        RESULT=new NodoElemento("ELEMENTO",a.toString(),"tam");
                                                     
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",25, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ELEMENTO_CONTROL ::= fuente igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                    RESULT=new NodoElemento("ELEMENTO",a.toString().replaceAll("\"","").toLowerCase(),"");
                                               
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",25, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ELEMENTO_CONTROL ::= ancho igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                        //tipo,valor/nombre
                                                        RESULT=new NodoElemento("ELEMENTO",a.toString(),"ancho");
                                                       
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",25, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ELEMENTO_CONTROL ::= alto igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                        //tipo,valor/nombre
                                                        RESULT=new NodoElemento("ELEMENTO",a.toString(),"alto");
                                                      
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",25, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ELEMENTO_CONTROL ::= y igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                    RESULT=new NodoElemento("ELEMENTO",a.toString(),"y");
                                                   
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",25, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ELEMENTO_CONTROL ::= x igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                    RESULT=new NodoElemento("ELEMENTO",a.toString(),"x");
                                                   
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",25, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ELEMENTO_CONTROL ::= nombre igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                RESULT=new NodoElemento("ELEMENTO",a.toString().replaceAll("\"",""),"nombre");
                                               
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",25, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ELEMENTO_CONTROL ::= tipo igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                String valor=a.toString().replaceAll("\"","").toLowerCase();
                                                if(valor.equals("texto")){
                                                    RESULT=new NodoElemento("ELEMENTO","texto","tipo");
                                                }else if(valor.equals("textoarea")){
                                                    RESULT=new NodoElemento("ELEMENTO","textoarea","tipo");
                                                }else if(valor.equals("numerico")){
                                                    RESULT=new NodoElemento("ELEMENTO","numerico","tipo");
                                                }else if(valor.equals("desplegable")){
                                                    RESULT=new NodoElemento("ELEMENTO","desplegable","tipo");
                                                }
                                             
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTROL",25, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ELEMENTOS_CONTROLES ::= ELEMENTO_CONTROL 
            {
              LinkedList<NodoElemento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoElemento a = (NodoElemento)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                            RESULT=new LinkedList<NodoElemento>();
                                            if(a!=null){
                                                RESULT.add(a);
                                            }
                                           
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CONTROLES",26, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ELEMENTOS_CONTROLES ::= ELEMENTOS_CONTROLES ELEMENTO_CONTROL 
            {
              LinkedList<NodoElemento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<NodoElemento> a = (LinkedList<NodoElemento>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoElemento b = (NodoElemento)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                                RESULT=a;
                                                                if(b!=null){
                                                                    RESULT.add(b);
                                                                }
                                                               
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CONTROLES",26, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ETIQUETA_CONTROL ::= abre e_control ELEMENTOS_CONTROLES cierra abre div e_control cierra 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-5)).right;
		LinkedList<NodoElemento> b = (LinkedList<NodoElemento>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-5)).value;
		
                                                                                            RESULT=new NodoGXML(this.parser.index,a.toString(),a.toString(),b);
                                                                                            this.parser.index++;
                                                                                            //vamos a verificar los elementos de texto
                                                                                            String respuesta=RESULT.elementosControl(RESULT.elementos);
                                                                                            if(respuesta.equals("")){ 
                                                                                            }else{
                                                                                                RESULT=null;
                                                                                                System.out.println(respuesta);
                                                                                            }
                                                                                         
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETA_CONTROL",17, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ELEMENTO_TEXTO ::= cursiva igual TIPO_BOOL 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                            RESULT=new NodoElemento("ELEMENTO",a.toString(),"cursiva");
                                           
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",24, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ELEMENTO_TEXTO ::= negrita igual TIPO_BOOL 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                            RESULT=new NodoElemento("ELEMENTO",a.toString(),"negrita");
                                           
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",24, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ELEMENTO_TEXTO ::= color igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                try{
                                                    Color.decode(a.toString().replaceAll("\"",""));
                                                    RESULT=new NodoElemento("ELEMENTO",a.toString().replaceAll("\"",""),"color");
                                                }catch(Exception e){
                                                    System.out.println(e.toString()+" Error en la asignacion de valor en el elemento color etiqueta ventana Linea: "+aleft + " Columna: " + aright);
                                                }  
                                            
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",24, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ELEMENTO_TEXTO ::= tam igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                    RESULT=new NodoElemento("ELEMENTO",a.toString(),"tam");
                                                   
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",24, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ELEMENTO_TEXTO ::= fuente igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                RESULT=new NodoElemento("ELEMENTO",a.toString().replaceAll("\"","").toLowerCase(),"");
                                             
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",24, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ELEMENTO_TEXTO ::= y igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                    RESULT=new NodoElemento("ELEMENTO",a.toString(),"y");
                                                 
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",24, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ELEMENTO_TEXTO ::= x igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                    RESULT=new NodoElemento("ELEMENTO",a.toString(),"x");
                                                 
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",24, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ELEMENTO_TEXTO ::= nombre igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                RESULT=new NodoElemento("ELEMENTO",a.toString().replaceAll("\"",""),"nombre");
                                             
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_TEXTO",24, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ELEMENTOS_TEXTOS ::= ELEMENTO_TEXTO 
            {
              LinkedList<NodoElemento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoElemento a = (NodoElemento)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                    RESULT=new LinkedList<NodoElemento>();
                                    if(a!=null){
                                        RESULT.add(a);
                                    }
                                   
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_TEXTOS",23, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ELEMENTOS_TEXTOS ::= ELEMENTOS_TEXTOS ELEMENTO_TEXTO 
            {
              LinkedList<NodoElemento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<NodoElemento> a = (LinkedList<NodoElemento>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoElemento b = (NodoElemento)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                        RESULT=a;
                                                        if(b!=null){
                                                            RESULT.add(b);
                                                        }
                                                       
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_TEXTOS",23, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ETIQUETA_TEXTO ::= abre e_texto ELEMENTOS_TEXTOS cierra abre div e_texto cierra 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-5)).right;
		LinkedList<NodoElemento> b = (LinkedList<NodoElemento>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-5)).value;
		
                                                                                    RESULT=new NodoGXML(this.parser.index,a.toString(),a.toString(),b);
                                                                                    this.parser.index++;
                                                                                    //vamos a verificar los elementos de texto
                                                                                    String respuesta=RESULT.elementosTexto(RESULT.elementos);
                                                                                    if(respuesta.equals("")){ 
                                                                                    }else{
                                                                                        RESULT=null;
                                                                                        System.out.println(respuesta);
                                                                                    }
                                                                               
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETA_TEXTO",16, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ETIQUETAS_CONTENEDOR ::= ETIQUETA_ENVIAR 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML a = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                            RESULT=a;
                                        
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETAS_CONTENEDOR",15, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ETIQUETAS_CONTENEDOR ::= ETIQUETA_BOTON 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML a = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                            RESULT=a;
                                        
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETAS_CONTENEDOR",15, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ETIQUETAS_CONTENEDOR ::= ETIQUETA_MULTIMEDIA 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML a = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                            RESULT=a;
                                        
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETAS_CONTENEDOR",15, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ETIQUETAS_CONTENEDOR ::= ETIQUETA_CONTROL 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML a = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                            RESULT=a;
                                        
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETAS_CONTENEDOR",15, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ETIQUETAS_CONTENEDOR ::= ETIQUETA_TEXTO 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML a = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                            RESULT=a;
                                        
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETAS_CONTENEDOR",15, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONTENIDO_CONTENEDOR ::= ETIQUETAS_CONTENEDOR 
            {
              LinkedList<NodoGXML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML a = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                RESULT=new LinkedList<NodoGXML>();
                                                if(a!=null){
                                                    RESULT.add(a);
                                                }
                                             
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_CONTENEDOR",14, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONTENIDO_CONTENEDOR ::= CONTENIDO_CONTENEDOR ETIQUETAS_CONTENEDOR 
            {
              LinkedList<NodoGXML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<NodoGXML> a = (LinkedList<NodoGXML>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML b = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                                        RESULT=a;
                                                                        if(b!=null){
                                                                            RESULT.add(b);
                                                                        }
                                                                     
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_CONTENEDOR",14, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPO_BOOL ::= valor_falso 
            {
              String RESULT =null;
		
                            RESULT="falso";
                         
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("TIPO_BOOL",11, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPO_BOOL ::= valor_verdadero 
            {
              String RESULT =null;
		
                                RESULT="verdadero";
                             
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("TIPO_BOOL",11, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ELEMENTO_CONTENEDOR ::= borde igual TIPO_BOOL 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                //tipo,valor/nombre
                                                RESULT=new NodoElemento("ELEMENTO",a.toString(),"borde");
                                               
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ELEMENTO_CONTENEDOR ::= color igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                    try{
                                                        Color.decode(a.toString().replaceAll("\"",""));
                                                        RESULT=new NodoElemento("ELEMENTO",a.toString().replaceAll("\"",""),"color");
                                                    }catch(Exception e){
                                                        System.out.println(e.toString()+" Error en la asignacion de valor en el elemento color etiqueta ventana Linea: "+aleft + " Columna: " + aright);
                                                    }                        
                                               
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELEMENTO_CONTENEDOR ::= ancho igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                            //tipo,valor/nombre
                                                            RESULT=new NodoElemento("ELEMENTO",a.toString(),"ancho");
                                                          
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELEMENTO_CONTENEDOR ::= alto igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                            //tipo,valor/nombre
                                                            RESULT=new NodoElemento("ELEMENTO",a.toString(),"alto");
                                                         
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELEMENTO_CONTENEDOR ::= y igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                        //tipo,valor/nombre
                                                        RESULT=new NodoElemento("ELEMENTO",a.toString(),"y");
                                                      
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELEMENTO_CONTENEDOR ::= x igual valor_numero_completo 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                        //tipo,valor/nombre
                                                        RESULT=new NodoElemento("ELEMENTO",a.toString(),"x");
                                                      
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELEMENTO_CONTENEDOR ::= id igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                RESULT=new NodoElemento("ELEMENTO",a.toString().replaceAll("\"",""),"id");
                                              
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_CONTENEDOR",10, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELEMENTOS_CONTENEDORES ::= ELEMENTO_CONTENEDOR 
            {
              LinkedList<NodoElemento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoElemento a = (NodoElemento)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                RESULT=new LinkedList<NodoElemento>();
                                                RESULT.add(a);
                                               
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CONTENEDORES",9, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELEMENTOS_CONTENEDORES ::= ELEMENTOS_CONTENEDORES ELEMENTO_CONTENEDOR 
            {
              LinkedList<NodoElemento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<NodoElemento> a = (LinkedList<NodoElemento>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoElemento b = (NodoElemento)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                                        RESULT=a;
                                                                        RESULT.add(b);
                                                                        
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_CONTENEDORES",9, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ETIQUETA_CONTENEDOR ::= abre e_contenedor ELEMENTOS_CONTENEDORES cierra CONTENIDO_CONTENEDOR abre div e_contenedor cierra 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).right;
		LinkedList<NodoElemento> b = (LinkedList<NodoElemento>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).right;
		LinkedList<NodoGXML> c = (LinkedList<NodoGXML>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).value;
		
                                                                                                                                RESULT=new NodoGXML(this.parser.index,a.toString(),a.toString(),b);
                                                                                                                                this.parser.index++;
                                                                                                                                //vamos a verificar los elementos del contenedor
                                                                                                                                String respuesta=RESULT.elementosContenedor(RESULT.elementos);
                                                                                                                                RESULT.nodos=c;
                                                                                                                                if(respuesta.equals("")){ 
                                                                                                                                }else{
                                                                                                                                    RESULT=null;
                                                                                                                                    System.out.println(respuesta);
                                                                                                                                }
                                                                                                                             
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETA_CONTENEDOR",8, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONTENIDO_VENTANA ::= ETIQUETA_CONTENEDOR 
            {
              LinkedList<NodoGXML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML a = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                            RESULT=new LinkedList<NodoGXML>();
                                            if(a!=null){
                                                RESULT.add(a);
                                            }
                                          
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_VENTANA",7, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CONTENIDO_VENTANA ::= CONTENIDO_VENTANA ETIQUETA_CONTENEDOR 
            {
              LinkedList<NodoGXML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<NodoGXML> a = (LinkedList<NodoGXML>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML b = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                                RESULT=a;
                                                                if(b!=null){
                                                                    a.add(b);
                                                                }
                                                              
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_VENTANA",7, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PARAMETRO ::= valor_falso 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARAMETRO ::= valor_verdadero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARAMETRO ::= valor_cadena 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString().replaceAll("\"","");
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PARAMETRO ::= valor_numero_completo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARAMETRO ::= PARAMETRO not PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAMETRO ::= PARAMETRO and PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAMETRO ::= PARAMETRO or PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAMETRO ::= PARAMETRO diferente PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAMETRO ::= PARAMETRO igualigual PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAMETRO ::= PARAMETRO menorigualq PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PARAMETRO ::= PARAMETRO mayorigualq PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PARAMETRO ::= PARAMETRO cierra PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PARAMETRO ::= PARAMETRO abre PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARAMETRO ::= PARAMETRO potencia PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARAMETRO ::= PARAMETRO div PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PARAMETRO ::= PARAMETRO por PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PARAMETRO ::= PARAMETRO menos PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PARAMETRO ::= PARAMETRO mas PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMETRO ::= 
            {
              String RESULT =null;
		RESULT="";
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("PARAMETRO",13, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTA_PARAMETROS ::= PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a;
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",12, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTA_PARAMETROS ::= LISTA_PARAMETROS coma PARAMETRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		RESULT=a.toString()+b.toString()+c.toString();
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("LISTA_PARAMETROS",12, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ELEMENTO_VENTANA ::= accionfinal igual llavea valor_id parena LISTA_PARAMETROS parenc 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		
                                                                                            RESULT=new NodoElemento("ELEMENTO",a.toString()+"("+b.toString()+")","accionfinal"); 
                                                                                        
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",5, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ELEMENTO_VENTANA ::= accioninicial igual llavea valor_id parena LISTA_PARAMETROS parenc llavec 
            {
              NodoElemento RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)).value;
		
                                                                                                   RESULT=new NodoElemento("ELEMENTO",a.toString()+"("+b.toString()+")","accioninicial"); 
                                                                                                 
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",5, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ELEMENTO_VENTANA ::= color igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                
                                                try{
                                                    Color.decode(b.toString().replaceAll("\"",""));
                                                    RESULT=new NodoElemento("ELEMENTO",b.toString().replaceAll("\"",""),"color");
                                                }catch(Exception e){
                                                    System.out.println(e.toString()+" Error en la asignacion de valor en el elemento color etiqueta ventana Linea: "+bleft + " Columna: " + bright);
                                                }
                                              
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",5, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ELEMENTO_VENTANA ::= tipo igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                if(b.toString().replaceAll("\"","").toLowerCase().equals("principal")||b.toString().replaceAll("\"","").toLowerCase().equals("secundario")){
                                                    RESULT=new NodoElemento("ELEMENTO",b.toString().replaceAll("\"",""),"tipo");
                                                }else{
                                                    System.out.println("Error en la asignacion de tipo en la etiqueta ventana Linea:" + bleft + " Columna: " + bright);
                                                }
                                             
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",5, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ELEMENTO_VENTANA ::= id igual valor_cadena 
            {
              NodoElemento RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                               RESULT=new NodoElemento("ELEMENTO",b.toString().replaceAll("\"",""),"id");
                                            
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTO_VENTANA",5, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-2)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ELEMENTOS_VENTANAS ::= ELEMENTO_VENTANA 
            {
              LinkedList<NodoElemento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoElemento a = (NodoElemento)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                        RESULT=new LinkedList<NodoElemento>();
                                        if(a!=null){
                                            RESULT.add(a);
                                        }
                                        
                                        
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_VENTANAS",6, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ELEMENTOS_VENTANAS ::= ELEMENTOS_VENTANAS ELEMENTO_VENTANA 
            {
              LinkedList<NodoElemento> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<NodoElemento> a = (LinkedList<NodoElemento>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoElemento b = (NodoElemento)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                                RESULT=a;
                                                                if(b!=null){
                                                                    RESULT.add(b);
                                                                }
                                                             
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_VENTANAS",6, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ETIQUETA_VENTANA ::= abre e_ventana ELEMENTOS_VENTANAS cierra CONTENIDO_VENTANA abre div e_ventana cierra 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).right;
		LinkedList<NodoElemento> b = (LinkedList<NodoElemento>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).right;
		LinkedList<NodoGXML> c = (LinkedList<NodoGXML>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).value;
		
                                                                                                                RESULT=new NodoGXML(this.parser.index,a.toString(),a.toString(),b);
                                                                                                                this.parser.index++;
                                                                                                                RESULT.nodos=c;
                                                                                                                //vamos a verificar los elementos de la ventana
                                                                                                                String respuesta=RESULT.elementosVentana(RESULT.elementos);
                                                                                                                if(respuesta.equals("")){
                                                                                                                }else{
                                                                                                                    RESULT=null;
                                                                                                                    System.out.println(respuesta);
                                                                                                                }
                                                                                                              
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETA_VENTANA",4, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-8)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DEFINICION_GENERAL ::= ETIQUETA_VENTANA 
            {
              LinkedList<NodoGXML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML a = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                        RESULT=new LinkedList<NodoGXML>();
                                        if(a!=null){
                                            RESULT.add(a);
                                        }
                                        
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("DEFINICION_GENERAL",22, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DEFINICION_GENERAL ::= DEFINICION_GENERAL ETIQUETA_VENTANA 
            {
              LinkedList<NodoGXML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<NodoGXML> a = (LinkedList<NodoGXML>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML b = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                                RESULT=a;
                                                                if(b!=null){
                                                                    a.add(b);
                                                                }
                                                             
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("DEFINICION_GENERAL",22, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTENIDO_IMPORTAR ::= valor_path2 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                        RESULT=new NodoGXML();
                                        RESULT.valor=a.toString();
                                        RESULT.index=this.parser.index;
                                        this.parser.index++;
                                   
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IMPORTAR",3, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTENIDO_IMPORTAR ::= valor_path 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                    RESULT=new NodoGXML();
                                    RESULT.valor=a.toString();
                                    RESULT.index=this.parser.index;
                                    this.parser.index++;
                                  
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("CONTENIDO_IMPORTAR",3, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ETIQUETA_IMPORTAR ::= error 
            {
              NodoGXML RESULT =null;

              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETA_IMPORTAR",2, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ETIQUETA_IMPORTAR ::= abre e_importar cierra CONTENIDO_IMPORTAR abre div e_importar cierra 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).right;
		NodoGXML b = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-4)).value;
		
                                                                                                RESULT=b;
                                                                                                RESULT.tipo_etiqueta=a.toString();
                                                                                                RESULT.id=a.toString();
                                                                                            
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("ETIQUETA_IMPORTAR",2, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-7)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DEFINICION_IMPORTAR ::= ETIQUETA_IMPORTAR 
            {
              LinkedList<NodoGXML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML a = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                            
                                            RESULT=new LinkedList<NodoGXML>();
                                            if(a!=null){
                                                RESULT.add(a);
                                            }
                                            
                                          
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("DEFINICION_IMPORTAR",21, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DEFINICION_IMPORTAR ::= DEFINICION_IMPORTAR ETIQUETA_IMPORTAR 
            {
              LinkedList<NodoGXML> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<NodoGXML> a = (LinkedList<NodoGXML>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML b = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                                RESULT=a;
                                                                if(b!=null){
                                                                    RESULT.add(b);
                                                                }
                                                                
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("DEFINICION_IMPORTAR",21, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // GENERAL ::= DEFINICION_GENERAL 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		LinkedList<NodoGXML> a = (LinkedList<NodoGXML>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                RESULT=new NodoGXML();
                                RESULT.nodos=a;
                               
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("GENERAL",1, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // GENERAL ::= DEFINICION_IMPORTAR DEFINICION_GENERAL 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		LinkedList<NodoGXML> a = (LinkedList<NodoGXML>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		LinkedList<NodoGXML> b = (LinkedList<NodoGXML>)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                                                    RESULT=new NodoGXML();
                                                    RESULT.id="RAIZ";
                                                    RESULT.nodos=a;
                                                    RESULT.AgregarNodos(b);
                                                   
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("GENERAL",1, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIAL ::= GENERAL 
            {
              NodoGXML RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()).right;
		NodoGXML a = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.peek()).value;
		
                    this.parser.root=a;
                 
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("INICIAL",0, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          return CUP$sintacticoGXML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIAL EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).right;
		NodoGXML start_val = (NodoGXML)((java_cup.runtime.Symbol) CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)).value;
		RESULT = start_val;
              CUP$sintacticoGXML$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.elementAt(CUP$sintacticoGXML$top-1)), ((java_cup.runtime.Symbol)CUP$sintacticoGXML$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintacticoGXML$parser.done_parsing();
          return CUP$sintacticoGXML$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

