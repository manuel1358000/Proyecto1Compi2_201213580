/* The following code was generated by JFlex 1.6.0 */

package Analizadores.GramaticaGXML;
import java.util.LinkedList;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>lexicoGXML.jflex</tt>
 */
public class lexicoGXML implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  private static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\100\1\11\1\13\1\14\1\12\22\0\1\100\1\71\1\27"+
    "\1\2\1\3\1\4\1\73\1\0\1\64\1\65\1\16\1\67\1\66"+
    "\1\6\1\1\1\15\12\5\1\17\1\74\1\57\1\61\1\60\1\75"+
    "\1\0\1\37\1\53\1\43\1\44\1\41\1\47\1\56\1\55\1\31"+
    "\2\7\1\46\1\32\1\42\1\34\1\33\1\7\1\35\1\51\1\36"+
    "\1\52\1\40\1\7\1\45\1\54\1\7\1\0\1\20\1\0\1\70"+
    "\1\10\1\0\1\37\1\53\1\43\1\44\1\41\1\25\1\21\1\55"+
    "\1\31\2\7\1\24\1\23\1\42\1\34\1\33\1\7\1\35\1\26"+
    "\1\36\1\52\1\40\1\7\1\22\1\54\1\7\1\62\1\72\1\63"+
    "\7\0\1\13\71\0\1\77\2\0\1\76\37\0\1\76\115\0\2\30"+
    "\115\0\1\50\u1ea8\0\1\13\1\13\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\4\5\1\13\1\1\12\5\1\1"+
    "\1\5\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\2\1\1\30\1\31"+
    "\1\1\2\0\1\5\5\0\3\5\1\0\4\5\1\0"+
    "\1\32\1\0\1\33\1\5\1\33\3\5\1\0\7\5"+
    "\1\0\11\5\1\0\1\5\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\2\43\6\0\4\5\2\0\4\5"+
    "\2\0\2\5\1\0\3\5\1\0\1\5\1\44\5\5"+
    "\1\0\13\5\1\0\2\5\1\43\5\0\1\45\1\0"+
    "\1\5\1\0\2\5\1\0\1\5\1\0\2\5\1\0"+
    "\2\5\2\0\2\5\1\0\1\5\1\46\1\5\2\47"+
    "\1\5\1\50\1\5\1\0\2\5\1\0\3\5\1\0"+
    "\6\5\1\0\1\51\1\5\1\0\2\5\5\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\2\52\2\5\2\0\2\5\1\0\2\5\1\53\1\54"+
    "\1\0\1\5\1\0\2\55\2\5\1\0\2\5\1\0"+
    "\1\5\1\56\2\5\1\0\2\5\1\0\1\57\1\60"+
    "\1\0\1\61\1\62\2\63\2\64\1\0\1\5\2\65"+
    "\1\0\1\5\1\66\1\5\1\0\1\67\1\5\1\67"+
    "\1\0\2\5\2\70\1\0\2\5\2\71\1\72\1\0"+
    "\3\5\1\0\2\5\3\0\1\5\1\0\2\5\1\0"+
    "\1\5\1\0\2\5\2\0\2\5\1\0\1\5\1\73"+
    "\2\74\1\75\1\5\2\76\1\77\1\0\1\100\1\0"+
    "\1\5\1\0\2\5\2\101\1\0\2\5\2\0\2\5"+
    "\1\0\2\5\2\0\1\5\1\0\1\5\1\0\1\5"+
    "\2\102\1\0\1\5\2\0\2\5\1\0\1\103\1\5"+
    "\2\104\2\105\2\106\2\107\2\0\2\5\1\0\1\110"+
    "\1\111\1\0\1\111\1\5\2\0\1\5\1\0\2\112"+
    "\4\0\1\113";

  private static int [] zzUnpackAction() {
    int [] result = new int[378];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\101\0\202\0\303\0\303\0\u0104\0\101"+
    "\0\u0145\0\101\0\101\0\u0104\0\u0186\0\u01c7\0\u0208\0\u0249"+
    "\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf\0\u0410\0\u0451"+
    "\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7\0\u0104\0\u0618"+
    "\0\u0659\0\u069a\0\101\0\101\0\101\0\101\0\101\0\101"+
    "\0\101\0\u06db\0\u071c\0\u075d\0\101\0\101\0\u079e\0\u07df"+
    "\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0145\0\u0965\0\u09a6"+
    "\0\u09e7\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d\0\u028a"+
    "\0\101\0\u0bae\0\101\0\u0bef\0\u0861\0\u0c30\0\u0c71\0\u0cb2"+
    "\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u0e38\0\u0e79\0\u0eba"+
    "\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u1040\0\u1081\0\u10c2"+
    "\0\u1103\0\u1144\0\u1185\0\u11c6\0\101\0\101\0\101\0\101"+
    "\0\101\0\101\0\101\0\101\0\u1207\0\u1248\0\u1289\0\u12ca"+
    "\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2"+
    "\0\u1513\0\u1554\0\u1595\0\u15d6\0\u1617\0\u1658\0\u1699\0\u16da"+
    "\0\u171b\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1\0\u0861"+
    "\0\u18e2\0\u1923\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9"+
    "\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1"+
    "\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u0820\0\u1df6\0\u1e37\0\u1e78"+
    "\0\u1eb9\0\u1efa\0\101\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f"+
    "\0\u2080\0\u20c1\0\u2102\0\u2143\0\u2184\0\u21c5\0\u2206\0\u2247"+
    "\0\u2288\0\u22c9\0\u230a\0\u234b\0\u238c\0\u23cd\0\u0861\0\u240e"+
    "\0\101\0\u0861\0\u244f\0\u0861\0\u2490\0\u24d1\0\u2512\0\u2553"+
    "\0\u2594\0\u25d5\0\u2616\0\u2657\0\u2698\0\u26d9\0\u271a\0\u275b"+
    "\0\u279c\0\u27dd\0\u281e\0\u285f\0\u0861\0\u28a0\0\u28e1\0\u2922"+
    "\0\u2963\0\u29a4\0\u29e5\0\u2a26\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a"+
    "\0\u2b6b\0\u2bac\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1\0\u0861"+
    "\0\101\0\u2d32\0\u2d73\0\u2db4\0\u2df5\0\u2e36\0\u2e77\0\u2eb8"+
    "\0\u2ef9\0\u2f3a\0\u0861\0\u0861\0\u2f7b\0\u2fbc\0\u2ffd\0\101"+
    "\0\u0861\0\u303e\0\u307f\0\u30c0\0\u3101\0\u3142\0\u3183\0\u31c4"+
    "\0\u0861\0\u3205\0\u3246\0\u3287\0\u32c8\0\u3309\0\u334a\0\u0861"+
    "\0\u0861\0\u338b\0\101\0\101\0\101\0\u0861\0\101\0\u0861"+
    "\0\u33cc\0\u340d\0\101\0\u0861\0\u344e\0\u348f\0\u0861\0\u34d0"+
    "\0\u3511\0\101\0\u3552\0\u0861\0\u3593\0\u35d4\0\u3615\0\u3656"+
    "\0\u3697\0\u36d8\0\u3719\0\u375a\0\101\0\u0861\0\u0861\0\u379b"+
    "\0\u37dc\0\u381d\0\u385e\0\u389f\0\u38e0\0\u3921\0\u3962\0\u39a3"+
    "\0\u39e4\0\u3a25\0\u3a66\0\u3aa7\0\u3ae8\0\u3b29\0\u3b6a\0\u3bab"+
    "\0\u3bec\0\u3c2d\0\u3c6e\0\u3caf\0\u3cf0\0\u3d31\0\u3d72\0\u3db3"+
    "\0\u0861\0\101\0\u0861\0\u0861\0\u3df4\0\101\0\u0861\0\u0861"+
    "\0\u3e35\0\101\0\u3e76\0\u3eb7\0\u3ef8\0\u3f39\0\u3f7a\0\101"+
    "\0\u0861\0\u3fbb\0\u3ffc\0\u403d\0\u407e\0\u40bf\0\u4100\0\u4141"+
    "\0\u4182\0\u41c3\0\u4204\0\u4245\0\u4286\0\u42c7\0\u4308\0\u4349"+
    "\0\u438a\0\u43cb\0\101\0\u0861\0\u440c\0\u444d\0\u448e\0\u44cf"+
    "\0\u4510\0\u4551\0\u4592\0\u0861\0\u45d3\0\101\0\u0861\0\101"+
    "\0\u0861\0\101\0\u0861\0\101\0\u0861\0\u4614\0\u4655\0\u4696"+
    "\0\u46d7\0\u4718\0\u0861\0\101\0\u4759\0\u0861\0\u479a\0\u47db"+
    "\0\u481c\0\u485d\0\u489e\0\101\0\u0861\0\u48df\0\u4920\0\u4961"+
    "\0\u49a2\0\101";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[378];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\3\1\5\1\6\1\7\1\2"+
    "\2\10\1\0\1\10\1\11\1\12\1\13\1\2\1\7"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\15\1\24\1\7\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\14\1\16\1\17\1\35\1\20"+
    "\1\7\1\36\1\37\2\7\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\2\1\10\103\0\1\60"+
    "\1\61\102\0\1\5\100\0\1\62\1\0\2\62\6\0"+
    "\1\63\1\0\6\62\2\0\17\62\1\0\6\62\23\0"+
    "\1\64\5\0\1\65\10\0\1\66\6\65\2\0\17\65"+
    "\1\0\6\65\27\0\1\62\1\0\2\62\6\0\1\63"+
    "\1\0\6\62\1\0\1\67\1\70\5\62\1\71\10\62"+
    "\1\0\1\62\1\72\4\62\27\0\1\62\1\0\2\62"+
    "\6\0\1\63\1\0\6\62\1\0\1\73\1\74\16\62"+
    "\1\0\6\62\27\0\1\62\1\0\2\62\6\0\1\63"+
    "\1\0\6\62\2\0\6\62\1\75\10\62\1\0\1\62"+
    "\1\76\4\62\27\0\1\62\1\0\2\62\6\0\1\63"+
    "\1\0\6\62\2\0\10\62\1\77\6\62\1\0\6\62"+
    "\22\0\27\100\1\101\51\100\23\0\1\102\6\0\1\102"+
    "\11\0\1\103\41\0\1\62\1\0\2\62\6\0\1\63"+
    "\1\0\2\62\1\104\3\62\2\0\1\62\1\104\11\62"+
    "\1\105\3\62\1\0\6\62\27\0\1\62\1\0\2\62"+
    "\6\0\1\63\1\0\6\62\2\0\4\62\1\106\1\62"+
    "\1\107\10\62\1\0\6\62\27\0\1\62\1\0\2\62"+
    "\6\0\1\63\1\0\6\62\2\0\10\62\1\110\6\62"+
    "\1\0\6\62\27\0\1\62\1\0\2\62\6\0\1\63"+
    "\1\0\6\62\1\0\1\111\1\112\5\62\1\113\1\62"+
    "\1\114\6\62\1\0\6\62\27\0\1\62\1\0\2\62"+
    "\6\0\1\63\1\0\3\62\1\115\2\62\2\0\11\62"+
    "\1\116\1\117\2\62\1\115\1\62\1\0\1\62\1\120"+
    "\4\62\27\0\1\62\1\0\2\62\6\0\1\63\1\0"+
    "\6\62\1\0\1\121\1\122\7\62\1\123\6\62\1\0"+
    "\6\62\27\0\1\62\1\0\2\62\6\0\1\63\1\0"+
    "\6\62\2\0\11\62\1\124\5\62\1\0\6\62\27\0"+
    "\1\62\1\0\2\62\6\0\1\63\1\0\6\62\2\0"+
    "\3\62\1\125\4\62\1\126\6\62\1\0\6\62\27\0"+
    "\1\62\1\0\2\62\6\0\1\63\1\0\6\62\2\0"+
    "\3\62\1\127\13\62\1\0\1\62\1\130\4\62\27\0"+
    "\1\62\1\0\2\62\6\0\1\63\1\0\6\62\2\0"+
    "\6\62\1\131\1\62\1\132\6\62\1\0\6\62\63\0"+
    "\1\133\44\0\1\62\1\0\2\62\6\0\1\63\1\0"+
    "\6\62\2\0\3\62\1\134\13\62\1\0\6\62\103\0"+
    "\1\135\100\0\1\136\100\0\1\137\100\0\1\140\111\0"+
    "\1\141\101\0\1\142\104\0\1\143\1\0\11\60\1\144"+
    "\1\145\2\0\64\60\3\61\1\146\12\61\1\147\62\61"+
    "\5\0\1\62\1\0\2\62\10\0\6\62\2\0\17\62"+
    "\1\0\6\62\42\0\1\150\101\0\1\151\3\0\1\152"+
    "\54\0\1\64\3\0\1\65\1\0\2\65\7\0\1\66"+
    "\6\65\2\0\17\65\1\0\6\65\64\0\1\153\43\0"+
    "\1\62\1\0\2\62\10\0\6\62\2\0\11\62\1\154"+
    "\5\62\1\0\6\62\27\0\1\62\1\0\2\62\10\0"+
    "\1\62\1\155\4\62\2\0\14\62\1\155\2\62\1\0"+
    "\6\62\27\0\1\62\1\0\2\62\10\0\3\62\1\156"+
    "\1\62\1\157\2\0\15\62\1\156\1\62\1\160\1\157"+
    "\5\62\50\0\1\161\21\0\2\161\34\0\1\62\1\0"+
    "\2\62\10\0\5\62\1\162\2\0\17\62\1\161\1\162"+
    "\5\62\27\0\1\62\1\0\2\62\10\0\3\62\1\163"+
    "\2\62\2\0\15\62\1\163\1\62\1\0\6\62\27\0"+
    "\1\62\1\0\2\62\10\0\6\62\2\0\10\62\1\164"+
    "\6\62\1\0\6\62\27\0\1\62\1\0\2\62\10\0"+
    "\6\62\2\0\12\62\1\165\4\62\1\0\6\62\55\0"+
    "\1\166\3\0\1\167\46\0\1\62\1\0\2\62\10\0"+
    "\6\62\2\0\2\62\1\170\3\62\1\171\10\62\1\0"+
    "\6\62\27\0\1\62\1\0\2\62\10\0\6\62\1\0"+
    "\1\172\1\173\16\62\1\0\6\62\27\0\1\62\1\0"+
    "\2\62\10\0\6\62\2\0\5\62\1\174\11\62\1\0"+
    "\6\62\27\0\1\62\1\0\2\62\10\0\4\62\1\175"+
    "\1\62\2\0\16\62\1\175\1\0\6\62\55\0\1\176"+
    "\52\0\1\62\1\0\2\62\10\0\6\62\2\0\2\62"+
    "\1\177\14\62\1\0\6\62\27\0\1\62\1\0\2\62"+
    "\10\0\2\62\1\200\3\62\2\0\1\62\1\200\15\62"+
    "\1\0\6\62\27\0\1\62\1\0\2\62\10\0\1\62"+
    "\1\201\4\62\2\0\14\62\1\201\2\62\1\0\6\62"+
    "\27\0\1\62\1\0\2\62\10\0\6\62\2\0\5\62"+
    "\1\202\11\62\1\0\6\62\27\0\1\62\1\0\2\62"+
    "\10\0\6\62\2\0\12\62\1\203\4\62\1\0\6\62"+
    "\27\0\1\62\1\0\2\62\10\0\6\62\2\0\12\62"+
    "\1\204\4\62\1\0\6\62\27\0\1\62\1\0\2\62"+
    "\10\0\6\62\2\0\5\62\1\205\11\62\1\0\6\62"+
    "\66\0\1\206\41\0\1\62\1\0\2\62\10\0\6\62"+
    "\2\0\13\62\1\207\3\62\1\0\6\62\27\0\1\62"+
    "\1\0\2\62\10\0\6\62\2\0\4\62\1\210\4\62"+
    "\1\211\5\62\1\0\6\62\27\0\1\62\1\0\2\62"+
    "\10\0\6\62\2\0\7\62\1\212\7\62\1\0\6\62"+
    "\27\0\1\62\1\0\2\62\10\0\2\62\1\213\3\62"+
    "\2\0\1\62\1\213\15\62\1\0\6\62\27\0\1\62"+
    "\1\0\2\62\10\0\1\214\5\62\2\0\17\62\1\0"+
    "\5\62\1\214\27\0\1\62\1\0\2\62\10\0\3\62"+
    "\1\215\2\62\2\0\11\62\1\216\3\62\1\215\1\62"+
    "\1\0\6\62\27\0\1\62\1\0\2\62\10\0\6\62"+
    "\2\0\4\62\1\217\12\62\1\0\6\62\27\0\1\62"+
    "\1\0\2\62\10\0\6\62\2\0\5\62\1\220\11\62"+
    "\1\0\6\62\27\0\1\62\1\0\2\62\10\0\4\62"+
    "\1\221\1\62\2\0\16\62\1\221\1\0\6\62\65\0"+
    "\1\222\42\0\1\62\1\0\2\62\10\0\6\62\2\0"+
    "\4\62\1\223\1\224\11\62\1\0\6\62\33\0\1\144"+
    "\67\0\2\61\1\225\1\146\12\61\1\147\62\61\3\226"+
    "\1\227\11\226\1\0\63\226\1\0\1\230\5\0\1\231"+
    "\10\0\1\150\6\231\2\0\17\231\1\0\6\231\44\0"+
    "\1\232\104\0\1\233\102\0\2\234\54\0\1\62\1\0"+
    "\2\62\10\0\6\62\1\0\1\234\1\235\16\62\1\0"+
    "\6\62\27\0\1\62\1\0\2\62\10\0\6\62\1\0"+
    "\1\236\1\237\16\62\1\0\6\62\27\0\1\62\1\0"+
    "\2\62\10\0\6\62\2\0\5\62\1\240\11\62\1\0"+
    "\6\62\27\0\1\62\1\0\2\62\10\0\6\62\1\0"+
    "\1\241\1\242\16\62\1\0\6\62\52\0\2\241\105\0"+
    "\1\243\47\0\1\62\1\0\2\62\10\0\6\62\2\0"+
    "\5\62\1\244\11\62\1\0\6\62\27\0\1\62\1\0"+
    "\2\62\10\0\5\62\1\245\2\0\17\62\1\246\1\245"+
    "\5\62\27\0\1\62\1\0\2\62\10\0\6\62\2\0"+
    "\11\62\1\247\5\62\1\0\6\62\27\0\1\62\1\0"+
    "\2\62\10\0\6\62\2\0\17\62\1\0\1\62\1\250"+
    "\4\62\56\0\1\251\65\0\1\252\34\0\1\252\27\0"+
    "\1\62\1\0\2\62\10\0\6\62\2\0\3\62\1\253"+
    "\13\62\1\0\6\62\27\0\1\62\1\0\2\62\10\0"+
    "\1\254\5\62\2\0\17\62\1\0\5\62\1\254\64\0"+
    "\1\255\43\0\1\62\1\0\2\62\10\0\6\62\2\0"+
    "\11\62\1\256\5\62\1\0\6\62\27\0\1\62\1\0"+
    "\2\62\10\0\6\62\2\0\17\62\1\0\4\62\1\257"+
    "\1\62\27\0\1\62\1\0\2\62\10\0\6\62\2\0"+
    "\10\62\1\260\6\62\1\0\6\62\56\0\1\261\51\0"+
    "\1\62\1\0\2\62\10\0\6\62\2\0\3\62\1\262"+
    "\13\62\1\0\6\62\27\0\1\62\1\0\2\62\10\0"+
    "\6\62\2\0\5\62\1\263\11\62\1\0\6\62\27\0"+
    "\1\62\1\0\2\62\10\0\6\62\2\0\3\62\1\264"+
    "\13\62\1\0\6\62\27\0\1\62\1\0\2\62\10\0"+
    "\6\62\2\0\17\62\1\0\4\62\1\265\1\62\27\0"+
    "\1\62\1\0\2\62\10\0\6\62\1\0\1\266\1\267"+
    "\16\62\1\0\6\62\27\0\1\62\1\0\2\62\10\0"+
    "\6\62\2\0\3\62\1\270\13\62\1\0\6\62\63\0"+
    "\1\271\44\0\1\62\1\0\2\62\10\0\6\62\2\0"+
    "\10\62\1\272\6\62\1\0\6\62\27\0\1\62\1\0"+
    "\2\62\10\0\6\62\2\0\13\62\1\273\3\62\1\0"+
    "\6\62\27\0\1\62\1\0\2\62\10\0\6\62\2\0"+
    "\5\62\1\274\11\62\1\0\6\62\27\0\1\62\1\0"+
    "\2\62\10\0\6\62\1\0\1\275\1\276\16\62\1\0"+
    "\6\62\27\0\1\62\1\0\2\62\10\0\6\62\2\0"+
    "\17\62\1\0\2\62\1\277\3\62\27\0\1\62\1\0"+
    "\2\62\10\0\6\62\2\0\4\62\1\300\12\62\1\0"+
    "\6\62\27\0\1\62\1\0\2\62\10\0\6\62\2\0"+
    "\3\62\1\301\13\62\1\0\6\62\27\0\1\62\1\0"+
    "\2\62\10\0\6\62\2\0\5\62\1\302\11\62\1\0"+
    "\6\62\27\0\1\62\1\0\2\62\10\0\5\62\1\303"+
    "\2\0\17\62\1\304\1\303\5\62\27\0\1\62\1\0"+
    "\2\62\10\0\6\62\2\0\3\62\1\305\13\62\1\0"+
    "\6\62\27\0\1\62\1\0\2\62\10\0\6\62\2\0"+
    "\10\62\1\306\6\62\1\0\6\62\74\0\1\307\33\0"+
    "\1\62\1\0\2\62\10\0\6\62\2\0\13\62\1\310"+
    "\3\62\1\0\6\62\27\0\1\62\1\0\2\62\10\0"+
    "\6\62\2\0\3\62\1\311\13\62\1\0\6\62\22\0"+
    "\3\61\1\146\11\61\1\312\1\147\64\61\1\225\1\146"+
    "\11\61\1\312\1\147\62\61\21\0\1\313\3\0\1\314"+
    "\54\0\1\230\3\0\1\231\1\0\2\231\7\0\1\150"+
    "\6\231\2\0\17\231\1\0\6\231\45\0\1\315\100\0"+
    "\1\316\6\0\1\316\53\0\1\62\1\0\2\62\10\0"+
    "\2\62\1\317\3\62\2\0\1\62\1\317\15\62\1\0"+
    "\6\62\45\0\1\320\6\0\1\320\53\0\1\62\1\0"+
    "\2\62\10\0\2\62\1\321\3\62\2\0\1\62\1\321"+
    "\15\62\1\0\6\62\27\0\1\62\1\0\2\62\10\0"+
    "\6\62\1\0\1\322\1\323\16\62\1\0\6\62\65\0"+
    "\1\324\42\0\1\62\1\0\2\62\10\0\6\62\2\0"+
    "\12\62\1\325\4\62\1\0\6\62\61\0\1\326\46\0"+
    "\1\62\1\0\2\62\10\0\6\62\2\0\6\62\1\327"+
    "\10\62\1\0\6\62\27\0\1\62\1\0\2\62\10\0"+
    "\6\62\2\0\3\62\1\330\13\62\1\0\6\62\56\0"+
    "\1\331\51\0\1\62\1\0\2\62\10\0\6\62\2\0"+
    "\5\62\1\332\11\62\1\0\6\62\27\0\1\62\1\0"+
    "\2\62\10\0\6\62\2\0\11\62\1\333\5\62\1\0"+
    "\6\62\57\0\1\334\104\0\1\335\44\0\1\62\1\0"+
    "\2\62\10\0\6\62\2\0\4\62\1\336\12\62\1\0"+
    "\6\62\27\0\1\62\1\0\2\62\10\0\6\62\2\0"+
    "\10\62\1\337\6\62\1\0\6\62\65\0\1\340\42\0"+
    "\1\62\1\0\2\62\10\0\6\62\2\0\12\62\1\341"+
    "\4\62\1\0\6\62\27\0\1\62\1\0\2\62\10\0"+
    "\6\62\2\0\4\62\1\342\12\62\1\0\6\62\27\0"+
    "\1\62\1\0\2\62\10\0\6\62\2\0\3\62\1\343"+
    "\13\62\1\0\6\62\27\0\1\62\1\0\2\62\10\0"+
    "\6\62\2\0\3\62\1\344\13\62\1\0\6\62\56\0"+
    "\1\345\51\0\1\62\1\0\2\62\10\0\6\62\2\0"+
    "\3\62\1\346\13\62\1\0\6\62\27\0\1\62\1\347"+
    "\2\62\10\0\6\62\2\0\17\62\1\0\6\62\56\0"+
    "\1\350\51\0\1\62\1\0\2\62\10\0\6\62\2\0"+
    "\3\62\1\351\13\62\1\0\6\62\27\0\1\62\1\0"+
    "\2\62\10\0\6\62\2\0\6\62\1\352\10\62\1\0"+
    "\6\62\27\0\1\62\1\0\2\62\10\0\6\62\2\0"+
    "\6\62\1\353\10\62\1\0\6\62\61\0\1\354\46\0"+
    "\1\62\1\0\2\62\10\0\6\62\2\0\6\62\1\355"+
    "\10\62\1\0\6\62\27\0\1\62\1\0\2\62\10\0"+
    "\6\62\2\0\4\62\1\356\12\62\1\0\6\62\27\0"+
    "\1\62\1\0\2\62\10\0\6\62\1\0\1\357\1\360"+
    "\16\62\1\0\6\62\27\0\1\62\1\0\2\62\10\0"+
    "\6\62\2\0\4\62\1\361\12\62\1\0\6\62\27\0"+
    "\1\62\1\0\2\62\10\0\6\62\2\0\4\62\1\362"+
    "\3\62\1\363\6\62\1\0\6\62\27\0\1\62\1\0"+
    "\2\62\10\0\6\62\1\0\1\364\1\365\16\62\1\0"+
    "\6\62\52\0\2\364\54\0\1\62\1\0\2\62\10\0"+
    "\6\62\2\0\12\62\1\366\4\62\1\0\6\62\64\0"+
    "\1\367\43\0\1\62\1\0\2\62\10\0\6\62\2\0"+
    "\10\62\1\370\6\62\1\0\6\62\27\0\1\62\1\0"+
    "\2\62\10\0\6\62\2\0\11\62\1\371\5\62\1\0"+
    "\6\62\37\0\1\226\105\0\1\372\104\0\1\373\76\0"+
    "\1\374\110\0\1\375\51\0\1\62\1\0\2\62\10\0"+
    "\6\62\2\0\3\62\1\376\13\62\1\0\6\62\56\0"+
    "\1\377\51\0\1\62\1\0\2\62\10\0\6\62\2\0"+
    "\3\62\1\u0100\13\62\1\0\6\62\45\0\1\u0101\6\0"+
    "\1\u0101\53\0\1\62\1\0\2\62\10\0\2\62\1\u0102"+
    "\3\62\2\0\1\62\1\u0102\15\62\1\0\6\62\61\0"+
    "\1\u0103\46\0\1\62\1\0\2\62\10\0\6\62\2\0"+
    "\6\62\1\u0104\10\62\1\0\6\62\66\0\1\u0105\41\0"+
    "\1\62\1\0\2\62\10\0\6\62\2\0\13\62\1\u0106"+
    "\3\62\1\0\6\62\27\0\1\62\1\0\2\62\10\0"+
    "\6\62\2\0\10\62\1\u0107\6\62\1\0\6\62\27\0"+
    "\1\62\1\0\2\62\10\0\6\62\2\0\13\62\1\u0108"+
    "\3\62\1\0\6\62\60\0\1\u0109\104\0\1\u010a\43\0"+
    "\1\62\1\0\2\62\10\0\6\62\2\0\5\62\1\u010b"+
    "\11\62\1\0\6\62\27\0\1\62\1\0\2\62\10\0"+
    "\6\62\2\0\11\62\1\u010c\5\62\1\0\6\62\52\0"+
    "\2\u010d\54\0\1\62\1\0\2\62\10\0\6\62\1\0"+
    "\1\u010d\1\u010e\16\62\1\0\6\62\27\0\1\62\1\0"+
    "\2\62\10\0\6\62\2\0\10\62\1\u010f\6\62\1\0"+
    "\6\62\64\0\1\u0110\43\0\1\62\1\0\2\62\10\0"+
    "\6\62\2\0\11\62\1\u0111\5\62\1\0\6\62\57\0"+
    "\1\u0112\50\0\1\62\1\0\2\62\10\0\6\62\2\0"+
    "\13\62\1\u0113\3\62\1\0\6\62\27\0\1\62\1\0"+
    "\2\62\10\0\6\62\2\0\11\62\1\u0114\5\62\1\0"+
    "\6\62\57\0\1\u0115\50\0\1\62\1\0\2\62\10\0"+
    "\6\62\2\0\4\62\1\u0116\12\62\1\0\6\62\27\0"+
    "\1\62\1\0\2\62\10\0\6\62\2\0\10\62\1\u0117"+
    "\6\62\1\0\6\62\60\0\1\u0118\47\0\1\62\1\0"+
    "\2\62\10\0\6\62\2\0\5\62\1\u0119\11\62\1\0"+
    "\6\62\27\0\1\62\1\0\2\62\10\0\6\62\2\0"+
    "\3\62\1\u011a\13\62\1\0\6\62\27\0\1\62\1\0"+
    "\2\62\10\0\6\62\2\0\11\62\1\u011b\5\62\1\0"+
    "\6\62\62\0\1\u011c\45\0\1\62\1\0\2\62\10\0"+
    "\6\62\2\0\7\62\1\u011d\7\62\1\0\6\62\27\0"+
    "\1\62\1\0\2\62\10\0\6\62\2\0\5\62\1\u011e"+
    "\11\62\1\0\6\62\66\0\1\u011f\57\0\1\u0120\116\0"+
    "\1\u0121\44\0\1\62\1\0\2\62\10\0\6\62\2\0"+
    "\10\62\1\u0122\6\62\1\0\6\62\61\0\1\u0123\46\0"+
    "\1\62\1\0\2\62\10\0\6\62\2\0\6\62\1\u0124"+
    "\10\62\1\0\6\62\27\0\1\62\1\0\2\62\10\0"+
    "\6\62\2\0\6\62\1\u0125\10\62\1\0\6\62\61\0"+
    "\1\u0126\46\0\1\62\1\0\2\62\10\0\6\62\2\0"+
    "\6\62\1\u0127\10\62\1\0\6\62\55\0\1\u0128\52\0"+
    "\1\62\1\0\2\62\10\0\6\62\2\0\2\62\1\u0129"+
    "\14\62\1\0\6\62\27\0\1\62\1\0\2\62\10\0"+
    "\6\62\2\0\11\62\1\u012a\5\62\1\0\6\62\47\0"+
    "\1\u012b\2\0\2\u012c\15\0\1\u012b\36\0\1\62\1\0"+
    "\2\62\10\0\4\62\1\u012d\1\62\1\0\1\u012c\1\u012e"+
    "\15\62\1\u012d\1\0\6\62\63\0\1\u012f\44\0\1\62"+
    "\1\0\2\62\10\0\6\62\2\0\10\62\1\u0130\6\62"+
    "\1\0\6\62\27\0\1\62\1\0\2\62\10\0\6\62"+
    "\2\0\6\62\1\u0131\10\62\1\0\6\62\61\0\1\u0132"+
    "\46\0\1\62\1\0\2\62\10\0\6\62\2\0\6\62"+
    "\1\u0133\10\62\1\0\6\62\27\0\1\62\1\0\2\62"+
    "\10\0\3\62\1\u0134\2\62\2\0\15\62\1\u0134\1\62"+
    "\1\0\6\62\27\0\1\62\1\0\2\62\10\0\6\62"+
    "\2\0\10\62\1\u0135\6\62\1\0\6\62\61\0\1\u0136"+
    "\46\0\1\62\1\0\2\62\10\0\6\62\2\0\6\62"+
    "\1\u0137\10\62\1\0\6\62\27\0\1\62\1\0\2\62"+
    "\10\0\6\62\2\0\3\62\1\u0138\13\62\1\0\6\62"+
    "\61\0\1\u0139\65\0\1\u013a\120\0\1\u013b\41\0\1\62"+
    "\1\0\2\62\10\0\6\62\2\0\13\62\1\u013c\3\62"+
    "\1\0\6\62\60\0\1\u013d\47\0\1\62\1\0\2\62"+
    "\10\0\6\62\2\0\5\62\1\u013e\11\62\1\0\6\62"+
    "\27\0\1\62\1\0\2\62\10\0\6\62\2\0\4\62"+
    "\1\u013f\12\62\1\0\6\62\57\0\1\u0140\50\0\1\62"+
    "\1\0\2\62\10\0\6\62\2\0\4\62\1\u0141\12\62"+
    "\1\0\6\62\61\0\1\u0142\46\0\1\62\1\0\2\62"+
    "\10\0\6\62\2\0\6\62\1\u0143\10\62\1\0\6\62"+
    "\27\0\1\62\1\0\2\62\10\0\6\62\2\0\12\62"+
    "\1\u0144\4\62\1\0\6\62\52\0\2\u0145\111\0\1\u0146"+
    "\43\0\1\62\1\0\2\62\10\0\6\62\1\0\1\u0145"+
    "\1\u0147\16\62\1\0\6\62\27\0\1\62\1\0\2\62"+
    "\10\0\6\62\2\0\11\62\1\u0148\5\62\1\0\6\62"+
    "\55\0\1\u0149\52\0\1\62\1\0\2\62\10\0\6\62"+
    "\2\0\4\62\1\u014a\12\62\1\0\6\62\27\0\1\62"+
    "\1\0\2\62\10\0\6\62\2\0\13\62\1\u014b\3\62"+
    "\1\0\6\62\57\0\1\u014c\73\0\2\u014d\54\0\1\62"+
    "\1\0\2\62\10\0\6\62\1\0\1\u014d\1\u014e\16\62"+
    "\1\0\6\62\56\0\1\u014f\51\0\1\62\1\0\2\62"+
    "\10\0\6\62\2\0\3\62\1\u0150\13\62\1\0\6\62"+
    "\27\0\1\62\1\0\2\62\10\0\6\62\1\0\1\u0151"+
    "\1\u0152\16\62\1\0\6\62\46\0\1\u0153\21\0\1\u0153"+
    "\37\0\1\62\1\0\2\62\10\0\3\62\1\u0154\2\62"+
    "\2\0\15\62\1\u0154\1\62\1\0\6\62\27\0\1\62"+
    "\1\0\2\62\10\0\6\62\1\0\1\u0155\1\u0156\16\62"+
    "\1\0\6\62\64\0\1\u0157\66\0\2\u0158\54\0\1\62"+
    "\1\0\2\62\10\0\6\62\2\0\11\62\1\u0159\5\62"+
    "\1\0\6\62\27\0\1\62\1\0\2\62\10\0\6\62"+
    "\1\0\1\u0158\1\u015a\16\62\1\0\6\62\57\0\1\u015b"+
    "\50\0\1\62\1\0\2\62\10\0\6\62\2\0\3\62"+
    "\1\u015c\13\62\1\0\6\62\27\0\1\62\1\0\2\62"+
    "\10\0\6\62\2\0\3\62\1\u015d\13\62\1\0\6\62"+
    "\52\0\2\u0151\106\0\1\u015e\46\0\1\62\1\0\2\62"+
    "\10\0\6\62\2\0\6\62\1\u015f\10\62\1\0\6\62"+
    "\50\0\1\u0160\21\0\2\u0160\34\0\1\62\1\0\2\62"+
    "\10\0\5\62\1\u0161\2\0\17\62\1\u0160\1\u0161\5\62"+
    "\61\0\1\u0162\46\0\1\62\1\0\2\62\10\0\6\62"+
    "\2\0\6\62\1\u0163\10\62\1\0\6\62\61\0\1\u0164"+
    "\46\0\1\62\1\0\2\62\10\0\6\62\2\0\6\62"+
    "\1\u0165\10\62\1\0\6\62\61\0\1\u0166\104\0\1\u0167"+
    "\42\0\1\62\1\0\2\62\10\0\6\62\2\0\6\62"+
    "\1\u0168\10\62\1\0\6\62\27\0\1\62\1\0\2\62"+
    "\10\0\6\62\2\0\12\62\1\u0169\4\62\1\0\6\62"+
    "\56\0\1\u016a\51\0\1\62\1\0\2\62\10\0\6\62"+
    "\2\0\4\62\1\u016b\12\62\1\0\6\62\46\0\1\u016c"+
    "\21\0\1\u016c\62\0\2\u016d\54\0\1\62\1\0\2\62"+
    "\10\0\3\62\1\u016e\2\62\2\0\15\62\1\u016e\1\62"+
    "\1\0\6\62\27\0\1\62\1\0\2\62\10\0\6\62"+
    "\1\0\1\u016d\1\u016f\16\62\1\0\6\62\66\0\1\u0170"+
    "\73\0\1\u0171\46\0\1\62\1\0\2\62\10\0\6\62"+
    "\2\0\6\62\1\u0172\10\62\1\0\6\62\74\0\1\u0173"+
    "\52\0\1\u0174\21\0\1\u0174\37\0\1\62\1\0\2\62"+
    "\10\0\3\62\1\u0175\2\62\2\0\15\62\1\u0175\1\62"+
    "\1\0\6\62\65\0\1\u0176\100\0\1\u0177\65\0\2\u0178"+
    "\103\0\1\u0179\106\0\1\u017a\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18915];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\1\11\1\1\2\11\27\1\7\11"+
    "\3\1\2\11\1\1\2\0\1\1\5\0\3\1\1\0"+
    "\4\1\1\0\1\11\1\0\1\11\5\1\1\0\7\1"+
    "\1\0\11\1\1\0\1\1\10\11\1\1\6\0\4\1"+
    "\2\0\4\1\2\0\2\1\1\0\3\1\1\0\7\1"+
    "\1\0\13\1\1\0\3\1\5\0\1\11\1\0\1\1"+
    "\1\0\2\1\1\0\1\1\1\0\2\1\1\0\2\1"+
    "\2\0\2\1\1\0\3\1\1\11\4\1\1\0\2\1"+
    "\1\0\3\1\1\0\6\1\1\0\2\1\1\0\2\1"+
    "\5\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\2\1\1\11\2\1\2\0\2\1\1\0\4\1"+
    "\1\0\1\1\1\0\1\11\3\1\1\0\2\1\1\0"+
    "\4\1\1\0\2\1\1\0\2\1\1\0\3\11\1\1"+
    "\1\11\1\1\1\0\1\1\1\11\1\1\1\0\3\1"+
    "\1\0\1\11\2\1\1\0\4\1\1\0\2\1\1\11"+
    "\2\1\1\0\3\1\1\0\2\1\3\0\1\1\1\0"+
    "\2\1\1\0\1\1\1\0\2\1\2\0\2\1\1\0"+
    "\2\1\1\11\3\1\1\11\2\1\1\0\1\11\1\0"+
    "\1\1\1\0\2\1\1\11\1\1\1\0\2\1\2\0"+
    "\2\1\1\0\2\1\2\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\1\2\0\2\1\1\0"+
    "\2\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\2\0\2\1\1\0\1\1\1\11\1\0\2\1"+
    "\2\0\1\1\1\0\1\11\1\1\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[378];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexicoGXML(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 244) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  private final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.out.println("Linea: " + (yyline+1) + " Columna: " + (yycolumn+1) + " - Error Lexico en: " + yytext());
          }
        case 76: break;
        case 2: 
          { return new Symbol(simbolo.valor_simbolo, yyline, yycolumn,yytext());
          }
        case 77: break;
        case 3: 
          { return new Symbol(simbolo.valor_numero_completo, yyline, yycolumn,yytext());
          }
        case 78: break;
        case 4: 
          { return new Symbol(simbolo.menos, yyline, yycolumn,yytext());
          }
        case 79: break;
        case 5: 
          { return new Symbol(simbolo.valor_id, yyline, yycolumn,yytext());
          }
        case 80: break;
        case 6: 
          { /* ignore white space. */
          }
        case 81: break;
        case 7: 
          { return new Symbol(simbolo.div, yyline, yycolumn,yytext());
          }
        case 82: break;
        case 8: 
          { return new Symbol(simbolo.por, yyline, yycolumn,yytext());
          }
        case 83: break;
        case 9: 
          { return new Symbol(simbolo.dospuntos, yyline, yycolumn,yytext());
          }
        case 84: break;
        case 10: 
          { return new Symbol(simbolo.x, yyline, yycolumn,yytext());
          }
        case 85: break;
        case 11: 
          { return new Symbol(simbolo.comilladoble, yyline, yycolumn,yytext());
          }
        case 86: break;
        case 12: 
          { return new Symbol(simbolo.y, yyline, yycolumn,yytext());
          }
        case 87: break;
        case 13: 
          { return new Symbol(simbolo.abre, yyline, yycolumn,yytext());
          }
        case 88: break;
        case 14: 
          { return new Symbol(simbolo.cierra, yyline, yycolumn,yytext());
          }
        case 89: break;
        case 15: 
          { return new Symbol(simbolo.igual, yyline, yycolumn,yytext());
          }
        case 90: break;
        case 16: 
          { return new Symbol(simbolo.llavea, yyline, yycolumn,yytext());
          }
        case 91: break;
        case 17: 
          { return new Symbol(simbolo.llavec, yyline, yycolumn,yytext());
          }
        case 92: break;
        case 18: 
          { return new Symbol(simbolo.parena, yyline, yycolumn,yytext());
          }
        case 93: break;
        case 19: 
          { return new Symbol(simbolo.parenc, yyline, yycolumn,yytext());
          }
        case 94: break;
        case 20: 
          { return new Symbol(simbolo.coma, yyline, yycolumn,yytext());
          }
        case 95: break;
        case 21: 
          { return new Symbol(simbolo.mas, yyline, yycolumn,yytext());
          }
        case 96: break;
        case 22: 
          { return new Symbol(simbolo.potencia, yyline, yycolumn,yytext());
          }
        case 97: break;
        case 23: 
          { return new Symbol(simbolo.not, yyline, yycolumn,yytext());
          }
        case 98: break;
        case 24: 
          { return new Symbol(simbolo.pyc, yyline, yycolumn,yytext());
          }
        case 99: break;
        case 25: 
          { return new Symbol(simbolo.interrogaa, yyline, yycolumn,yytext());
          }
        case 100: break;
        case 26: 
          { return new Symbol(simbolo.valor_cadena, yyline, yycolumn,yytext());
          }
        case 101: break;
        case 27: 
          { return new Symbol(simbolo.id, yyline, yycolumn,yytext());
          }
        case 102: break;
        case 28: 
          { return new Symbol(simbolo.menorigualq, yyline, yycolumn,yytext());
          }
        case 103: break;
        case 29: 
          { return new Symbol(simbolo.mayorigualq, yyline, yycolumn,yytext());
          }
        case 104: break;
        case 30: 
          { return new Symbol(simbolo.igualigual, yyline, yycolumn,yytext());
          }
        case 105: break;
        case 31: 
          { return new Symbol(simbolo.diferente, yyline, yycolumn,yytext());
          }
        case 106: break;
        case 32: 
          { return new Symbol(simbolo.or, yyline, yycolumn,yytext());
          }
        case 107: break;
        case 33: 
          { return new Symbol(simbolo.and, yyline, yycolumn,yytext());
          }
        case 108: break;
        case 34: 
          { return new Symbol(simbolo.interrogac, yyline, yycolumn,yytext());
          }
        case 109: break;
        case 35: 
          { 
          }
        case 110: break;
        case 36: 
          { return new Symbol(simbolo.tam, yyline, yycolumn,yytext());
          }
        case 111: break;
        case 37: 
          { return new Symbol(simbolo.valor_path4, yyline, yycolumn,yytext());
          }
        case 112: break;
        case 38: 
          { return new Symbol(simbolo.path, yyline, yycolumn,yytext());
          }
        case 113: break;
        case 39: 
          { return new Symbol(simbolo.tipo, yyline, yycolumn,yytext());
          }
        case 114: break;
        case 40: 
          { return new Symbol(simbolo.alto, yyline, yycolumn,yytext());
          }
        case 115: break;
        case 41: 
          { return new Symbol(simbolo.e_dato, yyline, yycolumn,yytext());
          }
        case 116: break;
        case 42: 
          { return new Symbol(simbolo.valor_falso, yyline, yycolumn,yytext());
          }
        case 117: break;
        case 43: 
          { return new Symbol(simbolo.e_texto, yyline, yycolumn,yytext());
          }
        case 118: break;
        case 44: 
          { return new Symbol(simbolo.ancho, yyline, yycolumn,yytext());
          }
        case 119: break;
        case 45: 
          { return new Symbol(simbolo.video, yyline, yycolumn,yytext());
          }
        case 120: break;
        case 46: 
          { return new Symbol(simbolo.color, yyline, yycolumn,yytext());
          }
        case 121: break;
        case 47: 
          { return new Symbol(simbolo.borde, yyline, yycolumn,yytext());
          }
        case 122: break;
        case 48: 
          { return new Symbol(simbolo.e_boton, yyline, yycolumn,yytext());
          }
        case 123: break;
        case 49: 
          { return new Symbol(simbolo.valor_path3, yyline, yycolumn,yytext());
          }
        case 124: break;
        case 50: 
          { return new Symbol(simbolo.valor_path2, yyline, yycolumn,yytext());
          }
        case 125: break;
        case 51: 
          { return new Symbol(simbolo.minimo, yyline, yycolumn,yytext());
          }
        case 126: break;
        case 52: 
          { return new Symbol(simbolo.maximo, yyline, yycolumn,yytext());
          }
        case 127: break;
        case 53: 
          { return new Symbol(simbolo.musica, yyline, yycolumn,yytext());
          }
        case 128: break;
        case 54: 
          { return new Symbol(simbolo.fuente, yyline, yycolumn,yytext());
          }
        case 129: break;
        case 55: 
          { return new Symbol(simbolo.imagen, yyline, yycolumn,yytext());
          }
        case 130: break;
        case 56: 
          { return new Symbol(simbolo.accion, yyline, yycolumn,yytext());
          }
        case 131: break;
        case 57: 
          { return new Symbol(simbolo.e_enviar, yyline, yycolumn,yytext());
          }
        case 132: break;
        case 58: 
          { return new Symbol(simbolo.nombre, yyline, yycolumn,yytext());
          }
        case 133: break;
        case 59: 
          { return new Symbol(simbolo.e_ventana, yyline, yycolumn,yytext());
          }
        case 134: break;
        case 60: 
          { return new Symbol(simbolo.negrita, yyline, yycolumn,yytext());
          }
        case 135: break;
        case 61: 
          { return new Symbol(simbolo.e_control, yyline, yycolumn,yytext());
          }
        case 136: break;
        case 62: 
          { return new Symbol(simbolo.cursiva, yyline, yycolumn,yytext());
          }
        case 137: break;
        case 63: 
          { return new Symbol(simbolo.e_defecto, yyline, yycolumn,yytext());
          }
        case 138: break;
        case 64: 
          { return new Symbol(simbolo.valor_path, yyline, yycolumn,yytext());
          }
        case 139: break;
        case 65: 
          { return new Symbol(simbolo.e_importar, yyline, yycolumn,yytext());
          }
        case 140: break;
        case 66: 
          { return new Symbol(simbolo.principal, yyline, yycolumn,yytext());
          }
        case 141: break;
        case 67: 
          { return new Symbol(simbolo.valor_verdadero, yyline, yycolumn,yytext());
          }
        case 142: break;
        case 68: 
          { return new Symbol(simbolo.e_multimedia, yyline, yycolumn,yytext());
          }
        case 143: break;
        case 69: 
          { return new Symbol(simbolo.e_listadatos, yyline, yycolumn,yytext());
          }
        case 144: break;
        case 70: 
          { return new Symbol(simbolo.secundaria, yyline, yycolumn,yytext());
          }
        case 145: break;
        case 71: 
          { return new Symbol(simbolo.referencia, yyline, yycolumn,yytext());
          }
        case 146: break;
        case 72: 
          { return new Symbol(simbolo.e_contenedor, yyline, yycolumn,yytext());
          }
        case 147: break;
        case 73: 
          { return new Symbol(simbolo.accionfinal, yyline, yycolumn,yytext());
          }
        case 148: break;
        case 74: 
          { return new Symbol(simbolo.accioninicial, yyline, yycolumn,yytext());
          }
        case 149: break;
        case 75: 
          { return new Symbol(simbolo.auto_reproduccion, yyline, yycolumn,yytext());
          }
        case 150: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	return null;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
