/* The following code was generated by JFlex 1.6.0 */

package Analizadores.GramaticaGXML;
import java.util.LinkedList;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>lexicoGXML.jflex</tt>
 */
public class lexicoGXML implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  private static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\72\1\11\1\13\1\14\1\12\22\0\1\72\1\67\1\25"+
    "\1\3\1\4\1\2\1\71\1\0\1\62\1\63\1\16\1\65\1\64"+
    "\1\6\1\1\1\15\12\5\1\17\1\0\1\55\1\57\1\56\1\0"+
    "\1\2\1\35\1\51\1\41\1\42\1\37\1\45\1\54\1\53\1\27"+
    "\2\7\1\44\1\30\1\40\1\32\1\31\1\7\1\33\1\47\1\34"+
    "\1\50\1\36\1\7\1\43\1\52\1\7\1\0\1\20\1\0\1\66"+
    "\1\10\1\0\1\35\1\51\1\41\1\42\1\37\1\45\1\21\1\53"+
    "\1\27\2\7\1\24\1\23\1\40\1\32\1\31\1\7\1\33\1\47"+
    "\1\34\1\50\1\36\1\7\1\22\1\52\1\7\1\60\1\70\1\61"+
    "\7\0\1\13\252\0\2\26\115\0\1\46\u1ea8\0\1\13\1\13\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\2\5\1\12\1\1\13\5\1\1\2\5"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\2\1\2\0\1\5\5\0"+
    "\3\5\1\0\1\5\1\0\1\27\1\0\1\30\1\5"+
    "\1\30\3\5\1\0\7\5\1\0\13\5\1\0\2\5"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\2\37\5\0"+
    "\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0"+
    "\3\5\1\0\1\5\1\40\5\5\1\0\15\5\1\0"+
    "\3\5\1\37\6\0\1\5\1\0\2\5\1\0\1\5"+
    "\1\0\1\5\2\0\2\5\1\0\1\5\1\41\1\5"+
    "\2\42\1\5\1\43\1\5\1\0\2\5\1\0\3\5"+
    "\1\0\5\5\1\0\1\5\1\44\1\5\1\0\2\5"+
    "\1\0\3\5\4\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\2\0\2\5\1\0\2\5"+
    "\1\45\1\46\1\0\1\5\1\0\2\47\2\5\1\0"+
    "\2\5\1\0\1\5\1\50\2\5\1\0\2\5\2\51"+
    "\1\5\1\0\1\5\1\52\1\53\1\0\1\54\2\55"+
    "\2\56\1\0\1\5\2\57\1\0\1\5\1\0\1\60"+
    "\1\5\1\60\1\0\2\5\2\61\1\0\2\5\2\62"+
    "\1\63\1\0\3\5\1\0\2\5\1\64\1\0\1\5"+
    "\2\0\1\5\1\0\1\5\1\0\1\5\1\0\2\5"+
    "\2\0\2\5\1\0\1\5\1\65\2\66\1\67\1\5"+
    "\2\70\1\71\1\0\1\5\1\72\1\0\1\5\1\0"+
    "\1\5\2\73\1\0\2\5\2\0\2\5\1\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\2\74\1\0"+
    "\1\5\2\0\2\5\1\0\1\75\1\5\1\0\1\5"+
    "\2\76\2\77\2\100\2\0\2\5\1\0\1\101\2\102"+
    "\1\0\1\103\1\5\1\103\2\0\1\5\1\0\2\104"+
    "\4\0\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[369];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\73\0\166\0\261\0\261\0\354\0\73"+
    "\0\u0127\0\73\0\354\0\u0162\0\u019d\0\u01d8\0\u0213\0\u024e"+
    "\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426"+
    "\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d\0\354\0\u0588\0\u05c3"+
    "\0\u05fe\0\73\0\73\0\73\0\73\0\73\0\73\0\73"+
    "\0\u0639\0\u0674\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6"+
    "\0\u0811\0\u0127\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973"+
    "\0\u01d8\0\73\0\u09ae\0\73\0\u09e9\0\u0760\0\u0a24\0\u0a5f"+
    "\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37"+
    "\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f"+
    "\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7"+
    "\0\73\0\73\0\73\0\73\0\73\0\73\0\73\0\u1022"+
    "\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa"+
    "\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2"+
    "\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534\0\u0760\0\u156f"+
    "\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747"+
    "\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f"+
    "\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u0725\0\u1abc"+
    "\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94"+
    "\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c"+
    "\0\u1ea7\0\u1ee2\0\u1f1d\0\u0760\0\u1f58\0\73\0\u0760\0\u1f93"+
    "\0\u0760\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130"+
    "\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308"+
    "\0\u2343\0\u0760\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5"+
    "\0\u24e0\0\u251b\0\u2556\0\u2591\0\u25cc\0\u2607\0\u2642\0\u267d"+
    "\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u27a4\0\u27df\0\u281a\0\u2855"+
    "\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\u29b7\0\u0760\0\u0760"+
    "\0\u29f2\0\u2a2d\0\u2a68\0\73\0\u0760\0\u2aa3\0\u2ade\0\u2b19"+
    "\0\u2b54\0\u2b8f\0\u2bca\0\u2c05\0\u0760\0\u2c40\0\u2c7b\0\u2cb6"+
    "\0\u2cf1\0\u2d2c\0\73\0\u0760\0\u2d67\0\u2da2\0\u2ddd\0\u0760"+
    "\0\u0760\0\u2e18\0\73\0\73\0\u0760\0\73\0\u0760\0\u2e53"+
    "\0\u2e8e\0\73\0\u0760\0\u2ec9\0\u2f04\0\u2f3f\0\73\0\u2f7a"+
    "\0\u0760\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\u30dc\0\u3117"+
    "\0\u3152\0\73\0\u0760\0\u0760\0\u318d\0\u31c8\0\u3203\0\u323e"+
    "\0\u3279\0\u32b4\0\u32ef\0\u0760\0\u332a\0\u3365\0\u33a0\0\u33db"+
    "\0\u3416\0\u3451\0\u348c\0\u34c7\0\u3502\0\u353d\0\u3578\0\u35b3"+
    "\0\u35ee\0\u3629\0\u3664\0\u369f\0\u36da\0\u3715\0\u0760\0\73"+
    "\0\u0760\0\u0760\0\u3750\0\73\0\u0760\0\u0760\0\u378b\0\u37c6"+
    "\0\73\0\u3801\0\u383c\0\u3877\0\u38b2\0\73\0\u0760\0\u38ed"+
    "\0\u3928\0\u3963\0\u399e\0\u39d9\0\u3a14\0\u3a4f\0\u3a8a\0\u3ac5"+
    "\0\u3b00\0\u3b3b\0\u3b76\0\u3bb1\0\u3bec\0\u3c27\0\u3c62\0\73"+
    "\0\u0760\0\u3c9d\0\u3cd8\0\u3d13\0\u3d4e\0\u3d89\0\u3dc4\0\u3dff"+
    "\0\u0760\0\u3e3a\0\u3e75\0\u3eb0\0\73\0\u0760\0\73\0\u0760"+
    "\0\73\0\u0760\0\u3eeb\0\u3f26\0\u3f61\0\u3f9c\0\u3fd7\0\u0760"+
    "\0\73\0\u0760\0\u4012\0\73\0\u404d\0\u0760\0\u4088\0\u40c3"+
    "\0\u40fe\0\u4139\0\73\0\u0760\0\u4174\0\u41af\0\u41ea\0\u4225"+
    "\0\73";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[369];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\3\1\5\1\6\1\7\1\2"+
    "\2\10\1\0\1\10\1\11\1\12\2\2\1\7\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\14\1\21\1\7"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\13\1\15\1\32\1\33\1\34\1\7\1\35\1\36"+
    "\2\7\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\10\76\0"+
    "\1\54\1\55\73\0\1\5\72\0\1\56\1\0\2\56"+
    "\6\0\1\57\1\0\4\56\2\0\17\56\1\0\6\56"+
    "\17\0\1\60\5\0\1\61\10\0\1\62\4\61\2\0"+
    "\17\61\1\0\6\61\23\0\1\56\1\0\2\56\6\0"+
    "\1\57\1\0\4\56\1\0\1\63\1\64\5\56\1\65"+
    "\10\56\1\0\1\56\1\66\4\56\23\0\1\56\1\0"+
    "\2\56\6\0\1\57\1\0\4\56\1\0\1\67\1\70"+
    "\16\56\1\0\6\56\16\0\25\71\1\72\45\71\23\0"+
    "\1\73\4\0\1\73\11\0\1\74\35\0\1\56\1\0"+
    "\2\56\6\0\1\57\1\0\2\56\1\75\1\56\2\0"+
    "\1\56\1\75\11\56\1\76\3\56\1\0\6\56\23\0"+
    "\1\56\1\0\2\56\6\0\1\57\1\0\4\56\2\0"+
    "\4\56\1\77\1\56\1\100\10\56\1\0\6\56\23\0"+
    "\1\56\1\0\2\56\6\0\1\57\1\0\4\56\2\0"+
    "\10\56\1\101\6\56\1\0\6\56\23\0\1\56\1\0"+
    "\2\56\6\0\1\57\1\0\4\56\1\0\1\102\1\103"+
    "\5\56\1\104\1\56\1\105\6\56\1\0\6\56\23\0"+
    "\1\56\1\0\2\56\6\0\1\57\1\0\3\56\1\106"+
    "\2\0\11\56\1\107\1\110\2\56\1\106\1\56\1\0"+
    "\1\56\1\111\4\56\23\0\1\56\1\0\2\56\6\0"+
    "\1\57\1\0\4\56\1\0\1\112\1\113\7\56\1\114"+
    "\6\56\1\0\6\56\23\0\1\56\1\0\2\56\6\0"+
    "\1\57\1\0\4\56\2\0\11\56\1\115\5\56\1\0"+
    "\6\56\23\0\1\56\1\0\2\56\6\0\1\57\1\0"+
    "\4\56\2\0\3\56\1\116\4\56\1\117\6\56\1\0"+
    "\6\56\23\0\1\56\1\0\2\56\6\0\1\57\1\0"+
    "\4\56\2\0\3\56\1\120\13\56\1\0\1\56\1\121"+
    "\4\56\23\0\1\56\1\0\2\56\6\0\1\57\1\0"+
    "\4\56\2\0\6\56\1\122\1\56\1\123\6\56\1\0"+
    "\6\56\23\0\1\56\1\0\2\56\6\0\1\57\1\0"+
    "\4\56\2\0\6\56\1\124\10\56\1\0\1\56\1\125"+
    "\4\56\55\0\1\126\40\0\1\56\1\0\2\56\6\0"+
    "\1\57\1\0\4\56\2\0\10\56\1\127\6\56\1\0"+
    "\6\56\23\0\1\56\1\0\2\56\6\0\1\57\1\0"+
    "\4\56\2\0\3\56\1\130\13\56\1\0\6\56\75\0"+
    "\1\131\72\0\1\132\72\0\1\133\72\0\1\134\103\0"+
    "\1\135\73\0\1\136\1\0\11\54\1\137\1\140\2\0"+
    "\56\54\4\55\1\141\11\55\1\142\54\55\5\0\1\56"+
    "\1\0\2\56\10\0\4\56\2\0\17\56\1\0\6\56"+
    "\36\0\1\143\73\0\1\144\52\0\1\60\3\0\1\61"+
    "\1\0\2\61\7\0\1\62\4\61\2\0\17\61\1\0"+
    "\6\61\56\0\1\145\37\0\1\56\1\0\2\56\10\0"+
    "\4\56\2\0\11\56\1\146\5\56\1\0\6\56\23\0"+
    "\1\56\1\0\2\56\10\0\1\56\1\147\2\56\2\0"+
    "\14\56\1\147\2\56\1\0\6\56\23\0\1\56\1\0"+
    "\2\56\10\0\3\56\1\150\2\0\15\56\1\150\1\56"+
    "\1\151\1\152\5\56\64\0\2\153\30\0\1\56\1\0"+
    "\2\56\10\0\4\56\2\0\17\56\1\153\1\154\5\56"+
    "\47\0\1\155\3\0\1\156\42\0\1\56\1\0\2\56"+
    "\10\0\4\56\2\0\2\56\1\157\3\56\1\160\10\56"+
    "\1\0\6\56\23\0\1\56\1\0\2\56\10\0\4\56"+
    "\1\0\1\161\1\162\16\56\1\0\6\56\23\0\1\56"+
    "\1\0\2\56\10\0\4\56\2\0\5\56\1\163\11\56"+
    "\1\0\6\56\23\0\1\56\1\0\2\56\10\0\4\56"+
    "\2\0\16\56\1\164\1\0\6\56\47\0\1\165\46\0"+
    "\1\56\1\0\2\56\10\0\4\56\2\0\2\56\1\166"+
    "\14\56\1\0\6\56\23\0\1\56\1\0\2\56\10\0"+
    "\2\56\1\167\1\56\2\0\1\56\1\167\15\56\1\0"+
    "\6\56\23\0\1\56\1\0\2\56\10\0\1\56\1\170"+
    "\2\56\2\0\14\56\1\170\2\56\1\0\6\56\23\0"+
    "\1\56\1\0\2\56\10\0\4\56\2\0\5\56\1\171"+
    "\11\56\1\0\6\56\23\0\1\56\1\0\2\56\10\0"+
    "\4\56\2\0\12\56\1\172\4\56\1\0\6\56\23\0"+
    "\1\56\1\0\2\56\10\0\4\56\2\0\12\56\1\173"+
    "\4\56\1\0\6\56\23\0\1\56\1\0\2\56\10\0"+
    "\4\56\2\0\5\56\1\174\11\56\1\0\6\56\60\0"+
    "\1\175\35\0\1\56\1\0\2\56\10\0\4\56\2\0"+
    "\13\56\1\176\3\56\1\0\6\56\23\0\1\56\1\0"+
    "\2\56\10\0\4\56\2\0\4\56\1\177\4\56\1\200"+
    "\5\56\1\0\6\56\23\0\1\56\1\0\2\56\10\0"+
    "\4\56\2\0\7\56\1\201\7\56\1\0\6\56\23\0"+
    "\1\56\1\0\2\56\10\0\2\56\1\202\1\56\2\0"+
    "\1\56\1\202\15\56\1\0\6\56\23\0\1\56\1\0"+
    "\2\56\10\0\1\203\3\56\2\0\17\56\1\0\5\56"+
    "\1\203\23\0\1\56\1\0\2\56\10\0\3\56\1\204"+
    "\2\0\11\56\1\205\3\56\1\204\1\56\1\0\6\56"+
    "\23\0\1\56\1\0\2\56\10\0\4\56\2\0\4\56"+
    "\1\206\12\56\1\0\6\56\23\0\1\56\1\0\2\56"+
    "\10\0\4\56\2\0\5\56\1\207\11\56\1\0\6\56"+
    "\23\0\1\56\1\0\2\56\10\0\4\56\2\0\16\56"+
    "\1\210\1\0\6\56\23\0\1\56\1\0\2\56\10\0"+
    "\3\56\1\211\2\0\15\56\1\211\1\56\1\0\6\56"+
    "\23\0\1\56\1\0\2\56\10\0\4\56\2\0\10\56"+
    "\1\212\6\56\1\0\6\56\57\0\1\213\36\0\1\56"+
    "\1\0\2\56\10\0\4\56\2\0\12\56\1\214\4\56"+
    "\1\0\6\56\23\0\1\56\1\0\2\56\10\0\4\56"+
    "\2\0\4\56\1\215\1\216\11\56\1\0\6\56\27\0"+
    "\1\137\61\0\3\55\1\217\1\141\11\55\1\142\54\55"+
    "\4\220\1\221\10\220\1\0\55\220\1\0\1\222\5\0"+
    "\1\223\10\0\1\143\4\223\2\0\17\223\1\0\6\223"+
    "\40\0\1\224\76\0\2\225\50\0\1\56\1\0\2\56"+
    "\10\0\4\56\1\0\1\225\1\226\16\56\1\0\6\56"+
    "\23\0\1\56\1\0\2\56\10\0\4\56\1\0\1\227"+
    "\1\230\16\56\1\0\6\56\23\0\1\56\1\0\2\56"+
    "\10\0\4\56\2\0\5\56\1\231\11\56\1\0\6\56"+
    "\44\0\2\232\50\0\1\56\1\0\2\56\10\0\4\56"+
    "\1\0\1\232\1\233\16\56\1\0\6\56\52\0\1\234"+
    "\43\0\1\56\1\0\2\56\10\0\4\56\2\0\5\56"+
    "\1\235\11\56\1\0\6\56\50\0\1\236\61\0\1\237"+
    "\32\0\1\237\23\0\1\56\1\0\2\56\10\0\4\56"+
    "\2\0\3\56\1\240\13\56\1\0\6\56\23\0\1\56"+
    "\1\0\2\56\10\0\1\241\3\56\2\0\17\56\1\0"+
    "\5\56\1\241\56\0\1\242\37\0\1\56\1\0\2\56"+
    "\10\0\4\56\2\0\11\56\1\243\5\56\1\0\6\56"+
    "\23\0\1\56\1\0\2\56\10\0\4\56\2\0\17\56"+
    "\1\0\4\56\1\244\1\56\23\0\1\56\1\0\2\56"+
    "\10\0\4\56\2\0\10\56\1\245\6\56\1\0\6\56"+
    "\50\0\1\246\45\0\1\56\1\0\2\56\10\0\4\56"+
    "\2\0\3\56\1\247\13\56\1\0\6\56\23\0\1\56"+
    "\1\0\2\56\10\0\4\56\2\0\5\56\1\250\11\56"+
    "\1\0\6\56\23\0\1\56\1\0\2\56\10\0\4\56"+
    "\2\0\3\56\1\251\13\56\1\0\6\56\23\0\1\56"+
    "\1\0\2\56\10\0\4\56\2\0\17\56\1\0\4\56"+
    "\1\252\1\56\23\0\1\56\1\0\2\56\10\0\4\56"+
    "\1\0\1\253\1\254\16\56\1\0\6\56\23\0\1\56"+
    "\1\0\2\56\10\0\4\56\2\0\3\56\1\255\13\56"+
    "\1\0\6\56\55\0\1\256\40\0\1\56\1\0\2\56"+
    "\10\0\4\56\2\0\10\56\1\257\6\56\1\0\6\56"+
    "\23\0\1\56\1\0\2\56\10\0\4\56\2\0\13\56"+
    "\1\260\3\56\1\0\6\56\23\0\1\56\1\0\2\56"+
    "\10\0\4\56\2\0\5\56\1\261\11\56\1\0\6\56"+
    "\23\0\1\56\1\0\2\56\10\0\4\56\1\0\1\262"+
    "\1\263\16\56\1\0\6\56\23\0\1\56\1\0\2\56"+
    "\10\0\4\56\2\0\17\56\1\0\2\56\1\264\3\56"+
    "\23\0\1\56\1\0\2\56\10\0\4\56\2\0\4\56"+
    "\1\265\12\56\1\0\6\56\23\0\1\56\1\0\2\56"+
    "\10\0\4\56\2\0\3\56\1\266\13\56\1\0\6\56"+
    "\23\0\1\56\1\0\2\56\10\0\4\56\2\0\5\56"+
    "\1\267\11\56\1\0\6\56\23\0\1\56\1\0\2\56"+
    "\10\0\4\56\2\0\17\56\1\270\1\271\5\56\23\0"+
    "\1\56\1\0\2\56\10\0\4\56\2\0\3\56\1\272"+
    "\13\56\1\0\6\56\23\0\1\56\1\0\2\56\10\0"+
    "\4\56\2\0\10\56\1\273\6\56\1\0\6\56\23\0"+
    "\1\56\1\0\2\56\10\0\4\56\2\0\17\56\1\274"+
    "\1\275\5\56\23\0\1\56\1\0\2\56\10\0\4\56"+
    "\2\0\11\56\1\276\5\56\1\0\6\56\66\0\1\277"+
    "\27\0\1\56\1\0\2\56\10\0\4\56\2\0\17\56"+
    "\1\0\1\56\1\300\4\56\23\0\1\56\1\0\2\56"+
    "\10\0\4\56\2\0\13\56\1\301\3\56\1\0\6\56"+
    "\23\0\1\56\1\0\2\56\10\0\4\56\2\0\3\56"+
    "\1\302\13\56\1\0\6\56\16\0\4\55\1\141\10\55"+
    "\1\303\1\142\57\55\1\217\1\141\10\55\1\303\1\142"+
    "\54\55\21\0\1\304\52\0\1\222\3\0\1\223\1\0"+
    "\2\223\7\0\1\143\4\223\2\0\17\223\1\0\6\223"+
    "\41\0\1\305\72\0\1\306\4\0\1\306\47\0\1\56"+
    "\1\0\2\56\10\0\2\56\1\307\1\56\2\0\1\56"+
    "\1\307\15\56\1\0\6\56\41\0\1\310\4\0\1\310"+
    "\47\0\1\56\1\0\2\56\10\0\2\56\1\311\1\56"+
    "\2\0\1\56\1\311\15\56\1\0\6\56\23\0\1\56"+
    "\1\0\2\56\10\0\4\56\1\0\1\312\1\313\16\56"+
    "\1\0\6\56\57\0\1\314\36\0\1\56\1\0\2\56"+
    "\10\0\4\56\2\0\12\56\1\315\4\56\1\0\6\56"+
    "\53\0\1\316\42\0\1\56\1\0\2\56\10\0\4\56"+
    "\2\0\6\56\1\317\10\56\1\0\6\56\51\0\1\320"+
    "\76\0\1\321\40\0\1\56\1\0\2\56\10\0\4\56"+
    "\2\0\4\56\1\322\12\56\1\0\6\56\23\0\1\56"+
    "\1\0\2\56\10\0\4\56\2\0\10\56\1\323\6\56"+
    "\1\0\6\56\57\0\1\324\36\0\1\56\1\0\2\56"+
    "\10\0\4\56\2\0\12\56\1\325\4\56\1\0\6\56"+
    "\23\0\1\56\1\0\2\56\10\0\4\56\2\0\4\56"+
    "\1\326\12\56\1\0\6\56\23\0\1\56\1\0\2\56"+
    "\10\0\4\56\2\0\3\56\1\327\13\56\1\0\6\56"+
    "\23\0\1\56\1\0\2\56\10\0\4\56\2\0\3\56"+
    "\1\330\13\56\1\0\6\56\50\0\1\331\45\0\1\56"+
    "\1\0\2\56\10\0\4\56\2\0\3\56\1\332\13\56"+
    "\1\0\6\56\23\0\1\56\1\333\2\56\10\0\4\56"+
    "\2\0\17\56\1\0\6\56\50\0\1\334\45\0\1\56"+
    "\1\0\2\56\10\0\4\56\2\0\3\56\1\335\13\56"+
    "\1\0\6\56\23\0\1\56\1\0\2\56\10\0\4\56"+
    "\2\0\6\56\1\336\10\56\1\0\6\56\23\0\1\56"+
    "\1\0\2\56\10\0\4\56\2\0\6\56\1\337\10\56"+
    "\1\0\6\56\53\0\1\340\42\0\1\56\1\0\2\56"+
    "\10\0\4\56\2\0\6\56\1\341\10\56\1\0\6\56"+
    "\23\0\1\56\1\0\2\56\10\0\4\56\2\0\4\56"+
    "\1\342\12\56\1\0\6\56\23\0\1\56\1\0\2\56"+
    "\10\0\4\56\1\0\1\343\1\344\16\56\1\0\6\56"+
    "\23\0\1\56\1\0\2\56\10\0\4\56\2\0\4\56"+
    "\1\345\12\56\1\0\6\56\23\0\1\56\1\0\2\56"+
    "\10\0\4\56\2\0\4\56\1\346\3\56\1\347\6\56"+
    "\1\0\6\56\44\0\2\350\50\0\1\56\1\0\2\56"+
    "\10\0\4\56\1\0\1\350\1\351\16\56\1\0\6\56"+
    "\23\0\1\56\1\0\2\56\10\0\4\56\2\0\12\56"+
    "\1\352\4\56\1\0\6\56\50\0\1\353\45\0\1\56"+
    "\1\0\2\56\10\0\4\56\2\0\3\56\1\354\13\56"+
    "\1\0\6\56\23\0\1\56\1\0\2\56\10\0\4\56"+
    "\2\0\5\56\1\355\11\56\1\0\6\56\56\0\1\356"+
    "\37\0\1\56\1\0\2\56\10\0\4\56\2\0\11\56"+
    "\1\357\5\56\1\0\6\56\23\0\1\56\1\0\2\56"+
    "\10\0\4\56\2\0\10\56\1\360\6\56\1\0\6\56"+
    "\23\0\1\56\1\0\2\56\10\0\4\56\2\0\11\56"+
    "\1\361\5\56\1\0\6\56\33\0\1\220\77\0\1\362"+
    "\74\0\1\363\100\0\1\364\45\0\1\56\1\0\2\56"+
    "\10\0\4\56\2\0\3\56\1\365\13\56\1\0\6\56"+
    "\50\0\1\366\45\0\1\56\1\0\2\56\10\0\4\56"+
    "\2\0\3\56\1\367\13\56\1\0\6\56\41\0\1\370"+
    "\4\0\1\370\47\0\1\56\1\0\2\56\10\0\2\56"+
    "\1\371\1\56\2\0\1\56\1\371\15\56\1\0\6\56"+
    "\53\0\1\372\42\0\1\56\1\0\2\56\10\0\4\56"+
    "\2\0\6\56\1\373\10\56\1\0\6\56\60\0\1\374"+
    "\35\0\1\56\1\0\2\56\10\0\4\56\2\0\13\56"+
    "\1\375\3\56\1\0\6\56\52\0\1\376\76\0\1\377"+
    "\37\0\1\56\1\0\2\56\10\0\4\56\2\0\5\56"+
    "\1\u0100\11\56\1\0\6\56\23\0\1\56\1\0\2\56"+
    "\10\0\4\56\2\0\11\56\1\u0101\5\56\1\0\6\56"+
    "\44\0\2\u0102\50\0\1\56\1\0\2\56\10\0\4\56"+
    "\1\0\1\u0102\1\u0103\16\56\1\0\6\56\23\0\1\56"+
    "\1\0\2\56\10\0\4\56\2\0\10\56\1\u0104\6\56"+
    "\1\0\6\56\56\0\1\u0105\37\0\1\56\1\0\2\56"+
    "\10\0\4\56\2\0\11\56\1\u0106\5\56\1\0\6\56"+
    "\51\0\1\u0107\44\0\1\56\1\0\2\56\10\0\4\56"+
    "\2\0\13\56\1\u0108\3\56\1\0\6\56\23\0\1\56"+
    "\1\0\2\56\10\0\4\56\2\0\11\56\1\u0109\5\56"+
    "\1\0\6\56\51\0\1\u010a\44\0\1\56\1\0\2\56"+
    "\10\0\4\56\2\0\4\56\1\u010b\12\56\1\0\6\56"+
    "\23\0\1\56\1\0\2\56\10\0\4\56\2\0\10\56"+
    "\1\u010c\6\56\1\0\6\56\52\0\1\u010d\43\0\1\56"+
    "\1\0\2\56\10\0\4\56\2\0\5\56\1\u010e\11\56"+
    "\1\0\6\56\23\0\1\56\1\0\2\56\10\0\4\56"+
    "\2\0\3\56\1\u010f\13\56\1\0\6\56\23\0\1\56"+
    "\1\0\2\56\10\0\4\56\2\0\11\56\1\u0110\5\56"+
    "\1\0\6\56\54\0\1\u0111\41\0\1\56\1\0\2\56"+
    "\10\0\4\56\2\0\7\56\1\u0112\7\56\1\0\6\56"+
    "\23\0\1\56\1\0\2\56\10\0\4\56\2\0\5\56"+
    "\1\u0113\11\56\1\0\6\56\23\0\1\56\1\0\2\56"+
    "\10\0\4\56\2\0\10\56\1\u0114\6\56\1\0\6\56"+
    "\60\0\1\u0115\35\0\1\56\1\0\2\56\10\0\4\56"+
    "\2\0\13\56\1\u0116\3\56\1\0\6\56\41\0\1\u0117"+
    "\106\0\1\u0118\40\0\1\56\1\0\2\56\10\0\4\56"+
    "\2\0\10\56\1\u0119\6\56\1\0\6\56\53\0\1\u011a"+
    "\42\0\1\56\1\0\2\56\10\0\4\56\2\0\6\56"+
    "\1\u011b\10\56\1\0\6\56\53\0\1\u011c\42\0\1\56"+
    "\1\0\2\56\10\0\4\56\2\0\6\56\1\u011d\10\56"+
    "\1\0\6\56\47\0\1\u011e\46\0\1\56\1\0\2\56"+
    "\10\0\4\56\2\0\2\56\1\u011f\14\56\1\0\6\56"+
    "\23\0\1\56\1\0\2\56\10\0\4\56\2\0\11\56"+
    "\1\u0120\5\56\1\0\6\56\44\0\2\u0121\15\0\1\u0122"+
    "\32\0\1\56\1\0\2\56\10\0\4\56\1\0\1\u0121"+
    "\1\u0123\15\56\1\u0124\1\0\6\56\55\0\1\u0125\40\0"+
    "\1\56\1\0\2\56\10\0\4\56\2\0\10\56\1\u0126"+
    "\6\56\1\0\6\56\23\0\1\56\1\0\2\56\10\0"+
    "\4\56\2\0\6\56\1\u0127\10\56\1\0\6\56\53\0"+
    "\1\u0128\42\0\1\56\1\0\2\56\10\0\4\56\2\0"+
    "\6\56\1\u0129\10\56\1\0\6\56\23\0\1\56\1\0"+
    "\2\56\10\0\3\56\1\u012a\2\0\15\56\1\u012a\1\56"+
    "\1\0\6\56\23\0\1\56\1\0\2\56\10\0\4\56"+
    "\2\0\10\56\1\u012b\6\56\1\0\6\56\53\0\1\u012c"+
    "\42\0\1\56\1\0\2\56\10\0\4\56\2\0\6\56"+
    "\1\u012d\10\56\1\0\6\56\23\0\1\56\1\0\2\56"+
    "\10\0\4\56\2\0\3\56\1\u012e\13\56\1\0\6\56"+
    "\53\0\1\u012f\42\0\1\56\1\0\2\56\10\0\4\56"+
    "\2\0\6\56\1\u0130\10\56\1\0\6\56\42\0\1\u0131"+
    "\110\0\1\u0132\35\0\1\56\1\0\2\56\10\0\4\56"+
    "\2\0\13\56\1\u0133\3\56\1\0\6\56\52\0\1\u0134"+
    "\43\0\1\56\1\0\2\56\10\0\4\56\2\0\5\56"+
    "\1\u0135\11\56\1\0\6\56\51\0\1\u0136\44\0\1\56"+
    "\1\0\2\56\10\0\4\56\2\0\4\56\1\u0137\12\56"+
    "\1\0\6\56\53\0\1\u0138\42\0\1\56\1\0\2\56"+
    "\10\0\4\56\2\0\6\56\1\u0139\10\56\1\0\6\56"+
    "\23\0\1\56\1\0\2\56\10\0\4\56\2\0\12\56"+
    "\1\u013a\4\56\1\0\6\56\56\0\1\u013b\60\0\2\u013c"+
    "\50\0\1\56\1\0\2\56\10\0\4\56\2\0\11\56"+
    "\1\u013d\5\56\1\0\6\56\23\0\1\56\1\0\2\56"+
    "\10\0\4\56\1\0\1\u013c\1\u013e\16\56\1\0\6\56"+
    "\47\0\1\u013f\46\0\1\56\1\0\2\56\10\0\4\56"+
    "\2\0\4\56\1\u0140\12\56\1\0\6\56\23\0\1\56"+
    "\1\0\2\56\10\0\4\56\2\0\13\56\1\u0141\3\56"+
    "\1\0\6\56\51\0\1\u0142\44\0\1\56\1\0\2\56"+
    "\10\0\4\56\2\0\4\56\1\u0143\12\56\1\0\6\56"+
    "\44\0\2\u0144\50\0\1\56\1\0\2\56\10\0\4\56"+
    "\1\0\1\u0144\1\u0145\16\56\1\0\6\56\50\0\1\u0146"+
    "\45\0\1\56\1\0\2\56\10\0\4\56\2\0\3\56"+
    "\1\u0147\13\56\1\0\6\56\42\0\1\u0148\17\0\1\u0148"+
    "\33\0\1\56\1\0\2\56\10\0\3\56\1\u0149\2\0"+
    "\15\56\1\u0149\1\56\1\0\6\56\23\0\1\56\1\0"+
    "\2\56\10\0\4\56\1\0\1\u014a\1\u014b\16\56\1\0"+
    "\6\56\44\0\2\u014c\103\0\1\u014d\37\0\1\56\1\0"+
    "\2\56\10\0\4\56\1\0\1\u014c\1\u014e\16\56\1\0"+
    "\6\56\23\0\1\56\1\0\2\56\10\0\4\56\2\0"+
    "\11\56\1\u014f\5\56\1\0\6\56\51\0\1\u0150\44\0"+
    "\1\56\1\0\2\56\10\0\4\56\2\0\3\56\1\u0151"+
    "\13\56\1\0\6\56\23\0\1\56\1\0\2\56\10\0"+
    "\4\56\2\0\3\56\1\u0152\13\56\1\0\6\56\44\0"+
    "\2\u0153\50\0\1\56\1\0\2\56\10\0\4\56\1\0"+
    "\1\u0153\1\u0154\16\56\1\0\6\56\53\0\1\u0155\42\0"+
    "\1\56\1\0\2\56\10\0\4\56\2\0\6\56\1\u0156"+
    "\10\56\1\0\6\56\64\0\2\u0157\30\0\1\56\1\0"+
    "\2\56\10\0\4\56\2\0\17\56\1\u0157\1\u0158\5\56"+
    "\53\0\1\u0159\42\0\1\56\1\0\2\56\10\0\4\56"+
    "\2\0\6\56\1\u015a\10\56\1\0\6\56\57\0\1\u015b"+
    "\66\0\1\u015c\42\0\1\56\1\0\2\56\10\0\4\56"+
    "\2\0\12\56\1\u015d\4\56\1\0\6\56\23\0\1\56"+
    "\1\0\2\56\10\0\4\56\2\0\6\56\1\u015e\10\56"+
    "\1\0\6\56\50\0\1\u015f\45\0\1\56\1\0\2\56"+
    "\10\0\4\56\2\0\4\56\1\u0160\12\56\1\0\6\56"+
    "\53\0\1\u0161\42\0\1\56\1\0\2\56\10\0\4\56"+
    "\2\0\6\56\1\u0162\10\56\1\0\6\56\44\0\2\u0163"+
    "\67\0\1\u0164\17\0\1\u0164\33\0\1\56\1\0\2\56"+
    "\10\0\4\56\1\0\1\u0163\1\u0165\16\56\1\0\6\56"+
    "\23\0\1\56\1\0\2\56\10\0\3\56\1\u0166\2\0"+
    "\15\56\1\u0166\1\56\1\0\6\56\60\0\1\u0167\65\0"+
    "\1\u0168\42\0\1\56\1\0\2\56\10\0\4\56\2\0"+
    "\6\56\1\u0169\10\56\1\0\6\56\66\0\1\u016a\46\0"+
    "\1\u016b\17\0\1\u016b\33\0\1\56\1\0\2\56\10\0"+
    "\3\56\1\u016c\2\0\15\56\1\u016c\1\56\1\0\6\56"+
    "\57\0\1\u016d\72\0\1\u016e\57\0\2\u016f\75\0\1\u0170"+
    "\100\0\1\u0171\32\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16992];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\1\11\1\1\1\11\27\1\7\11"+
    "\3\1\2\0\1\1\5\0\3\1\1\0\1\1\1\0"+
    "\1\11\1\0\1\11\5\1\1\0\7\1\1\0\13\1"+
    "\1\0\2\1\7\11\1\1\5\0\3\1\1\0\1\1"+
    "\1\0\1\1\2\0\2\1\1\0\3\1\1\0\7\1"+
    "\1\0\15\1\1\0\4\1\6\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\2\0\2\1\1\0\3\1"+
    "\1\11\4\1\1\0\2\1\1\0\3\1\1\0\5\1"+
    "\1\0\3\1\1\0\2\1\1\0\3\1\4\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\2\0\2\1\1\0\4\1\1\0\1\1\1\0\1\11"+
    "\3\1\1\0\2\1\1\0\4\1\1\0\2\1\1\11"+
    "\2\1\1\0\3\1\1\0\2\11\1\1\1\11\1\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\1\0\1\11"+
    "\2\1\1\0\4\1\1\0\2\1\1\11\2\1\1\0"+
    "\3\1\1\0\3\1\1\0\1\1\2\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\2\0\2\1\1\0"+
    "\2\1\1\11\3\1\1\11\2\1\1\0\1\1\1\11"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\1\0\2\1"+
    "\2\0\2\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\2\0\2\1"+
    "\1\0\2\1\1\0\1\1\1\11\1\1\1\11\1\1"+
    "\1\11\1\1\2\0\2\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\11\2\1\2\0\1\1\1\0\1\11\1\1"+
    "\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[369];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexicoGXML(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 232) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  private final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.out.println("Linea: " + (yyline+1) + " Columna: " + (yycolumn+1) + " - Error Lexico en: " + yytext());
          }
        case 70: break;
        case 2: 
          { return new Symbol(simbolo.valor_simbolo, yyline, yycolumn,yytext());
          }
        case 71: break;
        case 3: 
          { return new Symbol(simbolo.valor_numero_completo, yyline, yycolumn,yytext());
          }
        case 72: break;
        case 4: 
          { return new Symbol(simbolo.menos, yyline, yycolumn,yytext());
          }
        case 73: break;
        case 5: 
          { return new Symbol(simbolo.valor_id, yyline, yycolumn,yytext());
          }
        case 74: break;
        case 6: 
          { /* ignore white space. */
          }
        case 75: break;
        case 7: 
          { return new Symbol(simbolo.div, yyline, yycolumn,yytext());
          }
        case 76: break;
        case 8: 
          { return new Symbol(simbolo.por, yyline, yycolumn,yytext());
          }
        case 77: break;
        case 9: 
          { return new Symbol(simbolo.x, yyline, yycolumn,yytext());
          }
        case 78: break;
        case 10: 
          { return new Symbol(simbolo.comilladoble, yyline, yycolumn,yytext());
          }
        case 79: break;
        case 11: 
          { return new Symbol(simbolo.y, yyline, yycolumn,yytext());
          }
        case 80: break;
        case 12: 
          { return new Symbol(simbolo.abre, yyline, yycolumn,yytext());
          }
        case 81: break;
        case 13: 
          { return new Symbol(simbolo.cierra, yyline, yycolumn,yytext());
          }
        case 82: break;
        case 14: 
          { return new Symbol(simbolo.igual, yyline, yycolumn,yytext());
          }
        case 83: break;
        case 15: 
          { return new Symbol(simbolo.llavea, yyline, yycolumn,yytext());
          }
        case 84: break;
        case 16: 
          { return new Symbol(simbolo.llavec, yyline, yycolumn,yytext());
          }
        case 85: break;
        case 17: 
          { return new Symbol(simbolo.parena, yyline, yycolumn,yytext());
          }
        case 86: break;
        case 18: 
          { return new Symbol(simbolo.parenc, yyline, yycolumn,yytext());
          }
        case 87: break;
        case 19: 
          { return new Symbol(simbolo.coma, yyline, yycolumn,yytext());
          }
        case 88: break;
        case 20: 
          { return new Symbol(simbolo.mas, yyline, yycolumn,yytext());
          }
        case 89: break;
        case 21: 
          { return new Symbol(simbolo.potencia, yyline, yycolumn,yytext());
          }
        case 90: break;
        case 22: 
          { return new Symbol(simbolo.not, yyline, yycolumn,yytext());
          }
        case 91: break;
        case 23: 
          { return new Symbol(simbolo.valor_cadena, yyline, yycolumn,yytext());
          }
        case 92: break;
        case 24: 
          { return new Symbol(simbolo.id, yyline, yycolumn,yytext());
          }
        case 93: break;
        case 25: 
          { return new Symbol(simbolo.menorigualq, yyline, yycolumn,yytext());
          }
        case 94: break;
        case 26: 
          { return new Symbol(simbolo.mayorigualq, yyline, yycolumn,yytext());
          }
        case 95: break;
        case 27: 
          { return new Symbol(simbolo.igualigual, yyline, yycolumn,yytext());
          }
        case 96: break;
        case 28: 
          { return new Symbol(simbolo.diferente, yyline, yycolumn,yytext());
          }
        case 97: break;
        case 29: 
          { return new Symbol(simbolo.or, yyline, yycolumn,yytext());
          }
        case 98: break;
        case 30: 
          { return new Symbol(simbolo.and, yyline, yycolumn,yytext());
          }
        case 99: break;
        case 31: 
          { 
          }
        case 100: break;
        case 32: 
          { return new Symbol(simbolo.tam, yyline, yycolumn,yytext());
          }
        case 101: break;
        case 33: 
          { return new Symbol(simbolo.path, yyline, yycolumn,yytext());
          }
        case 102: break;
        case 34: 
          { return new Symbol(simbolo.tipo, yyline, yycolumn,yytext());
          }
        case 103: break;
        case 35: 
          { return new Symbol(simbolo.alto, yyline, yycolumn,yytext());
          }
        case 104: break;
        case 36: 
          { return new Symbol(simbolo.e_dato, yyline, yycolumn,yytext());
          }
        case 105: break;
        case 37: 
          { return new Symbol(simbolo.e_texto, yyline, yycolumn,yytext());
          }
        case 106: break;
        case 38: 
          { return new Symbol(simbolo.ancho, yyline, yycolumn,yytext());
          }
        case 107: break;
        case 39: 
          { return new Symbol(simbolo.video, yyline, yycolumn,yytext());
          }
        case 108: break;
        case 40: 
          { return new Symbol(simbolo.color, yyline, yycolumn,yytext());
          }
        case 109: break;
        case 41: 
          { return new Symbol(simbolo.valor_falso, yyline, yycolumn,yytext());
          }
        case 110: break;
        case 42: 
          { return new Symbol(simbolo.borde, yyline, yycolumn,yytext());
          }
        case 111: break;
        case 43: 
          { return new Symbol(simbolo.e_boton, yyline, yycolumn,yytext());
          }
        case 112: break;
        case 44: 
          { return new Symbol(simbolo.valor_path2, yyline, yycolumn,yytext());
          }
        case 113: break;
        case 45: 
          { return new Symbol(simbolo.minimo, yyline, yycolumn,yytext());
          }
        case 114: break;
        case 46: 
          { return new Symbol(simbolo.maximo, yyline, yycolumn,yytext());
          }
        case 115: break;
        case 47: 
          { return new Symbol(simbolo.musica, yyline, yycolumn,yytext());
          }
        case 116: break;
        case 48: 
          { return new Symbol(simbolo.imagen, yyline, yycolumn,yytext());
          }
        case 117: break;
        case 49: 
          { return new Symbol(simbolo.accion, yyline, yycolumn,yytext());
          }
        case 118: break;
        case 50: 
          { return new Symbol(simbolo.e_enviar, yyline, yycolumn,yytext());
          }
        case 119: break;
        case 51: 
          { return new Symbol(simbolo.nombre, yyline, yycolumn,yytext());
          }
        case 120: break;
        case 52: 
          { return new Symbol(simbolo.fuente, yyline, yycolumn,yytext());
          }
        case 121: break;
        case 53: 
          { return new Symbol(simbolo.e_ventana, yyline, yycolumn,yytext());
          }
        case 122: break;
        case 54: 
          { return new Symbol(simbolo.negrita, yyline, yycolumn,yytext());
          }
        case 123: break;
        case 55: 
          { return new Symbol(simbolo.e_control, yyline, yycolumn,yytext());
          }
        case 124: break;
        case 56: 
          { return new Symbol(simbolo.cursiva, yyline, yycolumn,yytext());
          }
        case 125: break;
        case 57: 
          { return new Symbol(simbolo.e_defecto, yyline, yycolumn,yytext());
          }
        case 126: break;
        case 58: 
          { return new Symbol(simbolo.valor_path, yyline, yycolumn,yytext());
          }
        case 127: break;
        case 59: 
          { return new Symbol(simbolo.e_importar, yyline, yycolumn,yytext());
          }
        case 128: break;
        case 60: 
          { return new Symbol(simbolo.principal, yyline, yycolumn,yytext());
          }
        case 129: break;
        case 61: 
          { return new Symbol(simbolo.valor_verdadero, yyline, yycolumn,yytext());
          }
        case 130: break;
        case 62: 
          { return new Symbol(simbolo.e_multimedia, yyline, yycolumn,yytext());
          }
        case 131: break;
        case 63: 
          { return new Symbol(simbolo.e_listadatos, yyline, yycolumn,yytext());
          }
        case 132: break;
        case 64: 
          { return new Symbol(simbolo.referencia, yyline, yycolumn,yytext());
          }
        case 133: break;
        case 65: 
          { return new Symbol(simbolo.e_contenedor, yyline, yycolumn,yytext());
          }
        case 134: break;
        case 66: 
          { return new Symbol(simbolo.secundaria, yyline, yycolumn,yytext());
          }
        case 135: break;
        case 67: 
          { return new Symbol(simbolo.accionfinal, yyline, yycolumn,yytext());
          }
        case 136: break;
        case 68: 
          { return new Symbol(simbolo.accioninicial, yyline, yycolumn,yytext());
          }
        case 137: break;
        case 69: 
          { return new Symbol(simbolo.auto_reproduccion, yyline, yycolumn,yytext());
          }
        case 138: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	return null;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
