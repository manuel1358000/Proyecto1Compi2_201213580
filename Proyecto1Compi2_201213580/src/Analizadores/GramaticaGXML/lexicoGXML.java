/* The following code was generated by JFlex 1.6.0 */

package Analizadores.GramaticaGXML;
import java.util.LinkedList;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>lexicoGXML.jflex</tt>
 */
public class lexicoGXML implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  private static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\70\1\4\1\6\1\7\1\5\22\0\1\70\1\65\1\55"+
    "\1\3\1\10\1\0\1\67\1\0\1\60\1\61\1\12\1\63\1\62"+
    "\1\51\1\15\1\11\12\1\1\13\1\0\1\52\1\54\1\53\2\0"+
    "\1\26\1\45\1\36\1\37\1\71\1\41\1\50\1\47\1\30\2\2"+
    "\1\22\1\31\1\35\1\33\1\32\1\2\1\25\1\43\1\24\1\44"+
    "\1\34\1\2\1\40\1\46\1\2\1\0\1\14\1\0\1\64\2\0"+
    "\1\26\1\45\1\36\1\37\1\23\1\41\1\16\1\47\1\30\2\2"+
    "\1\21\1\20\1\35\1\33\1\32\1\2\1\25\1\43\1\24\1\44"+
    "\1\34\1\2\1\17\1\46\1\2\1\56\1\66\1\57\7\0\1\6"+
    "\252\0\2\27\115\0\1\42\u1ea8\0\1\6\1\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\5\3\1\1\7\3\1\1\2\3\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\2\1\1\3\1\0\1\4"+
    "\6\0\1\3\1\0\2\3\1\0\4\3\1\0\5\3"+
    "\1\0\1\27\1\3\1\27\13\3\1\0\2\3\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\0\2\36\4\0"+
    "\1\3\1\0\2\3\1\0\3\3\1\37\1\0\5\3"+
    "\1\0\1\3\1\0\15\3\1\0\3\3\2\0\1\36"+
    "\5\0\1\3\1\0\2\3\1\0\1\3\1\0\2\3"+
    "\2\40\1\41\1\3\1\0\2\3\1\0\1\3\1\0"+
    "\1\3\1\42\6\3\1\0\2\3\1\43\1\0\2\3"+
    "\1\0\3\3\5\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\44\1\45\1\0\1\3"+
    "\2\0\1\3\1\0\3\3\1\0\2\3\1\46\2\3"+
    "\1\0\2\3\2\47\1\3\1\0\1\3\1\50\1\51"+
    "\1\0\1\52\2\53\2\54\1\0\1\3\1\0\1\3"+
    "\2\55\2\56\2\0\1\3\1\0\3\3\1\0\1\3"+
    "\1\57\2\3\1\0\2\3\1\60\1\0\1\3\2\0"+
    "\1\3\1\0\1\3\2\0\2\3\2\0\1\3\1\0"+
    "\2\3\1\61\2\62\1\3\1\63\2\64\1\65\1\0"+
    "\1\3\1\66\1\0\1\3\1\0\1\3\2\0\2\3"+
    "\1\0\2\67\1\0\3\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\3\2\0\2\3\1\0\2\70\1\71\1\3"+
    "\1\0\1\3\2\72\2\73\2\0\2\3\1\0\1\74"+
    "\2\75\1\0\1\76\1\3\1\76\2\0\1\3\1\0"+
    "\2\77\4\0\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\72\0\u0122\0\72"+
    "\0\256\0\u015c\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8"+
    "\0\u02f2\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488"+
    "\0\u04c2\0\256\0\72\0\u04fc\0\u0536\0\u0570\0\72\0\72"+
    "\0\72\0\72\0\72\0\72\0\72\0\72\0\u05aa\0\u05e4"+
    "\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4"+
    "\0\u0122\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a"+
    "\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a"+
    "\0\u0b54\0\u0b8e\0\72\0\u0bc8\0\u0658\0\u0c02\0\u0c3c\0\u0c76"+
    "\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46"+
    "\0\u0e80\0\u0eba\0\u0ef4\0\72\0\72\0\72\0\72\0\72"+
    "\0\72\0\u0f2e\0\72\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050"+
    "\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220"+
    "\0\u0658\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6"+
    "\0\u13f0\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586"+
    "\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756"+
    "\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878\0\u0740\0\u18b2\0\u18ec"+
    "\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc"+
    "\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\72\0\u0658\0\u0658\0\u1bde"+
    "\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\u0658"+
    "\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44"+
    "\0\u1f7e\0\u0658\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u20da"+
    "\0\u2114\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u22aa"+
    "\0\u22e4\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440\0\u0658"+
    "\0\u0658\0\u247a\0\u24b4\0\u24ee\0\u2528\0\u2562\0\u259c\0\u25d6"+
    "\0\u2610\0\u264a\0\u2684\0\u26be\0\u26f8\0\u0658\0\u2732\0\u276c"+
    "\0\u27a6\0\u27e0\0\u281a\0\72\0\u0658\0\u2854\0\u288e\0\u28c8"+
    "\0\u0658\0\u0658\0\u2902\0\72\0\72\0\u0658\0\72\0\u0658"+
    "\0\u293c\0\u2976\0\u29b0\0\u29ea\0\72\0\u0658\0\u2a24\0\u2a5e"+
    "\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e"+
    "\0\u2c68\0\u0658\0\u2ca2\0\u2cdc\0\u2d16\0\u2d50\0\u2d8a\0\u0658"+
    "\0\u2dc4\0\u2dfe\0\u2e38\0\u2e72\0\u2eac\0\u2ee6\0\u2f20\0\u2f5a"+
    "\0\u2f94\0\u2fce\0\u3008\0\u3042\0\u307c\0\u30b6\0\u30f0\0\u312a"+
    "\0\u3164\0\u0658\0\72\0\u0658\0\u319e\0\u0658\0\72\0\u0658"+
    "\0\u0658\0\u31d8\0\u3212\0\72\0\u324c\0\u3286\0\u32c0\0\u32fa"+
    "\0\u3334\0\u336e\0\u33a8\0\u33e2\0\u341c\0\72\0\u0658\0\u3456"+
    "\0\u3490\0\u34ca\0\u3504\0\u353e\0\u3578\0\u35b2\0\u35ec\0\u3626"+
    "\0\u3660\0\u369a\0\u36d4\0\u370e\0\u3748\0\u3782\0\72\0\u0658"+
    "\0\u0658\0\u37bc\0\u37f6\0\u3830\0\72\0\u0658\0\72\0\u0658"+
    "\0\u386a\0\u38a4\0\u38de\0\u3918\0\u3952\0\u0658\0\72\0\u0658"+
    "\0\u398c\0\72\0\u39c6\0\u0658\0\u3a00\0\u3a3a\0\u3a74\0\u3aae"+
    "\0\72\0\u0658\0\u3ae8\0\u3b22\0\u3b5c\0\u3b96\0\72";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\6\1\0\1\6\1\2"+
    "\1\7\1\10\3\2\1\4\1\11\1\12\2\13\1\14"+
    "\1\15\1\4\1\16\1\17\1\20\1\12\1\21\1\4"+
    "\1\22\1\23\1\24\1\25\1\11\1\26\1\27\1\30"+
    "\1\4\1\31\1\32\2\4\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\6\1\14\73\0\1\3\71\0"+
    "\2\52\10\0\1\53\2\0\11\52\1\0\12\52\1\0"+
    "\6\52\20\0\1\52\1\0\1\54\1\0\1\55\4\0"+
    "\1\56\11\0\1\57\51\0\1\60\11\0\1\61\1\62"+
    "\11\60\1\0\12\60\1\0\6\60\20\0\1\60\1\0"+
    "\2\52\10\0\1\53\2\0\10\52\1\63\1\64\1\65"+
    "\11\52\1\0\1\52\1\66\4\52\20\0\1\52\1\0"+
    "\2\52\10\0\1\53\2\0\11\52\1\67\1\70\11\52"+
    "\1\0\6\52\20\0\1\52\1\0\2\52\10\0\1\53"+
    "\2\0\11\52\1\0\5\52\1\71\4\52\1\0\6\52"+
    "\20\0\1\52\1\0\2\52\10\0\1\53\2\0\5\52"+
    "\1\72\2\52\1\73\1\74\1\75\11\52\1\0\6\52"+
    "\20\0\1\72\1\0\2\52\10\0\1\53\2\0\3\52"+
    "\2\76\4\52\1\0\5\52\1\77\1\100\3\52\1\0"+
    "\1\52\1\101\4\52\20\0\1\52\20\0\1\102\10\0"+
    "\1\102\5\0\1\103\33\0\2\52\10\0\1\53\2\0"+
    "\2\52\1\104\6\52\1\0\1\52\1\104\5\52\1\105"+
    "\2\52\1\0\6\52\20\0\1\52\1\0\2\52\10\0"+
    "\1\53\2\0\7\52\1\106\1\107\1\0\12\52\1\0"+
    "\6\52\20\0\1\52\1\0\2\52\10\0\1\53\2\0"+
    "\5\52\1\110\3\52\1\0\12\52\1\0\6\52\20\0"+
    "\1\110\1\0\2\52\10\0\1\53\2\0\5\52\1\111"+
    "\3\52\1\0\3\52\1\112\6\52\1\0\6\52\20\0"+
    "\1\111\1\0\2\52\10\0\1\53\2\0\11\52\1\0"+
    "\3\52\1\113\6\52\1\0\1\52\1\114\4\52\20\0"+
    "\1\52\1\0\2\52\10\0\1\53\2\0\5\52\1\115"+
    "\2\52\1\116\1\0\12\52\1\0\6\52\20\0\1\115"+
    "\1\0\2\52\10\0\1\53\2\0\10\52\1\117\1\0"+
    "\12\52\1\0\1\52\1\120\4\52\20\0\1\52\23\0"+
    "\1\121\45\0\1\121\1\0\2\52\10\0\1\53\2\0"+
    "\5\52\1\122\3\52\1\0\12\52\1\0\6\52\20\0"+
    "\1\122\1\0\2\52\10\0\1\53\2\0\11\52\1\0"+
    "\3\52\1\123\6\52\1\0\6\52\20\0\1\52\54\0"+
    "\1\124\71\0\1\125\71\0\1\126\71\0\1\127\103\0"+
    "\1\130\72\0\1\131\3\0\2\52\13\0\11\52\1\0"+
    "\12\52\1\0\6\52\20\0\1\52\14\0\1\132\56\0"+
    "\1\54\20\0\1\57\47\0\4\55\1\133\1\134\2\0"+
    "\62\55\10\56\1\135\1\56\1\136\57\56\71\0\1\137"+
    "\1\0\2\60\11\0\1\61\1\62\11\60\1\0\12\60"+
    "\1\0\6\60\20\0\1\60\16\0\1\140\54\0\2\52"+
    "\13\0\1\52\1\141\7\52\1\0\10\52\1\141\1\52"+
    "\1\0\6\52\20\0\1\52\35\0\1\142\35\0\2\52"+
    "\13\0\11\52\1\0\5\52\1\143\4\52\1\0\6\52"+
    "\20\0\1\52\1\0\2\52\13\0\3\52\2\144\4\52"+
    "\1\0\12\52\1\0\6\52\20\0\1\52\42\0\2\145"+
    "\27\0\2\52\13\0\11\52\1\0\12\52\1\145\1\146"+
    "\5\52\20\0\1\52\1\0\2\52\13\0\11\52\1\0"+
    "\4\52\1\147\5\52\1\0\6\52\20\0\1\52\1\0"+
    "\2\52\13\0\1\52\1\150\7\52\1\0\10\52\1\150"+
    "\1\52\1\0\6\52\20\0\1\52\1\0\2\52\13\0"+
    "\2\52\1\151\6\52\1\0\1\52\1\151\10\52\1\0"+
    "\6\52\20\0\1\52\32\0\1\152\40\0\2\52\13\0"+
    "\11\52\1\0\2\52\1\153\7\52\1\0\6\52\20\0"+
    "\1\52\1\0\2\52\13\0\6\52\1\154\2\52\1\0"+
    "\12\52\1\0\6\52\20\0\1\52\1\0\2\52\13\0"+
    "\11\52\1\0\6\52\1\155\3\52\1\0\6\52\20\0"+
    "\1\52\1\0\2\52\13\0\11\52\1\0\6\52\1\156"+
    "\3\52\1\0\6\52\20\0\1\52\1\0\2\52\13\0"+
    "\6\52\1\157\2\52\1\0\12\52\1\0\6\52\20\0"+
    "\1\52\32\0\1\160\40\0\2\52\13\0\11\52\1\0"+
    "\2\52\1\161\7\52\1\0\6\52\20\0\1\52\1\0"+
    "\2\52\13\0\11\52\1\162\1\163\11\52\1\0\6\52"+
    "\20\0\1\52\1\0\2\52\13\0\6\52\1\164\2\52"+
    "\1\0\12\52\1\0\6\52\20\0\1\52\1\0\2\52"+
    "\13\0\7\52\1\165\1\52\1\0\5\52\1\166\4\52"+
    "\1\0\6\52\20\0\1\52\1\0\2\52\13\0\1\167"+
    "\10\52\1\0\12\52\1\0\5\52\1\167\20\0\1\52"+
    "\1\0\2\52\13\0\2\52\1\170\6\52\1\0\1\52"+
    "\1\170\10\52\1\0\6\52\20\0\1\52\1\0\2\52"+
    "\13\0\3\52\2\171\4\52\1\0\5\52\1\172\4\52"+
    "\1\0\6\52\20\0\1\52\1\0\2\52\13\0\7\52"+
    "\1\173\1\52\1\0\12\52\1\0\6\52\20\0\1\52"+
    "\1\0\2\52\13\0\11\52\1\0\11\52\1\174\1\0"+
    "\6\52\20\0\1\52\1\0\2\52\13\0\6\52\1\175"+
    "\2\52\1\0\12\52\1\0\6\52\20\0\1\52\1\0"+
    "\2\52\13\0\3\52\2\176\4\52\1\0\12\52\1\0"+
    "\6\52\20\0\1\52\1\0\2\52\13\0\5\52\1\177"+
    "\3\52\1\0\12\52\1\0\6\52\20\0\1\177\36\0"+
    "\1\200\34\0\2\52\13\0\11\52\1\0\6\52\1\201"+
    "\3\52\1\0\6\52\20\0\1\52\1\0\2\52\13\0"+
    "\6\52\1\202\1\203\1\52\1\0\12\52\1\0\6\52"+
    "\20\0\1\52\2\0\1\204\11\0\1\132\1\205\11\204"+
    "\1\0\12\204\1\0\6\204\20\0\1\204\4\0\1\133"+
    "\65\0\3\56\1\206\4\56\1\135\1\56\1\136\57\56"+
    "\10\207\1\210\1\0\60\207\24\0\1\211\64\0\1\212"+
    "\53\0\2\52\13\0\11\52\1\213\1\214\11\52\1\0"+
    "\6\52\20\0\1\52\27\0\2\215\42\0\2\52\13\0"+
    "\11\52\1\215\1\216\11\52\1\0\6\52\20\0\1\52"+
    "\1\0\2\52\13\0\6\52\1\217\2\52\1\0\12\52"+
    "\1\0\6\52\20\0\1\52\24\0\1\220\46\0\2\52"+
    "\13\0\6\52\1\221\2\52\1\0\12\52\1\0\6\52"+
    "\20\0\1\52\1\0\2\52\13\0\11\52\1\222\1\223"+
    "\11\52\1\0\6\52\20\0\1\52\1\0\2\52\13\0"+
    "\6\52\1\224\2\52\1\0\12\52\1\0\6\52\20\0"+
    "\1\52\33\0\1\225\37\0\2\52\13\0\11\52\1\0"+
    "\3\52\1\226\6\52\1\0\6\52\20\0\1\52\1\0"+
    "\2\52\13\0\11\52\1\0\3\52\1\227\6\52\1\0"+
    "\6\52\20\0\1\52\1\0\2\52\13\0\11\52\1\0"+
    "\12\52\1\0\4\52\1\230\1\52\20\0\1\52\1\0"+
    "\2\52\13\0\11\52\1\231\1\232\11\52\1\0\6\52"+
    "\20\0\1\52\1\0\2\52\13\0\11\52\1\0\3\52"+
    "\1\233\6\52\1\0\6\52\20\0\1\52\33\0\1\234"+
    "\37\0\2\52\13\0\11\52\1\0\3\52\1\235\6\52"+
    "\1\0\6\52\20\0\1\52\35\0\1\236\35\0\2\52"+
    "\13\0\11\52\1\0\5\52\1\237\4\52\1\0\6\52"+
    "\20\0\1\52\1\0\2\52\13\0\11\52\1\0\12\52"+
    "\1\0\4\52\1\240\1\52\20\0\1\52\1\0\2\52"+
    "\13\0\11\52\1\0\7\52\1\241\2\52\1\0\6\52"+
    "\20\0\1\52\1\0\2\52\13\0\6\52\1\242\2\52"+
    "\1\0\12\52\1\0\6\52\20\0\1\52\1\0\2\52"+
    "\13\0\7\52\1\243\1\52\1\0\12\52\1\0\6\52"+
    "\20\0\1\52\1\0\2\52\13\0\11\52\1\0\12\52"+
    "\1\0\2\52\1\244\3\52\20\0\1\52\1\0\2\52"+
    "\13\0\11\52\1\0\3\52\1\245\6\52\1\0\6\52"+
    "\20\0\1\52\1\0\2\52\13\0\6\52\1\246\2\52"+
    "\1\0\12\52\1\0\6\52\20\0\1\52\1\0\2\52"+
    "\13\0\11\52\1\0\12\52\1\247\1\250\5\52\20\0"+
    "\1\52\1\0\2\52\13\0\5\52\1\251\3\52\1\0"+
    "\12\52\1\0\6\52\20\0\1\251\1\0\2\52\13\0"+
    "\11\52\1\0\3\52\1\252\6\52\1\0\6\52\20\0"+
    "\1\52\1\0\2\52\13\0\11\52\1\0\12\52\1\253"+
    "\1\254\5\52\20\0\1\52\1\0\2\52\13\0\11\52"+
    "\1\0\5\52\1\255\4\52\1\0\6\52\20\0\1\52"+
    "\44\0\1\256\26\0\2\52\13\0\11\52\1\0\12\52"+
    "\1\0\1\52\1\257\4\52\20\0\1\52\1\0\2\52"+
    "\13\0\11\52\1\0\3\52\1\260\6\52\1\0\6\52"+
    "\20\0\1\52\1\0\2\52\13\0\11\52\1\0\7\52"+
    "\1\261\2\52\1\0\6\52\20\0\1\52\1\0\2\204"+
    "\11\0\1\132\1\205\11\204\1\0\12\204\1\0\6\204"+
    "\20\0\1\204\16\0\1\262\53\0\10\56\1\135\1\263"+
    "\1\136\62\56\1\206\4\56\1\135\1\263\1\136\57\56"+
    "\25\0\1\264\64\0\1\265\71\0\1\266\10\0\1\266"+
    "\41\0\2\52\13\0\2\52\1\267\6\52\1\0\1\52"+
    "\1\267\10\52\1\0\6\52\20\0\1\52\20\0\1\270"+
    "\10\0\1\270\41\0\2\52\13\0\2\52\1\271\6\52"+
    "\1\0\1\52\1\271\10\52\1\0\6\52\20\0\1\52"+
    "\1\0\2\52\13\0\11\52\1\272\1\273\11\52\1\0"+
    "\6\52\20\0\1\52\26\0\1\274\44\0\2\52\13\0"+
    "\10\52\1\275\1\0\12\52\1\0\6\52\20\0\1\52"+
    "\26\0\1\276\44\0\2\52\13\0\10\52\1\277\1\0"+
    "\12\52\1\0\6\52\20\0\1\52\1\0\2\52\13\0"+
    "\11\52\1\0\3\52\1\300\6\52\1\0\6\52\20\0"+
    "\1\52\1\0\2\52\13\0\11\52\1\0\3\52\1\301"+
    "\6\52\1\0\6\52\20\0\1\52\33\0\1\302\37\0"+
    "\2\52\13\0\11\52\1\0\3\52\1\303\6\52\1\0"+
    "\6\52\20\0\1\52\1\0\2\52\13\0\11\52\1\0"+
    "\12\52\1\0\6\52\1\304\17\0\1\52\25\0\1\305"+
    "\45\0\2\52\13\0\7\52\1\306\1\52\1\0\12\52"+
    "\1\0\6\52\20\0\1\52\36\0\1\307\34\0\2\52"+
    "\13\0\11\52\1\0\6\52\1\310\3\52\1\0\6\52"+
    "\20\0\1\52\1\0\2\52\13\0\10\52\1\311\1\0"+
    "\12\52\1\0\6\52\20\0\1\52\1\0\2\52\13\0"+
    "\10\52\1\312\1\0\12\52\1\0\6\52\20\0\1\52"+
    "\1\0\2\52\13\0\11\52\1\313\1\314\11\52\1\0"+
    "\6\52\20\0\1\52\1\0\2\52\13\0\7\52\1\315"+
    "\1\52\1\0\12\52\1\0\6\52\20\0\1\52\1\0"+
    "\2\52\13\0\7\52\1\316\1\52\1\0\12\52\1\0"+
    "\6\52\20\0\1\52\1\0\2\52\13\0\5\52\1\317"+
    "\1\52\1\320\1\52\1\0\12\52\1\0\6\52\20\0"+
    "\1\317\27\0\2\321\42\0\2\52\13\0\11\52\1\321"+
    "\1\322\11\52\1\0\6\52\20\0\1\52\1\0\2\52"+
    "\13\0\11\52\1\0\6\52\1\323\3\52\1\0\6\52"+
    "\20\0\1\52\33\0\1\324\37\0\2\52\13\0\11\52"+
    "\1\0\3\52\1\325\6\52\1\0\6\52\20\0\1\52"+
    "\1\0\2\52\13\0\6\52\1\326\2\52\1\0\12\52"+
    "\1\0\6\52\20\0\1\52\35\0\1\327\35\0\2\52"+
    "\13\0\11\52\1\0\5\52\1\330\4\52\1\0\6\52"+
    "\20\0\1\52\1\0\2\52\13\0\11\52\1\0\5\52"+
    "\1\331\4\52\1\0\6\52\20\0\1\52\1\0\2\52"+
    "\13\0\5\52\1\332\3\52\1\0\12\52\1\0\6\52"+
    "\20\0\1\332\17\0\1\333\63\0\1\207\106\0\1\54"+
    "\64\0\1\334\103\0\1\335\37\0\2\52\13\0\11\52"+
    "\1\0\3\52\1\336\6\52\1\0\6\52\20\0\1\52"+
    "\33\0\1\337\37\0\2\52\13\0\11\52\1\0\3\52"+
    "\1\340\6\52\1\0\6\52\20\0\1\52\20\0\1\341"+
    "\10\0\1\341\41\0\2\52\13\0\2\52\1\342\6\52"+
    "\1\0\1\52\1\342\10\52\1\0\6\52\20\0\1\52"+
    "\37\0\1\343\33\0\2\52\13\0\11\52\1\0\7\52"+
    "\1\344\2\52\1\0\6\52\20\0\1\52\25\0\1\345"+
    "\45\0\2\52\13\0\7\52\1\346\1\52\1\0\12\52"+
    "\1\0\6\52\20\0\1\52\35\0\1\347\35\0\2\52"+
    "\13\0\11\52\1\0\5\52\1\350\4\52\1\0\6\52"+
    "\20\0\1\52\25\0\1\351\70\0\1\352\46\0\2\52"+
    "\13\0\6\52\1\353\2\52\1\0\12\52\1\0\6\52"+
    "\20\0\1\52\27\0\2\354\42\0\2\52\13\0\11\52"+
    "\1\354\1\355\11\52\1\0\6\52\20\0\1\52\1\0"+
    "\2\52\13\0\11\52\1\0\7\52\1\356\2\52\1\0"+
    "\6\52\20\0\1\52\1\0\2\52\13\0\11\52\1\0"+
    "\5\52\1\357\4\52\1\0\6\52\20\0\1\52\24\0"+
    "\1\360\46\0\2\52\13\0\6\52\1\361\2\52\1\0"+
    "\12\52\1\0\6\52\20\0\1\52\1\0\2\52\13\0"+
    "\5\52\1\362\3\52\1\0\12\52\1\0\6\52\20\0"+
    "\1\362\1\0\2\52\13\0\11\52\1\0\5\52\1\363"+
    "\4\52\1\0\6\52\20\0\1\52\1\0\2\52\13\0"+
    "\11\52\1\0\3\52\1\364\6\52\1\0\6\52\20\0"+
    "\1\52\34\0\1\365\36\0\2\52\13\0\11\52\1\0"+
    "\4\52\1\366\5\52\1\0\6\52\20\0\1\52\1\0"+
    "\2\52\13\0\6\52\1\367\2\52\1\0\12\52\1\0"+
    "\6\52\20\0\1\52\1\0\2\52\13\0\5\52\1\370"+
    "\3\52\1\0\12\52\1\0\6\52\20\0\1\370\37\0"+
    "\1\371\33\0\2\52\13\0\11\52\1\0\7\52\1\372"+
    "\2\52\1\0\6\52\20\0\1\52\20\0\1\373\74\0"+
    "\1\374\45\0\1\374\1\0\2\52\13\0\5\52\1\375"+
    "\3\52\1\0\12\52\1\0\6\52\20\0\1\375\26\0"+
    "\1\376\44\0\2\52\13\0\10\52\1\377\1\0\12\52"+
    "\1\0\6\52\20\0\1\52\27\0\2\u0100\10\0\1\u0101"+
    "\31\0\2\52\13\0\11\52\1\u0100\1\u0102\10\52\1\u0103"+
    "\1\0\6\52\20\0\1\52\23\0\1\u0104\45\0\1\u0104"+
    "\26\0\1\u0105\44\0\2\52\13\0\10\52\1\u0106\1\0"+
    "\12\52\1\0\6\52\20\0\1\52\32\0\1\u0107\40\0"+
    "\2\52\13\0\11\52\1\0\2\52\1\u0108\7\52\1\0"+
    "\6\52\20\0\1\52\1\0\2\52\13\0\5\52\1\u0109"+
    "\3\52\1\0\12\52\1\0\6\52\20\0\1\u0109\1\0"+
    "\2\52\13\0\10\52\1\u010a\1\0\12\52\1\0\6\52"+
    "\20\0\1\52\26\0\1\u010b\44\0\2\52\13\0\10\52"+
    "\1\u010c\1\0\12\52\1\0\6\52\20\0\1\52\1\0"+
    "\2\52\13\0\5\52\1\u010d\3\52\1\0\12\52\1\0"+
    "\6\52\20\0\1\u010d\1\0\2\52\13\0\3\52\2\u010e"+
    "\4\52\1\0\12\52\1\0\6\52\20\0\1\52\26\0"+
    "\1\u010f\44\0\2\52\13\0\10\52\1\u0110\1\0\12\52"+
    "\1\0\6\52\20\0\1\52\1\0\2\52\13\0\11\52"+
    "\1\0\3\52\1\u0111\6\52\1\0\6\52\20\0\1\52"+
    "\26\0\1\u0112\44\0\2\52\13\0\10\52\1\u0113\1\0"+
    "\12\52\1\0\6\52\20\0\1\52\21\0\1\u0114\107\0"+
    "\1\u0115\33\0\2\52\13\0\11\52\1\0\7\52\1\u0116"+
    "\2\52\1\0\6\52\20\0\1\52\24\0\1\u0117\46\0"+
    "\2\52\13\0\6\52\1\u0118\2\52\1\0\12\52\1\0"+
    "\6\52\20\0\1\52\35\0\1\u0119\63\0\2\u011a\42\0"+
    "\2\52\13\0\11\52\1\0\5\52\1\u011b\4\52\1\0"+
    "\6\52\20\0\1\52\1\0\2\52\13\0\11\52\1\u011a"+
    "\1\u011c\11\52\1\0\6\52\20\0\1\52\32\0\1\u011d"+
    "\64\0\1\u011e\45\0\2\52\13\0\7\52\1\u011f\1\52"+
    "\1\0\12\52\1\0\6\52\20\0\1\52\26\0\1\u0120"+
    "\44\0\2\52\13\0\10\52\1\u0121\1\0\12\52\1\0"+
    "\6\52\20\0\1\52\1\0\2\52\13\0\7\52\1\u0122"+
    "\1\52\1\0\12\52\1\0\6\52\20\0\1\52\1\0"+
    "\2\52\13\0\11\52\1\0\7\52\1\u0123\2\52\1\0"+
    "\6\52\20\0\1\52\25\0\1\u0124\45\0\2\52\13\0"+
    "\7\52\1\u0125\1\52\1\0\12\52\1\0\6\52\20\0"+
    "\1\52\27\0\2\u0126\42\0\2\52\13\0\11\52\1\u0126"+
    "\1\u0127\11\52\1\0\6\52\20\0\1\52\33\0\1\u0128"+
    "\37\0\2\52\13\0\11\52\1\0\3\52\1\u0129\6\52"+
    "\1\0\6\52\20\0\1\52\27\0\2\u012a\76\0\1\u012b"+
    "\35\0\2\52\13\0\11\52\1\u012a\1\u012c\11\52\1\0"+
    "\6\52\20\0\1\52\1\0\2\52\13\0\11\52\1\0"+
    "\5\52\1\u012d\4\52\1\0\6\52\20\0\1\52\25\0"+
    "\1\u012e\65\0\2\u012f\50\0\2\52\13\0\3\52\2\u0130"+
    "\4\52\1\0\12\52\1\0\6\52\20\0\1\52\1\0"+
    "\2\52\13\0\11\52\1\0\3\52\1\u0131\6\52\1\0"+
    "\6\52\20\0\1\52\1\0\2\52\13\0\11\52\1\0"+
    "\3\52\1\u0132\6\52\1\0\6\52\20\0\1\52\27\0"+
    "\2\u0133\42\0\2\52\13\0\11\52\1\u0133\1\u0134\11\52"+
    "\1\0\6\52\20\0\1\52\26\0\1\u0135\44\0\2\52"+
    "\13\0\10\52\1\u0136\1\0\12\52\1\0\6\52\20\0"+
    "\1\52\42\0\2\u0137\27\0\2\52\13\0\11\52\1\0"+
    "\12\52\1\u0137\1\u0138\5\52\20\0\1\52\36\0\1\u0139"+
    "\61\0\1\u013a\44\0\2\52\13\0\11\52\1\0\6\52"+
    "\1\u013b\3\52\1\0\6\52\20\0\1\52\1\0\2\52"+
    "\13\0\10\52\1\u013c\1\0\12\52\1\0\6\52\20\0"+
    "\1\52\33\0\1\u013d\37\0\2\52\13\0\7\52\1\u013e"+
    "\1\52\1\0\12\52\1\0\6\52\20\0\1\52\26\0"+
    "\1\u013f\44\0\2\52\13\0\10\52\1\u0140\1\0\12\52"+
    "\1\0\6\52\20\0\1\52\27\0\2\u0141\62\0\2\u0142"+
    "\50\0\2\52\13\0\11\52\1\u0141\1\u0143\11\52\1\0"+
    "\6\52\20\0\1\52\1\0\2\52\13\0\3\52\2\u0144"+
    "\4\52\1\0\12\52\1\0\6\52\20\0\1\52\37\0"+
    "\1\u0145\60\0\1\u0146\44\0\2\52\13\0\10\52\1\u0147"+
    "\1\0\12\52\1\0\6\52\20\0\1\52\44\0\1\u0148"+
    "\46\0\2\u0149\50\0\2\52\13\0\3\52\2\u014a\4\52"+
    "\1\0\12\52\1\0\6\52\20\0\1\52\36\0\1\u014b"+
    "\71\0\1\u014c\62\0\2\u014d\74\0\1\u014e\73\0\1\u014f"+
    "\34\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15312];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\1\1\1\11\22\1\1\11"+
    "\3\1\10\11\4\1\1\0\1\1\6\0\1\1\1\0"+
    "\2\1\1\0\4\1\1\0\5\1\1\0\1\11\15\1"+
    "\1\0\2\1\6\11\1\0\1\11\1\1\4\0\1\1"+
    "\1\0\2\1\1\0\4\1\1\0\5\1\1\0\1\1"+
    "\1\0\15\1\1\0\3\1\2\0\1\1\5\0\1\1"+
    "\1\0\2\1\1\0\1\1\1\0\2\1\1\11\3\1"+
    "\1\0\2\1\1\0\1\1\1\0\10\1\1\0\3\1"+
    "\1\0\2\1\1\0\3\1\5\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\3\1\1\0\1\1"+
    "\2\0\1\1\1\0\3\1\1\0\5\1\1\0\2\1"+
    "\1\11\2\1\1\0\3\1\1\0\2\11\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\3\1\2\0"+
    "\1\1\1\0\3\1\1\0\4\1\1\0\3\1\1\0"+
    "\1\1\2\0\1\1\1\0\1\1\2\0\2\1\2\0"+
    "\1\1\1\0\3\1\1\11\3\1\1\11\2\1\1\0"+
    "\1\1\1\11\1\0\1\1\1\0\1\1\2\0\2\1"+
    "\1\0\1\11\1\1\1\0\3\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\2\0\2\1\1\0\1\11\3\1"+
    "\1\0\1\1\1\11\1\1\1\11\1\1\2\0\2\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\11\2\1\2\0"+
    "\1\1\1\0\1\11\1\1\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexicoGXML(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 228) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  private final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.out.println("Linea: " + (yyline+1) + " Columna: " + (yycolumn+1) + " - Error Lexico en: " + yytext());
          }
        case 65: break;
        case 2: 
          { return new Symbol(simbolo.valor_numero_completo, yyline, yycolumn,yytext());
          }
        case 66: break;
        case 3: 
          { return new Symbol(simbolo.valor_id, yyline, yycolumn,yytext());
          }
        case 67: break;
        case 4: 
          { return new Symbol(simbolo.valor_hexa, yyline, yycolumn,yytext());
          }
        case 68: break;
        case 5: 
          { /* ignore white space. */
          }
        case 69: break;
        case 6: 
          { return new Symbol(simbolo.div, yyline, yycolumn,yytext());
          }
        case 70: break;
        case 7: 
          { return new Symbol(simbolo.por, yyline, yycolumn,yytext());
          }
        case 71: break;
        case 8: 
          { return new Symbol(simbolo.x, yyline, yycolumn,yytext());
          }
        case 72: break;
        case 9: 
          { return new Symbol(simbolo.y, yyline, yycolumn,yytext());
          }
        case 73: break;
        case 10: 
          { return new Symbol(simbolo.menos, yyline, yycolumn,yytext());
          }
        case 74: break;
        case 11: 
          { return new Symbol(simbolo.abre, yyline, yycolumn,yytext());
          }
        case 75: break;
        case 12: 
          { return new Symbol(simbolo.cierra, yyline, yycolumn,yytext());
          }
        case 76: break;
        case 13: 
          { return new Symbol(simbolo.igual, yyline, yycolumn,yytext());
          }
        case 77: break;
        case 14: 
          { return new Symbol(simbolo.comilladoble, yyline, yycolumn,yytext());
          }
        case 78: break;
        case 15: 
          { return new Symbol(simbolo.llavea, yyline, yycolumn,yytext());
          }
        case 79: break;
        case 16: 
          { return new Symbol(simbolo.llavec, yyline, yycolumn,yytext());
          }
        case 80: break;
        case 17: 
          { return new Symbol(simbolo.parena, yyline, yycolumn,yytext());
          }
        case 81: break;
        case 18: 
          { return new Symbol(simbolo.parenc, yyline, yycolumn,yytext());
          }
        case 82: break;
        case 19: 
          { return new Symbol(simbolo.coma, yyline, yycolumn,yytext());
          }
        case 83: break;
        case 20: 
          { return new Symbol(simbolo.mas, yyline, yycolumn,yytext());
          }
        case 84: break;
        case 21: 
          { return new Symbol(simbolo.potencia, yyline, yycolumn,yytext());
          }
        case 85: break;
        case 22: 
          { return new Symbol(simbolo.not, yyline, yycolumn,yytext());
          }
        case 86: break;
        case 23: 
          { return new Symbol(simbolo.id, yyline, yycolumn,yytext());
          }
        case 87: break;
        case 24: 
          { return new Symbol(simbolo.menorigualq, yyline, yycolumn,yytext());
          }
        case 88: break;
        case 25: 
          { return new Symbol(simbolo.mayorigualq, yyline, yycolumn,yytext());
          }
        case 89: break;
        case 26: 
          { return new Symbol(simbolo.igualigual, yyline, yycolumn,yytext());
          }
        case 90: break;
        case 27: 
          { return new Symbol(simbolo.diferente, yyline, yycolumn,yytext());
          }
        case 91: break;
        case 28: 
          { return new Symbol(simbolo.or, yyline, yycolumn,yytext());
          }
        case 92: break;
        case 29: 
          { return new Symbol(simbolo.and, yyline, yycolumn,yytext());
          }
        case 93: break;
        case 30: 
          { 
          }
        case 94: break;
        case 31: 
          { return new Symbol(simbolo.tam, yyline, yycolumn,yytext());
          }
        case 95: break;
        case 32: 
          { return new Symbol(simbolo.tipo, yyline, yycolumn,yytext());
          }
        case 96: break;
        case 33: 
          { return new Symbol(simbolo.alto, yyline, yycolumn,yytext());
          }
        case 97: break;
        case 34: 
          { return new Symbol(simbolo.path, yyline, yycolumn,yytext());
          }
        case 98: break;
        case 35: 
          { return new Symbol(simbolo.e_dato, yyline, yycolumn,yytext());
          }
        case 99: break;
        case 36: 
          { return new Symbol(simbolo.e_texto, yyline, yycolumn,yytext());
          }
        case 100: break;
        case 37: 
          { return new Symbol(simbolo.ancho, yyline, yycolumn,yytext());
          }
        case 101: break;
        case 38: 
          { return new Symbol(simbolo.color, yyline, yycolumn,yytext());
          }
        case 102: break;
        case 39: 
          { return new Symbol(simbolo.valor_falso, yyline, yycolumn,yytext());
          }
        case 103: break;
        case 40: 
          { return new Symbol(simbolo.e_boton, yyline, yycolumn,yytext());
          }
        case 104: break;
        case 41: 
          { return new Symbol(simbolo.borde, yyline, yycolumn,yytext());
          }
        case 105: break;
        case 42: 
          { return new Symbol(simbolo.valor_path2, yyline, yycolumn,yytext());
          }
        case 106: break;
        case 43: 
          { return new Symbol(simbolo.maximo, yyline, yycolumn,yytext());
          }
        case 107: break;
        case 44: 
          { return new Symbol(simbolo.minimo, yyline, yycolumn,yytext());
          }
        case 108: break;
        case 45: 
          { return new Symbol(simbolo.e_enviar, yyline, yycolumn,yytext());
          }
        case 109: break;
        case 46: 
          { return new Symbol(simbolo.accion, yyline, yycolumn,yytext());
          }
        case 110: break;
        case 47: 
          { return new Symbol(simbolo.nombre, yyline, yycolumn,yytext());
          }
        case 111: break;
        case 48: 
          { return new Symbol(simbolo.fuente, yyline, yycolumn,yytext());
          }
        case 112: break;
        case 49: 
          { return new Symbol(simbolo.e_ventana, yyline, yycolumn,yytext());
          }
        case 113: break;
        case 50: 
          { return new Symbol(simbolo.negrita, yyline, yycolumn,yytext());
          }
        case 114: break;
        case 51: 
          { return new Symbol(simbolo.e_control, yyline, yycolumn,yytext());
          }
        case 115: break;
        case 52: 
          { return new Symbol(simbolo.cursiva, yyline, yycolumn,yytext());
          }
        case 116: break;
        case 53: 
          { return new Symbol(simbolo.e_defecto, yyline, yycolumn,yytext());
          }
        case 117: break;
        case 54: 
          { return new Symbol(simbolo.valor_path, yyline, yycolumn,yytext());
          }
        case 118: break;
        case 55: 
          { return new Symbol(simbolo.e_importar, yyline, yycolumn,yytext());
          }
        case 119: break;
        case 56: 
          { return new Symbol(simbolo.principal, yyline, yycolumn,yytext());
          }
        case 120: break;
        case 57: 
          { return new Symbol(simbolo.valor_verdadero, yyline, yycolumn,yytext());
          }
        case 121: break;
        case 58: 
          { return new Symbol(simbolo.e_multimedia, yyline, yycolumn,yytext());
          }
        case 122: break;
        case 59: 
          { return new Symbol(simbolo.e_listadatos, yyline, yycolumn,yytext());
          }
        case 123: break;
        case 60: 
          { return new Symbol(simbolo.e_contenedor, yyline, yycolumn,yytext());
          }
        case 124: break;
        case 61: 
          { return new Symbol(simbolo.secundaria, yyline, yycolumn,yytext());
          }
        case 125: break;
        case 62: 
          { return new Symbol(simbolo.accionfinal, yyline, yycolumn,yytext());
          }
        case 126: break;
        case 63: 
          { return new Symbol(simbolo.accioninicial, yyline, yycolumn,yytext());
          }
        case 127: break;
        case 64: 
          { return new Symbol(simbolo.auto_reproduccion, yyline, yycolumn,yytext());
          }
        case 128: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	return null;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
