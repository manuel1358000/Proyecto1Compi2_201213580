/* The following code was generated by JFlex 1.6.0 */

package Analizadores.GramaticaGXML;
import java.util.LinkedList;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>lexicoGXML.jflex</tt>
 */
public class lexicoGXML implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  private static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\57\1\4\1\6\1\7\1\5\22\0\1\57\1\0\1\56"+
    "\1\3\1\11\5\0\1\12\2\0\1\52\1\16\1\10\12\1\1\14"+
    "\1\0\1\53\1\55\1\54\2\0\1\32\1\46\1\13\1\37\1\34"+
    "\1\42\1\51\1\50\1\24\2\2\1\41\1\25\1\35\1\27\1\26"+
    "\1\2\1\30\1\44\1\31\1\45\1\33\1\2\1\40\1\47\1\2"+
    "\1\0\1\15\4\0\1\32\1\46\1\36\1\37\1\34\1\42\1\17"+
    "\1\50\1\24\2\2\1\22\1\21\1\35\1\27\1\26\1\2\1\30"+
    "\1\44\1\31\1\45\1\33\1\2\1\20\1\47\1\2\12\0\1\6"+
    "\252\0\2\23\115\0\1\43\u1ea8\0\1\6\1\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\3"+
    "\1\6\2\3\1\1\13\3\1\7\1\10\1\11\1\12"+
    "\1\13\4\0\2\3\1\0\3\3\1\0\1\3\1\0"+
    "\1\14\1\3\1\14\1\3\1\0\16\3\3\0\1\15"+
    "\1\0\3\3\1\0\3\3\1\0\1\3\1\0\2\3"+
    "\1\0\1\3\1\16\15\3\1\17\4\0\2\3\1\0"+
    "\1\3\1\0\1\3\1\0\2\3\1\0\1\3\1\0"+
    "\1\3\1\20\2\21\1\3\1\22\3\3\1\0\3\3"+
    "\1\23\4\3\2\0\1\24\2\3\1\0\1\3\1\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\25\1\26\1\0\1\3\1\0\2\3\1\0"+
    "\3\3\1\27\1\30\1\0\2\3\1\0\1\3\2\31"+
    "\2\32\1\0\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\1\3\2\33\1\34\1\0\2\3\1\35\1\0\1\36"+
    "\1\3\2\37\1\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\0\1\40\2\41\1\42\1\43\1\3\1\0\1\3"+
    "\1\0\1\3\2\44\1\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\0\1\45\2\46\2\47\7\0\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\60\0\360\0\u0120"+
    "\0\220\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270"+
    "\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\220"+
    "\0\60\0\60\0\60\0\60\0\u03f0\0\u0420\0\u0450\0\u0480"+
    "\0\u04b0\0\u04e0\0\u0510\0\u0540\0\u0570\0\u05a0\0\u05d0\0\u0600"+
    "\0\u0630\0\60\0\u0660\0\220\0\u0690\0\u06c0\0\u06f0\0\u0720"+
    "\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0"+
    "\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0\0\60"+
    "\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70"+
    "\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\u0cc0\0\220"+
    "\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40"+
    "\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0420\0\u0f60\0\u0f90"+
    "\0\u0fc0\0\u0ff0\0\u1020\0\u1050\0\u1080\0\u10b0\0\u10e0\0\u1110"+
    "\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200\0\u1230\0\u1260\0\220"+
    "\0\60\0\220\0\u1290\0\220\0\u12c0\0\u12f0\0\u1320\0\u1350"+
    "\0\u1380\0\u13b0\0\u13e0\0\220\0\u1410\0\u1440\0\u1470\0\u14a0"+
    "\0\u14d0\0\u1500\0\220\0\u1530\0\u1560\0\u1590\0\u15c0\0\u15f0"+
    "\0\u1620\0\u1650\0\u1680\0\u16b0\0\u16e0\0\u1710\0\u1740\0\u1770"+
    "\0\u17a0\0\220\0\220\0\u17d0\0\u1800\0\u1830\0\u1860\0\u1890"+
    "\0\u18c0\0\u18f0\0\u1920\0\u1950\0\220\0\220\0\u1980\0\u19b0"+
    "\0\u19e0\0\u1a10\0\u1a40\0\60\0\220\0\60\0\220\0\u1a70"+
    "\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30\0\u1b60\0\u1b90\0\u1bc0\0\60"+
    "\0\220\0\220\0\u1bf0\0\u1c20\0\u1c50\0\220\0\u1c80\0\220"+
    "\0\u1cb0\0\60\0\220\0\u1ce0\0\u1d10\0\u1d40\0\u1d70\0\u1da0"+
    "\0\u1dd0\0\u1e00\0\220\0\60\0\220\0\220\0\60\0\u1e30"+
    "\0\u1e60\0\u1e90\0\u1ec0\0\u1ef0\0\60\0\220\0\u1f20\0\u1f50"+
    "\0\u1f80\0\u1fb0\0\u1fe0\0\u2010\0\u2040\0\220\0\60\0\220"+
    "\0\60\0\220\0\u2070\0\u20a0\0\u20d0\0\u2100\0\u2130\0\u2160"+
    "\0\u2190\0\60";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\6\1\0\1\6\1\7"+
    "\2\2\1\10\3\2\1\4\1\11\1\12\1\13\1\14"+
    "\1\15\1\12\1\16\2\4\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\11\1\13\1\26\1\2\2\4"+
    "\1\27\1\30\2\4\1\2\1\31\1\32\1\33\1\34"+
    "\1\6\61\0\1\3\57\0\2\4\10\0\1\4\3\0"+
    "\4\4\1\0\17\4\1\0\6\4\11\0\1\35\5\0"+
    "\1\36\56\0\1\37\50\0\2\4\10\0\1\4\1\40"+
    "\2\0\4\4\1\0\3\4\1\41\13\4\1\0\1\4"+
    "\1\42\4\4\7\0\2\4\10\0\1\4\3\0\4\4"+
    "\1\43\1\44\5\4\1\45\10\4\1\0\1\4\1\46"+
    "\4\4\7\0\2\4\10\0\1\4\3\0\4\4\1\47"+
    "\1\50\16\4\1\0\6\4\27\0\1\51\3\0\1\51"+
    "\11\0\1\52\21\0\2\4\10\0\1\4\3\0\2\4"+
    "\1\53\1\4\1\0\1\4\1\53\11\4\1\54\3\4"+
    "\1\0\6\4\7\0\2\4\10\0\1\4\3\0\4\4"+
    "\1\0\6\4\1\55\10\4\1\0\6\4\7\0\2\4"+
    "\10\0\1\4\3\0\4\4\1\56\1\57\5\4\1\60"+
    "\1\4\1\61\6\4\1\0\6\4\7\0\2\4\10\0"+
    "\1\4\3\0\3\4\1\62\1\0\11\4\1\63\3\4"+
    "\1\62\1\4\1\0\1\4\1\64\4\4\7\0\2\4"+
    "\10\0\1\4\3\0\4\4\1\0\10\4\1\65\6\4"+
    "\1\0\6\4\7\0\2\4\10\0\1\4\3\0\4\4"+
    "\1\0\11\4\1\66\5\4\1\0\6\4\7\0\2\4"+
    "\10\0\1\4\3\0\4\4\1\0\3\4\1\67\4\4"+
    "\1\70\6\4\1\0\6\4\7\0\2\4\10\0\1\4"+
    "\3\0\4\4\1\0\3\4\1\41\13\4\1\0\1\4"+
    "\1\42\4\4\7\0\2\4\10\0\1\4\3\0\4\4"+
    "\1\0\6\4\1\71\1\4\1\72\6\4\1\0\6\4"+
    "\7\0\2\4\10\0\1\4\3\0\4\4\1\0\17\4"+
    "\1\0\1\4\1\73\4\4\7\0\2\4\10\0\1\4"+
    "\3\0\4\4\1\0\3\4\1\74\13\4\1\0\6\4"+
    "\6\0\4\35\1\0\1\75\2\0\50\35\11\36\1\76"+
    "\1\77\45\36\4\37\2\100\2\0\50\37\15\0\1\101"+
    "\43\0\2\4\10\0\1\4\3\0\3\4\1\102\1\0"+
    "\11\4\1\103\3\4\1\102\1\4\1\0\6\4\7\0"+
    "\2\4\10\0\1\4\3\0\4\4\1\0\4\4\1\104"+
    "\12\4\1\0\6\4\43\0\1\105\23\0\2\4\10\0"+
    "\1\4\3\0\4\4\1\0\11\4\1\106\5\4\1\0"+
    "\6\4\7\0\2\4\10\0\1\4\3\0\1\4\1\107"+
    "\2\4\1\0\14\4\1\107\2\4\1\0\6\4\7\0"+
    "\2\4\10\0\1\4\3\0\3\4\1\110\1\0\15\4"+
    "\1\110\1\4\1\0\6\4\51\0\2\111\14\0\2\4"+
    "\10\0\1\4\3\0\4\4\1\0\17\4\1\111\1\112"+
    "\5\4\34\0\1\113\32\0\2\4\10\0\1\4\3\0"+
    "\4\4\1\0\2\4\1\114\14\4\1\0\6\4\7\0"+
    "\2\4\10\0\1\4\3\0\4\4\1\0\5\4\1\115"+
    "\11\4\1\0\6\4\34\0\1\116\32\0\2\4\10\0"+
    "\1\4\3\0\4\4\1\0\2\4\1\117\14\4\1\0"+
    "\6\4\7\0\2\4\10\0\1\4\3\0\2\4\1\120"+
    "\1\4\1\0\1\4\1\120\15\4\1\0\6\4\7\0"+
    "\2\4\10\0\1\4\3\0\1\4\1\121\2\4\1\0"+
    "\14\4\1\121\2\4\1\0\6\4\7\0\2\4\10\0"+
    "\1\4\3\0\4\4\1\0\5\4\1\122\11\4\1\0"+
    "\6\4\7\0\2\4\10\0\1\123\3\0\4\4\1\0"+
    "\12\4\1\123\4\4\1\0\6\4\7\0\2\4\10\0"+
    "\1\4\3\0\4\4\1\0\5\4\1\124\11\4\1\0"+
    "\6\4\7\0\2\4\10\0\1\4\3\0\4\4\1\0"+
    "\11\4\1\125\5\4\1\0\6\4\7\0\2\4\10\0"+
    "\1\4\3\0\4\4\1\0\7\4\1\126\7\4\1\0"+
    "\6\4\7\0\2\4\10\0\1\4\3\0\2\4\1\127"+
    "\1\4\1\0\1\4\1\127\15\4\1\0\6\4\7\0"+
    "\2\4\10\0\1\4\3\0\1\130\3\4\1\0\17\4"+
    "\1\0\5\4\1\130\7\0\2\4\10\0\1\4\3\0"+
    "\4\4\1\0\5\4\1\131\11\4\1\0\6\4\7\0"+
    "\2\4\10\0\1\4\3\0\4\4\1\0\16\4\1\132"+
    "\1\0\6\4\7\0\2\4\10\0\1\4\3\0\4\4"+
    "\1\0\10\4\1\133\6\4\1\0\6\4\7\0\2\4"+
    "\10\0\1\4\3\0\4\4\1\0\4\4\1\134\1\135"+
    "\11\4\1\0\6\4\12\0\1\100\53\0\3\36\1\136"+
    "\5\36\1\76\1\77\45\36\10\137\1\0\1\140\46\137"+
    "\2\0\1\141\10\0\1\141\1\0\1\101\1\142\4\141"+
    "\1\0\17\141\1\0\6\141\7\0\2\4\10\0\1\4"+
    "\3\0\4\4\1\0\3\4\1\143\13\4\1\0\6\4"+
    "\7\0\2\4\10\0\1\4\3\0\4\4\1\0\5\4"+
    "\1\144\11\4\1\0\6\4\7\0\2\4\10\0\1\4"+
    "\3\0\4\4\1\0\17\4\1\145\1\146\5\4\31\0"+
    "\2\147\34\0\2\4\10\0\1\4\3\0\4\4\1\147"+
    "\1\150\16\4\1\0\6\4\7\0\2\4\10\0\1\4"+
    "\3\0\4\4\1\151\1\152\16\4\1\0\6\4\7\0"+
    "\2\4\10\0\1\4\3\0\4\4\1\0\5\4\1\153"+
    "\11\4\1\0\6\4\37\0\1\154\27\0\2\4\10\0"+
    "\1\4\3\0\4\4\1\0\5\4\1\155\11\4\1\0"+
    "\6\4\35\0\1\156\31\0\2\4\10\0\1\4\3\0"+
    "\4\4\1\0\3\4\1\157\13\4\1\0\6\4\7\0"+
    "\2\4\10\0\1\4\3\0\4\4\1\0\17\4\1\0"+
    "\4\4\1\160\1\4\35\0\1\161\31\0\2\4\10\0"+
    "\1\4\3\0\4\4\1\0\3\4\1\162\13\4\1\0"+
    "\6\4\7\0\2\4\10\0\1\4\3\0\4\4\1\0"+
    "\5\4\1\163\11\4\1\0\6\4\7\0\2\4\10\0"+
    "\1\4\3\0\4\4\1\0\3\4\1\164\13\4\1\0"+
    "\6\4\7\0\2\4\10\0\1\4\3\0\4\4\1\0"+
    "\17\4\1\0\4\4\1\165\1\4\7\0\2\4\10\0"+
    "\1\4\3\0\4\4\1\0\3\4\1\166\13\4\1\0"+
    "\6\4\7\0\2\4\10\0\1\4\3\0\4\4\1\0"+
    "\5\4\1\167\11\4\1\0\6\4\7\0\2\4\10\0"+
    "\1\4\3\0\4\4\1\170\1\171\16\4\1\0\6\4"+
    "\7\0\2\4\10\0\1\4\3\0\4\4\1\0\17\4"+
    "\1\0\2\4\1\172\3\4\7\0\2\4\10\0\1\4"+
    "\3\0\4\4\1\0\4\4\1\173\12\4\1\0\6\4"+
    "\7\0\2\4\10\0\1\4\3\0\4\4\1\0\3\4"+
    "\1\174\13\4\1\0\6\4\7\0\2\4\10\0\1\4"+
    "\3\0\4\4\1\0\10\4\1\175\6\4\1\0\6\4"+
    "\7\0\2\4\10\0\1\4\3\0\4\4\1\0\11\4"+
    "\1\176\5\4\1\0\6\4\7\0\2\4\10\0\1\4"+
    "\3\0\4\4\1\0\13\4\1\177\3\4\1\0\6\4"+
    "\7\0\2\4\10\0\1\4\3\0\4\4\1\0\3\4"+
    "\1\200\13\4\1\0\6\4\6\0\10\36\1\201\1\76"+
    "\1\77\50\36\1\136\4\36\1\201\1\76\1\77\45\36"+
    "\1\0\2\141\10\0\1\141\1\0\1\101\1\142\4\141"+
    "\1\0\17\141\1\0\6\141\25\0\1\202\41\0\2\4"+
    "\10\0\1\4\3\0\4\4\1\0\4\4\1\203\12\4"+
    "\1\0\6\4\7\0\2\4\10\0\1\4\3\0\4\4"+
    "\1\0\4\4\1\204\3\4\1\205\6\4\1\0\6\4"+
    "\31\0\2\206\34\0\2\4\10\0\1\4\3\0\4\4"+
    "\1\206\1\207\16\4\1\0\6\4\27\0\1\210\3\0"+
    "\1\210\33\0\2\4\10\0\1\4\3\0\2\4\1\211"+
    "\1\4\1\0\1\4\1\211\15\4\1\0\6\4\27\0"+
    "\1\212\3\0\1\212\33\0\2\4\10\0\1\4\3\0"+
    "\2\4\1\213\1\4\1\0\1\4\1\213\15\4\1\0"+
    "\6\4\7\0\2\4\10\0\1\4\3\0\4\4\1\214"+
    "\1\215\16\4\1\0\6\4\40\0\1\216\26\0\2\4"+
    "\10\0\1\4\3\0\4\4\1\0\6\4\1\217\10\4"+
    "\1\0\6\4\36\0\1\220\30\0\2\4\10\0\1\4"+
    "\3\0\4\4\1\0\4\4\1\221\12\4\1\0\6\4"+
    "\7\0\2\4\10\0\1\4\3\0\4\4\1\0\3\4"+
    "\1\222\13\4\1\0\6\4\7\0\2\4\10\0\1\4"+
    "\3\0\4\4\1\0\3\4\1\223\13\4\1\0\6\4"+
    "\7\0\2\4\10\0\1\4\3\0\4\4\1\0\17\4"+
    "\1\0\6\4\1\224\6\0\2\4\10\0\1\4\3\0"+
    "\4\4\1\0\6\4\1\225\10\4\1\0\6\4\40\0"+
    "\1\226\26\0\2\4\10\0\1\4\3\0\4\4\1\0"+
    "\6\4\1\227\10\4\1\0\6\4\7\0\2\4\10\0"+
    "\1\4\3\0\4\4\1\0\4\4\1\230\12\4\1\0"+
    "\6\4\7\0\2\4\10\0\1\4\3\0\4\4\1\231"+
    "\1\232\16\4\1\0\6\4\7\0\2\4\10\0\1\233"+
    "\3\0\4\4\1\0\12\4\1\233\4\4\1\0\6\4"+
    "\7\0\2\4\10\0\1\4\3\0\4\4\1\0\5\4"+
    "\1\234\11\4\1\0\6\4\7\0\2\4\10\0\1\4"+
    "\3\0\4\4\1\0\10\4\1\235\6\4\1\0\6\4"+
    "\7\0\2\4\10\0\1\4\3\0\4\4\1\0\11\4"+
    "\1\236\5\4\1\0\6\4\16\0\1\137\67\0\1\237"+
    "\40\0\2\4\10\0\1\4\3\0\4\4\1\0\3\4"+
    "\1\240\13\4\1\0\6\4\7\0\2\4\10\0\1\4"+
    "\3\0\4\4\1\0\11\4\1\241\5\4\1\0\6\4"+
    "\41\0\1\242\25\0\2\4\10\0\1\4\3\0\4\4"+
    "\1\0\7\4\1\243\7\4\1\0\6\4\35\0\1\244"+
    "\31\0\2\4\10\0\1\4\3\0\4\4\1\0\3\4"+
    "\1\245\13\4\1\0\6\4\35\0\1\246\31\0\2\4"+
    "\10\0\1\4\3\0\4\4\1\0\3\4\1\247\13\4"+
    "\1\0\6\4\27\0\1\250\3\0\1\250\33\0\2\4"+
    "\10\0\1\4\3\0\2\4\1\251\1\4\1\0\1\4"+
    "\1\251\15\4\1\0\6\4\45\0\1\252\21\0\2\4"+
    "\10\0\1\4\3\0\4\4\1\0\13\4\1\253\3\4"+
    "\1\0\6\4\37\0\1\254\27\0\2\4\10\0\1\4"+
    "\3\0\4\4\1\0\5\4\1\255\11\4\1\0\6\4"+
    "\36\0\1\256\30\0\2\4\10\0\1\4\3\0\4\4"+
    "\1\0\11\4\1\257\5\4\1\0\6\4\36\0\1\260"+
    "\30\0\2\4\10\0\1\4\3\0\4\4\1\0\4\4"+
    "\1\261\12\4\1\0\6\4\7\0\2\4\10\0\1\4"+
    "\3\0\4\4\1\0\10\4\1\262\6\4\1\0\6\4"+
    "\37\0\1\263\27\0\2\4\10\0\1\4\3\0\4\4"+
    "\1\0\5\4\1\264\11\4\1\0\6\4\7\0\2\4"+
    "\10\0\1\4\3\0\4\4\1\0\5\4\1\265\11\4"+
    "\1\0\6\4\7\0\2\4\10\0\1\4\3\0\4\4"+
    "\1\0\10\4\1\266\6\4\1\0\6\4\27\0\1\267"+
    "\37\0\2\4\10\0\1\4\3\0\3\4\1\270\1\0"+
    "\15\4\1\270\1\4\1\0\6\4\7\0\2\4\10\0"+
    "\1\4\3\0\4\4\1\0\10\4\1\271\6\4\1\0"+
    "\6\4\40\0\1\272\26\0\2\4\10\0\1\4\3\0"+
    "\4\4\1\0\6\4\1\273\10\4\1\0\6\4\42\0"+
    "\1\274\24\0\2\4\10\0\1\4\3\0\4\4\1\0"+
    "\10\4\1\275\6\4\1\0\6\4\40\0\1\276\26\0"+
    "\2\4\10\0\1\4\3\0\4\4\1\0\6\4\1\277"+
    "\10\4\1\0\6\4\40\0\1\300\26\0\2\4\10\0"+
    "\1\4\3\0\4\4\1\0\6\4\1\301\10\4\1\0"+
    "\6\4\42\0\1\302\24\0\2\4\10\0\1\4\3\0"+
    "\4\4\1\0\6\4\1\303\10\4\1\0\6\4\40\0"+
    "\1\304\26\0\2\4\10\0\1\4\3\0\4\4\1\0"+
    "\6\4\1\305\10\4\1\0\6\4\7\0\2\4\10\0"+
    "\1\4\3\0\4\4\1\0\3\4\1\306\13\4\1\0"+
    "\6\4\30\0\1\307\36\0\2\4\10\0\1\4\3\0"+
    "\4\4\1\0\13\4\1\310\3\4\1\0\6\4\45\0"+
    "\1\311\21\0\2\4\10\0\1\4\3\0\4\4\1\0"+
    "\13\4\1\312\3\4\1\0\6\4\37\0\1\313\27\0"+
    "\2\4\10\0\1\4\3\0\4\4\1\0\5\4\1\314"+
    "\11\4\1\0\6\4\36\0\1\315\30\0\2\4\10\0"+
    "\1\4\3\0\4\4\1\0\4\4\1\316\12\4\1\0"+
    "\6\4\34\0\1\317\32\0\2\4\10\0\1\4\3\0"+
    "\4\4\1\0\3\4\1\320\13\4\1\0\6\4\31\0"+
    "\2\321\34\0\2\4\10\0\1\4\3\0\4\4\1\321"+
    "\1\322\16\4\1\0\6\4\35\0\1\323\31\0\2\4"+
    "\10\0\1\4\3\0\4\4\1\0\3\4\1\324\13\4"+
    "\1\0\6\4\36\0\1\325\30\0\2\4\10\0\1\4"+
    "\3\0\4\4\1\0\4\4\1\326\12\4\1\0\6\4"+
    "\40\0\1\327\26\0\2\4\10\0\1\4\3\0\4\4"+
    "\1\0\6\4\1\330\10\4\1\0\6\4\51\0\2\331"+
    "\14\0\2\4\10\0\1\4\3\0\4\4\1\0\17\4"+
    "\1\331\1\332\5\4\35\0\1\333\67\0\1\334\65\0"+
    "\1\335\25\0\1\336\22\0\1\336\34\0\1\337\22\0"+
    "\1\337\44\0\2\340\62\0\1\341\65\0\1\342\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8640];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\22\1\4\11\4\0\2\1"+
    "\1\0\3\1\1\0\1\1\1\0\1\11\3\1\1\0"+
    "\16\1\3\0\1\11\1\0\3\1\1\0\3\1\1\0"+
    "\1\1\1\0\2\1\1\0\20\1\4\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\2\1\1\11\6\1\1\0\10\1\2\0\3\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\3\1\1\0\1\1\1\0\2\1\1\0"+
    "\5\1\1\0\2\1\1\0\1\1\1\11\1\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\2\1\1\0\3\1\1\0\2\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\2\1\1\11\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\1\1\11\1\1\7\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexicoGXML(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 208) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  private final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.out.println("Linea: " + (yyline+1) + " Columna: " + (yycolumn+1) + " - Error Lexico en: " + yytext());
          }
        case 41: break;
        case 2: 
          { return new Symbol(simbolo.valor_numero_completo, yyline, yycolumn,yytext());
          }
        case 42: break;
        case 3: 
          { return new Symbol(simbolo.valor_id, yyline, yycolumn,yytext());
          }
        case 43: break;
        case 4: 
          { /* ignore white space. */
          }
        case 44: break;
        case 5: 
          { return new Symbol(simbolo.div, yyline, yycolumn,yytext());
          }
        case 45: break;
        case 6: 
          { return new Symbol(simbolo.x, yyline, yycolumn,yytext());
          }
        case 46: break;
        case 7: 
          { return new Symbol(simbolo.y, yyline, yycolumn,yytext());
          }
        case 47: break;
        case 8: 
          { return new Symbol(simbolo.menorq, yyline, yycolumn,yytext());
          }
        case 48: break;
        case 9: 
          { return new Symbol(simbolo.mayorq, yyline, yycolumn,yytext());
          }
        case 49: break;
        case 10: 
          { return new Symbol(simbolo.igual, yyline, yycolumn,yytext());
          }
        case 50: break;
        case 11: 
          { return new Symbol(simbolo.comilladoble, yyline, yycolumn,yytext());
          }
        case 51: break;
        case 12: 
          { return new Symbol(simbolo.id, yyline, yycolumn,yytext());
          }
        case 52: break;
        case 13: 
          { return new Symbol(simbolo.comentario_simple, yyline, yycolumn,yytext());
          }
        case 53: break;
        case 14: 
          { return new Symbol(simbolo.tam, yyline, yycolumn,yytext());
          }
        case 54: break;
        case 15: 
          { return new Symbol(simbolo.comentario_multiple, yyline, yycolumn,yytext());
          }
        case 55: break;
        case 16: 
          { return new Symbol(simbolo.path, yyline, yycolumn,yytext());
          }
        case 56: break;
        case 17: 
          { return new Symbol(simbolo.tipo, yyline, yycolumn,yytext());
          }
        case 57: break;
        case 18: 
          { return new Symbol(simbolo.alto, yyline, yycolumn,yytext());
          }
        case 58: break;
        case 19: 
          { return new Symbol(simbolo.e_dato, yyline, yycolumn,yytext());
          }
        case 59: break;
        case 20: 
          { return new Symbol(simbolo.color, yyline, yycolumn,yytext());
          }
        case 60: break;
        case 21: 
          { return new Symbol(simbolo.e_texto, yyline, yycolumn,yytext());
          }
        case 61: break;
        case 22: 
          { return new Symbol(simbolo.ancho, yyline, yycolumn,yytext());
          }
        case 62: break;
        case 23: 
          { return new Symbol(simbolo.borde, yyline, yycolumn,yytext());
          }
        case 63: break;
        case 24: 
          { return new Symbol(simbolo.e_boton, yyline, yycolumn,yytext());
          }
        case 64: break;
        case 25: 
          { return new Symbol(simbolo.minimo, yyline, yycolumn,yytext());
          }
        case 65: break;
        case 26: 
          { return new Symbol(simbolo.maximo, yyline, yycolumn,yytext());
          }
        case 66: break;
        case 27: 
          { return new Symbol(simbolo.e_enviar, yyline, yycolumn,yytext());
          }
        case 67: break;
        case 28: 
          { return new Symbol(simbolo.nombre, yyline, yycolumn,yytext());
          }
        case 68: break;
        case 29: 
          { return new Symbol(simbolo.fuente, yyline, yycolumn,yytext());
          }
        case 69: break;
        case 30: 
          { return new Symbol(simbolo.e_control, yyline, yycolumn,yytext());
          }
        case 70: break;
        case 31: 
          { return new Symbol(simbolo.cursiva, yyline, yycolumn,yytext());
          }
        case 71: break;
        case 32: 
          { return new Symbol(simbolo.e_ventana, yyline, yycolumn,yytext());
          }
        case 72: break;
        case 33: 
          { return new Symbol(simbolo.negrita, yyline, yycolumn,yytext());
          }
        case 73: break;
        case 34: 
          { return new Symbol(simbolo.e_defecto, yyline, yycolumn,yytext());
          }
        case 74: break;
        case 35: 
          { return new Symbol(simbolo.valor_path, yyline, yycolumn,yytext());
          }
        case 75: break;
        case 36: 
          { return new Symbol(simbolo.e_importar, yyline, yycolumn,yytext());
          }
        case 76: break;
        case 37: 
          { return new Symbol(simbolo.e_contenedor, yyline, yycolumn,yytext());
          }
        case 77: break;
        case 38: 
          { return new Symbol(simbolo.e_multimedia, yyline, yycolumn,yytext());
          }
        case 78: break;
        case 39: 
          { return new Symbol(simbolo.e_listadatos, yyline, yycolumn,yytext());
          }
        case 79: break;
        case 40: 
          { return new Symbol(simbolo.auto_reproduccion, yyline, yycolumn,yytext());
          }
        case 80: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	return null;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
